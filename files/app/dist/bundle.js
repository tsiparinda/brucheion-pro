var app = (function () {
  'use strict'
  function noop() {}
  const identity = (e) => e
  function assign(e, t) {
    for (const i in t) e[i] = t[i]
    return e
  }
  function run(e) {
    return e()
  }
  function blank_object() {
    return Object.create(null)
  }
  function run_all(e) {
    e.forEach(run)
  }
  function is_function(e) {
    return 'function' == typeof e
  }
  function safe_not_equal(e, t) {
    return e != e
      ? t == t
      : e !== t || (e && 'object' == typeof e) || 'function' == typeof e
  }
  function is_empty(e) {
    return 0 === Object.keys(e).length
  }
  function subscribe(e, ...t) {
    if (null == e) return noop
    const i = e.subscribe(...t)
    return i.unsubscribe ? () => i.unsubscribe() : i
  }
  function component_subscribe(e, t, i) {
    e.$$.on_destroy.push(subscribe(t, i))
  }
  function create_slot(e, t, i, n) {
    if (e) {
      const o = get_slot_context(e, t, i, n)
      return e[0](o)
    }
  }
  function get_slot_context(e, t, i, n) {
    return e[1] && n ? assign(i.ctx.slice(), e[1](n(t))) : i.ctx
  }
  function get_slot_changes(e, t, i, n) {
    if (e[2] && n) {
      const o = e[2](n(i))
      if (void 0 === t.dirty) return o
      if ('object' == typeof o) {
        const e = [],
          i = Math.max(t.dirty.length, o.length)
        for (let n = 0; n < i; n += 1) e[n] = t.dirty[n] | o[n]
        return e
      }
      return t.dirty | o
    }
    return t.dirty
  }
  function update_slot(e, t, i, n, o, r, s) {
    const a = get_slot_changes(t, n, o, r)
    if (a) {
      const o = get_slot_context(t, i, n, s)
      e.p(o, a)
    }
  }
  function exclude_internal_props(e) {
    const t = {}
    for (const i in e) '$' !== i[0] && (t[i] = e[i])
    return t
  }
  const is_client = 'undefined' != typeof window
  let now = is_client ? () => window.performance.now() : () => Date.now(),
    raf = is_client ? (e) => requestAnimationFrame(e) : noop
  const tasks = new Set()
  function run_tasks(e) {
    tasks.forEach((t) => {
      t.c(e) || (tasks.delete(t), t.f())
    }),
      0 !== tasks.size && raf(run_tasks)
  }
  function loop(e) {
    let t
    return (
      0 === tasks.size && raf(run_tasks),
      {
        promise: new Promise((i) => {
          tasks.add((t = { c: e, f: i }))
        }),
        abort() {
          tasks.delete(t)
        },
      }
    )
  }
  function append(e, t) {
    e.appendChild(t)
  }
  function insert(e, t, i) {
    e.insertBefore(t, i || null)
  }
  function detach(e) {
    e.parentNode.removeChild(e)
  }
  function destroy_each(e, t) {
    for (let i = 0; i < e.length; i += 1) e[i] && e[i].d(t)
  }
  function element(e) {
    return document.createElement(e)
  }
  function text(e) {
    return document.createTextNode(e)
  }
  function space() {
    return text(' ')
  }
  function empty() {
    return text('')
  }
  function listen(e, t, i, n) {
    return e.addEventListener(t, i, n), () => e.removeEventListener(t, i, n)
  }
  function prevent_default(e) {
    return function (t) {
      return t.preventDefault(), e.call(this, t)
    }
  }
  function attr(e, t, i) {
    null == i
      ? e.removeAttribute(t)
      : e.getAttribute(t) !== i && e.setAttribute(t, i)
  }
  function set_attributes(e, t) {
    const i = Object.getOwnPropertyDescriptors(e.__proto__)
    for (const n in t)
      null == t[n]
        ? e.removeAttribute(n)
        : 'style' === n
        ? (e.style.cssText = t[n])
        : '__value' === n
        ? (e.value = e[n] = t[n])
        : i[n] && i[n].set
        ? (e[n] = t[n])
        : attr(e, n, t[n])
  }
  function children(e) {
    return Array.from(e.childNodes)
  }
  function set_data(e, t) {
    ;(t = '' + t), e.wholeText !== t && (e.data = t)
  }
  function set_input_value(e, t) {
    e.value = null == t ? '' : t
  }
  function set_style(e, t, i, n) {
    e.style.setProperty(t, i, n ? 'important' : '')
  }
  function select_option(e, t) {
    for (let i = 0; i < e.options.length; i += 1) {
      const n = e.options[i]
      if (n.__value === t) return void (n.selected = !0)
    }
  }
  function select_value(e) {
    const t = e.querySelector(':checked') || e.options[0]
    return t && t.__value
  }
  function toggle_class(e, t, i) {
    e.classList[i ? 'add' : 'remove'](t)
  }
  function custom_event(e, t) {
    const i = document.createEvent('CustomEvent')
    return i.initCustomEvent(e, !1, !1, t), i
  }
  class HtmlTag {
    constructor(e = null) {
      ;(this.a = e), (this.e = this.n = null)
    }
    m(e, t, i = null) {
      this.e || ((this.e = element(t.nodeName)), (this.t = t), this.h(e)),
        this.i(i)
    }
    h(e) {
      ;(this.e.innerHTML = e), (this.n = Array.from(this.e.childNodes))
    }
    i(e) {
      for (let t = 0; t < this.n.length; t += 1) insert(this.t, this.n[t], e)
    }
    p(e) {
      this.d(), this.h(e), this.i(this.a)
    }
    d() {
      this.n.forEach(detach)
    }
  }
  const active_docs = new Set()
  let active = 0,
    current_component
  function hash(e) {
    let t = 5381,
      i = e.length
    for (; i--; ) t = ((t << 5) - t) ^ e.charCodeAt(i)
    return t >>> 0
  }
  function create_rule(e, t, i, n, o, r, s, a = 0) {
    const l = 16.666 / n
    let c = '{\n'
    for (let e = 0; e <= 1; e += l) {
      const n = t + (i - t) * r(e)
      c += 100 * e + `%{${s(n, 1 - n)}}\n`
    }
    const h = c + `100% {${s(i, 1 - i)}}\n}`,
      u = `__svelte_${hash(h)}_${a}`,
      d = e.ownerDocument
    active_docs.add(d)
    const p =
        d.__svelte_stylesheet ||
        (d.__svelte_stylesheet = d.head.appendChild(element('style')).sheet),
      g = d.__svelte_rules || (d.__svelte_rules = {})
    g[u] ||
      ((g[u] = !0), p.insertRule(`@keyframes ${u} ${h}`, p.cssRules.length))
    const m = e.style.animation || ''
    return (
      (e.style.animation = `${
        m ? m + ', ' : ''
      }${u} ${n}ms linear ${o}ms 1 both`),
      (active += 1),
      u
    )
  }
  function delete_rule(e, t) {
    const i = (e.style.animation || '').split(', '),
      n = i.filter(
        t ? (e) => e.indexOf(t) < 0 : (e) => -1 === e.indexOf('__svelte')
      ),
      o = i.length - n.length
    o &&
      ((e.style.animation = n.join(', ')),
      (active -= o),
      active || clear_rules())
  }
  function clear_rules() {
    raf(() => {
      active ||
        (active_docs.forEach((e) => {
          const t = e.__svelte_stylesheet
          let i = t.cssRules.length
          for (; i--; ) t.deleteRule(i)
          e.__svelte_rules = {}
        }),
        active_docs.clear())
    })
  }
  function set_current_component(e) {
    current_component = e
  }
  function get_current_component() {
    if (!current_component)
      throw new Error('Function called outside component initialization')
    return current_component
  }
  function onMount(e) {
    get_current_component().$$.on_mount.push(e)
  }
  function onDestroy(e) {
    get_current_component().$$.on_destroy.push(e)
  }
  function createEventDispatcher() {
    const e = get_current_component()
    return (t, i) => {
      const n = e.$$.callbacks[t]
      if (n) {
        const o = custom_event(t, i)
        n.slice().forEach((t) => {
          t.call(e, o)
        })
      }
    }
  }
  function setContext(e, t) {
    get_current_component().$$.context.set(e, t)
  }
  function getContext(e) {
    return get_current_component().$$.context.get(e)
  }
  const dirty_components = [],
    binding_callbacks = [],
    render_callbacks = [],
    flush_callbacks = [],
    resolved_promise = Promise.resolve()
  let update_scheduled = !1
  function schedule_update() {
    update_scheduled || ((update_scheduled = !0), resolved_promise.then(flush))
  }
  function add_render_callback(e) {
    render_callbacks.push(e)
  }
  function add_flush_callback(e) {
    flush_callbacks.push(e)
  }
  let flushing = !1
  const seen_callbacks = new Set()
  function flush() {
    if (!flushing) {
      flushing = !0
      do {
        for (let e = 0; e < dirty_components.length; e += 1) {
          const t = dirty_components[e]
          set_current_component(t), update(t.$$)
        }
        for (dirty_components.length = 0; binding_callbacks.length; )
          binding_callbacks.pop()()
        for (let e = 0; e < render_callbacks.length; e += 1) {
          const t = render_callbacks[e]
          seen_callbacks.has(t) || (seen_callbacks.add(t), t())
        }
        render_callbacks.length = 0
      } while (dirty_components.length)
      for (; flush_callbacks.length; ) flush_callbacks.pop()()
      ;(update_scheduled = !1), (flushing = !1), seen_callbacks.clear()
    }
  }
  function update(e) {
    if (null !== e.fragment) {
      e.update(), run_all(e.before_update)
      const t = e.dirty
      ;(e.dirty = [-1]),
        e.fragment && e.fragment.p(e.ctx, t),
        e.after_update.forEach(add_render_callback)
    }
  }
  let promise
  function wait() {
    return (
      promise ||
        ((promise = Promise.resolve()),
        promise.then(() => {
          promise = null
        })),
      promise
    )
  }
  function dispatch(e, t, i) {
    e.dispatchEvent(custom_event(`${t ? 'intro' : 'outro'}${i}`))
  }
  const outroing = new Set()
  let outros
  function group_outros() {
    outros = { r: 0, c: [], p: outros }
  }
  function check_outros() {
    outros.r || run_all(outros.c), (outros = outros.p)
  }
  function transition_in(e, t) {
    e && e.i && (outroing.delete(e), e.i(t))
  }
  function transition_out(e, t, i, n) {
    if (e && e.o) {
      if (outroing.has(e)) return
      outroing.add(e),
        outros.c.push(() => {
          outroing.delete(e), n && (i && e.d(1), n())
        }),
        e.o(t)
    }
  }
  const null_transition = { duration: 0 }
  function create_in_transition(e, t, i) {
    let n,
      o,
      r = t(e, i),
      s = !1,
      a = 0
    function l() {
      n && delete_rule(e, n)
    }
    function c() {
      const {
        delay: t = 0,
        duration: i = 300,
        easing: c = identity,
        tick: h = noop,
        css: u,
      } = r || null_transition
      u && (n = create_rule(e, 0, 1, i, t, c, u, a++)), h(0, 1)
      const d = now() + t,
        p = d + i
      o && o.abort(),
        (s = !0),
        add_render_callback(() => dispatch(e, !0, 'start')),
        (o = loop((t) => {
          if (s) {
            if (t >= p) return h(1, 0), dispatch(e, !0, 'end'), l(), (s = !1)
            if (t >= d) {
              const e = c((t - d) / i)
              h(e, 1 - e)
            }
          }
          return s
        }))
    }
    let h = !1
    return {
      start() {
        h ||
          (delete_rule(e), is_function(r) ? ((r = r()), wait().then(c)) : c())
      },
      invalidate() {
        h = !1
      },
      end() {
        s && (l(), (s = !1))
      },
    }
  }
  function create_out_transition(e, t, i) {
    let n,
      o = t(e, i),
      r = !0
    const s = outros
    function a() {
      const {
        delay: t = 0,
        duration: i = 300,
        easing: a = identity,
        tick: l = noop,
        css: c,
      } = o || null_transition
      c && (n = create_rule(e, 1, 0, i, t, a, c))
      const h = now() + t,
        u = h + i
      add_render_callback(() => dispatch(e, !1, 'start')),
        loop((t) => {
          if (r) {
            if (t >= u)
              return l(0, 1), dispatch(e, !1, 'end'), --s.r || run_all(s.c), !1
            if (t >= h) {
              const e = a((t - h) / i)
              l(1 - e, e)
            }
          }
          return r
        })
    }
    return (
      (s.r += 1),
      is_function(o)
        ? wait().then(() => {
            ;(o = o()), a()
          })
        : a(),
      {
        end(t) {
          t && o.tick && o.tick(1, 0), r && (n && delete_rule(e, n), (r = !1))
        },
      }
    )
  }
  function create_bidirectional_transition(e, t, i, n) {
    let o = t(e, i),
      r = n ? 0 : 1,
      s = null,
      a = null,
      l = null
    function c() {
      l && delete_rule(e, l)
    }
    function h(e, t) {
      const i = e.b - r
      return (
        (t *= Math.abs(i)),
        {
          a: r,
          b: e.b,
          d: i,
          duration: t,
          start: e.start,
          end: e.start + t,
          group: e.group,
        }
      )
    }
    function u(t) {
      const {
          delay: i = 0,
          duration: n = 300,
          easing: u = identity,
          tick: d = noop,
          css: p,
        } = o || null_transition,
        g = { start: now() + i, b: t }
      t || ((g.group = outros), (outros.r += 1)),
        s
          ? (a = g)
          : (p && (c(), (l = create_rule(e, r, t, n, i, u, p))),
            t && d(0, 1),
            (s = h(g, n)),
            add_render_callback(() => dispatch(e, t, 'start')),
            loop((t) => {
              if (
                (a &&
                  t > a.start &&
                  ((s = h(a, n)),
                  (a = null),
                  dispatch(e, s.b, 'start'),
                  p &&
                    (c(),
                    (l = create_rule(e, r, s.b, s.duration, 0, u, o.css)))),
                s)
              )
                if (t >= s.end)
                  d((r = s.b), 1 - r),
                    dispatch(e, s.b, 'end'),
                    a || (s.b ? c() : --s.group.r || run_all(s.group.c)),
                    (s = null)
                else if (t >= s.start) {
                  const e = t - s.start
                  ;(r = s.a + s.d * u(e / s.duration)), d(r, 1 - r)
                }
              return !(!s && !a)
            }))
    }
    return {
      run(e) {
        is_function(o)
          ? wait().then(() => {
              ;(o = o()), u(e)
            })
          : u(e)
      },
      end() {
        c(), (s = a = null)
      },
    }
  }
  function get_spread_update(e, t) {
    const i = {},
      n = {},
      o = { $$scope: 1 }
    let r = e.length
    for (; r--; ) {
      const s = e[r],
        a = t[r]
      if (a) {
        for (const e in s) e in a || (n[e] = 1)
        for (const e in a) o[e] || ((i[e] = a[e]), (o[e] = 1))
        e[r] = a
      } else for (const e in s) o[e] = 1
    }
    for (const e in n) e in i || (i[e] = void 0)
    return i
  }
  function get_spread_object(e) {
    return 'object' == typeof e && null !== e ? e : {}
  }
  function bind(e, t, i) {
    const n = e.$$.props[t]
    void 0 !== n && ((e.$$.bound[n] = i), i(e.$$.ctx[n]))
  }
  function create_component(e) {
    e && e.c()
  }
  function mount_component(e, t, i) {
    const { fragment: n, on_mount: o, on_destroy: r, after_update: s } = e.$$
    n && n.m(t, i),
      add_render_callback(() => {
        const t = o.map(run).filter(is_function)
        r ? r.push(...t) : run_all(t), (e.$$.on_mount = [])
      }),
      s.forEach(add_render_callback)
  }
  function destroy_component(e, t) {
    const i = e.$$
    null !== i.fragment &&
      (run_all(i.on_destroy),
      i.fragment && i.fragment.d(t),
      (i.on_destroy = i.fragment = null),
      (i.ctx = []))
  }
  function make_dirty(e, t) {
    ;-1 === e.$$.dirty[0] &&
      (dirty_components.push(e), schedule_update(), e.$$.dirty.fill(0)),
      (e.$$.dirty[(t / 31) | 0] |= 1 << t % 31)
  }
  function init(e, t, i, n, o, r, s = [-1]) {
    const a = current_component
    set_current_component(e)
    const l = t.props || {},
      c = (e.$$ = {
        fragment: null,
        ctx: null,
        props: r,
        update: noop,
        not_equal: o,
        bound: blank_object(),
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(a ? a.$$.context : []),
        callbacks: blank_object(),
        dirty: s,
        skip_bound: !1,
      })
    let h = !1
    if (
      ((c.ctx = i
        ? i(e, l, (t, i, ...n) => {
            const r = n.length ? n[0] : i
            return (
              c.ctx &&
                o(c.ctx[t], (c.ctx[t] = r)) &&
                (!c.skip_bound && c.bound[t] && c.bound[t](r),
                h && make_dirty(e, t)),
              i
            )
          })
        : []),
      c.update(),
      (h = !0),
      run_all(c.before_update),
      (c.fragment = !!n && n(c.ctx)),
      t.target)
    ) {
      if (t.hydrate) {
        const e = children(t.target)
        c.fragment && c.fragment.l(e), e.forEach(detach)
      } else c.fragment && c.fragment.c()
      t.intro && transition_in(e.$$.fragment),
        mount_component(e, t.target, t.anchor),
        flush()
    }
    set_current_component(a)
  }
  class SvelteComponent {
    $destroy() {
      destroy_component(this, 1), (this.$destroy = noop)
    }
    $on(e, t) {
      const i = this.$$.callbacks[e] || (this.$$.callbacks[e] = [])
      return (
        i.push(t),
        () => {
          const e = i.indexOf(t)
          ;-1 !== e && i.splice(e, 1)
        }
      )
    }
    $set(e) {
      this.$$set &&
        !is_empty(e) &&
        ((this.$$.skip_bound = !0), this.$$set(e), (this.$$.skip_bound = !1))
    }
  }
  const subscriber_queue = []
  function readable(e, t) {
    return { subscribe: writable(e, t).subscribe }
  }
  function writable(e, t = noop) {
    let i
    const n = []
    function o(t) {
      if (safe_not_equal(e, t) && ((e = t), i)) {
        const t = !subscriber_queue.length
        for (let t = 0; t < n.length; t += 1) {
          const i = n[t]
          i[1](), subscriber_queue.push(i, e)
        }
        if (t) {
          for (let e = 0; e < subscriber_queue.length; e += 2)
            subscriber_queue[e][0](subscriber_queue[e + 1])
          subscriber_queue.length = 0
        }
      }
    }
    return {
      set: o,
      update: function (t) {
        o(t(e))
      },
      subscribe: function (r, s = noop) {
        const a = [r, s]
        return (
          n.push(a),
          1 === n.length && (i = t(o) || noop),
          r(e),
          () => {
            const e = n.indexOf(a)
            ;-1 !== e && n.splice(e, 1), 0 === n.length && (i(), (i = null))
          }
        )
      },
    }
  }
  function derived(e, t, i) {
    const n = !Array.isArray(e),
      o = n ? [e] : e,
      r = t.length < 2
    return readable(i, (e) => {
      let i = !1
      const s = []
      let a = 0,
        l = noop
      const c = () => {
          if (a) return
          l()
          const i = t(n ? s[0] : s, e)
          r ? e(i) : (l = is_function(i) ? i : noop)
        },
        h = o.map((e, t) =>
          subscribe(
            e,
            (e) => {
              ;(s[t] = e), (a &= ~(1 << t)), i && c()
            },
            () => {
              a |= 1 << t
            }
          )
        )
      return (
        (i = !0),
        c(),
        function () {
          run_all(h), l()
        }
      )
    })
  }
  const LOCATION = {},
    ROUTER = {}
  function getLocation(e) {
    return {
      ...e.location,
      state: e.history.state,
      key: (e.history.state && e.history.state.key) || 'initial',
    }
  }
  function createHistory(e, t) {
    const i = []
    let n = getLocation(e)
    return {
      get location() {
        return n
      },
      listen(t) {
        i.push(t)
        const o = () => {
          ;(n = getLocation(e)), t({ location: n, action: 'POP' })
        }
        return (
          e.addEventListener('popstate', o),
          () => {
            e.removeEventListener('popstate', o)
            const n = i.indexOf(t)
            i.splice(n, 1)
          }
        )
      },
      navigate(t, { state: o, replace: r = !1 } = {}) {
        o = { ...o, key: Date.now() + '' }
        try {
          r
            ? e.history.replaceState(o, null, t)
            : e.history.pushState(o, null, t)
        } catch (i) {
          e.location[r ? 'replace' : 'assign'](t)
        }
        ;(n = getLocation(e)),
          i.forEach((e) => e({ location: n, action: 'PUSH' }))
      },
    }
  }
  function createMemorySource(e = '/') {
    let t = 0
    const i = [{ pathname: e, search: '' }],
      n = []
    return {
      get location() {
        return i[t]
      },
      addEventListener(e, t) {},
      removeEventListener(e, t) {},
      history: {
        get entries() {
          return i
        },
        get index() {
          return t
        },
        get state() {
          return n[t]
        },
        pushState(e, o, r) {
          const [s, a = ''] = r.split('?')
          t++, i.push({ pathname: s, search: a }), n.push(e)
        },
        replaceState(e, o, r) {
          const [s, a = ''] = r.split('?')
          ;(i[t] = { pathname: s, search: a }), (n[t] = e)
        },
      },
    }
  }
  const canUseDOM = Boolean(
      'undefined' != typeof window &&
        window.document &&
        window.document.createElement
    ),
    globalHistory = createHistory(canUseDOM ? window : createMemorySource()),
    { navigate: navigate } = globalHistory,
    paramRe = /^:(.+)/,
    SEGMENT_POINTS = 4,
    STATIC_POINTS = 3,
    DYNAMIC_POINTS = 2,
    SPLAT_PENALTY = 1,
    ROOT_POINTS = 1
  function startsWith(e, t) {
    return e.substr(0, t.length) === t
  }
  function isRootSegment(e) {
    return '' === e
  }
  function isDynamic(e) {
    return paramRe.test(e)
  }
  function isSplat(e) {
    return '*' === e[0]
  }
  function segmentize(e) {
    return e.replace(/(^\/+|\/+$)/g, '').split('/')
  }
  function stripSlashes(e) {
    return e.replace(/(^\/+|\/+$)/g, '')
  }
  function rankRoute(e, t) {
    return {
      route: e,
      score: e.default
        ? 0
        : segmentize(e.path).reduce(
            (e, t) => (
              (e += SEGMENT_POINTS),
              isRootSegment(t)
                ? (e += ROOT_POINTS)
                : isDynamic(t)
                ? (e += DYNAMIC_POINTS)
                : isSplat(t)
                ? (e -= SEGMENT_POINTS + SPLAT_PENALTY)
                : (e += STATIC_POINTS),
              e
            ),
            0
          ),
      index: t,
    }
  }
  function rankRoutes(e) {
    return e
      .map(rankRoute)
      .sort((e, t) =>
        e.score < t.score ? 1 : e.score > t.score ? -1 : e.index - t.index
      )
  }
  function pick(e, t) {
    let i, n
    const [o] = t.split('?'),
      r = segmentize(o),
      s = '' === r[0],
      a = rankRoutes(e)
    for (let e = 0, o = a.length; e < o; e++) {
      const o = a[e].route
      let l = !1
      if (o.default) {
        n = { route: o, params: {}, uri: t }
        continue
      }
      const c = segmentize(o.path),
        h = {},
        u = Math.max(r.length, c.length)
      let d = 0
      for (; d < u; d++) {
        const e = c[d],
          t = r[d]
        if (void 0 !== e && isSplat(e)) {
          h['*' === e ? '*' : e.slice(1)] = r
            .slice(d)
            .map(decodeURIComponent)
            .join('/')
          break
        }
        if (void 0 === t) {
          l = !0
          break
        }
        let i = paramRe.exec(e)
        if (i && !s) {
          const e = decodeURIComponent(t)
          h[i[1]] = e
        } else if (e !== t) {
          l = !0
          break
        }
      }
      if (!l) {
        i = { route: o, params: h, uri: '/' + r.slice(0, d).join('/') }
        break
      }
    }
    return i || n || null
  }
  function match(e, t) {
    return pick([e], t)
  }
  function addQuery(e, t) {
    return e + (t ? '?' + t : '')
  }
  function resolve(e, t) {
    if (startsWith(e, '/')) return e
    const [i, n] = e.split('?'),
      [o] = t.split('?'),
      r = segmentize(i),
      s = segmentize(o)
    if ('' === r[0]) return addQuery(o, n)
    if (!startsWith(r[0], '.')) {
      return addQuery(('/' === o ? '' : '/') + s.concat(r).join('/'), n)
    }
    const a = s.concat(r),
      l = []
    return (
      a.forEach((e) => {
        '..' === e ? l.pop() : '.' !== e && l.push(e)
      }),
      addQuery('/' + l.join('/'), n)
    )
  }
  function combinePaths(e, t) {
    return (
      stripSlashes('/' === t ? e : `${stripSlashes(e)}/${stripSlashes(t)}`) +
      '/'
    )
  }
  function shouldNavigate(e) {
    return (
      !e.defaultPrevented &&
      0 === e.button &&
      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)
    )
  }
  function create_fragment(e) {
    let t
    const i = e[6].default,
      n = create_slot(i, e, e[5], null)
    return {
      c() {
        n && n.c()
      },
      m(e, i) {
        n && n.m(e, i), (t = !0)
      },
      p(e, [t]) {
        n && n.p && 32 & t && update_slot(n, i, e, e[5], t, null, null)
      },
      i(e) {
        t || (transition_in(n, e), (t = !0))
      },
      o(e) {
        transition_out(n, e), (t = !1)
      },
      d(e) {
        n && n.d(e)
      },
    }
  }
  function instance(e, t, i) {
    let n,
      o,
      r,
      { basepath: s = '/' } = t,
      { url: a = null } = t
    const l = getContext(LOCATION),
      c = getContext(ROUTER),
      h = writable([])
    component_subscribe(e, h, (e) => i(10, (r = e)))
    const u = writable(null)
    let d = !1
    const p = l || writable(a ? { pathname: a } : globalHistory.location)
    component_subscribe(e, p, (e) => i(9, (o = e)))
    const g = c ? c.routerBase : writable({ path: s, uri: s })
    component_subscribe(e, g, (e) => i(8, (n = e)))
    const m = derived([g, u], ([e, t]) => {
      if (null === t) return e
      const { path: i } = e,
        { route: n, uri: o } = t
      return { path: n.default ? i : n.path.replace(/\*.*$/, ''), uri: o }
    })
    l ||
      (onMount(() =>
        globalHistory.listen((e) => {
          p.set(e.location)
        })
      ),
      setContext(LOCATION, p)),
      setContext(ROUTER, {
        activeRoute: u,
        base: g,
        routerBase: m,
        registerRoute: function (e) {
          const { path: t } = n
          let { path: i } = e
          if (
            ((e._path = i),
            (e.path = combinePaths(t, i)),
            'undefined' == typeof window)
          ) {
            if (d) return
            const t = match(e, o.pathname)
            t && (u.set(t), (d = !0))
          } else h.update((t) => (t.push(e), t))
        },
        unregisterRoute: function (e) {
          h.update((t) => {
            const i = t.indexOf(e)
            return t.splice(i, 1), t
          })
        },
      })
    let { $$slots: v = {}, $$scope: f } = t
    return (
      (e.$$set = (e) => {
        'basepath' in e && i(3, (s = e.basepath)),
          'url' in e && i(4, (a = e.url)),
          '$$scope' in e && i(5, (f = e.$$scope))
      }),
      (e.$$.update = () => {
        if (256 & e.$$.dirty) {
          const { path: e } = n
          h.update(
            (t) => (t.forEach((t) => (t.path = combinePaths(e, t._path))), t)
          )
        }
        if (1536 & e.$$.dirty) {
          const e = pick(r, o.pathname)
          u.set(e)
        }
      }),
      [h, p, g, s, a, f, v]
    )
  }
  class Router extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance, create_fragment, safe_not_equal, {
          basepath: 3,
          url: 4,
        })
    }
  }
  const get_default_slot_changes = (e) => ({ params: 2 & e, location: 16 & e }),
    get_default_slot_context = (e) => ({ params: e[1], location: e[4] })
  function create_if_block(e) {
    let t, i, n, o
    const r = [create_if_block_1, create_else_block],
      s = []
    function a(e, t) {
      return null !== e[0] ? 0 : 1
    }
    return (
      (t = a(e)),
      (i = s[t] = r[t](e)),
      {
        c() {
          i.c(), (n = empty())
        },
        m(e, i) {
          s[t].m(e, i), insert(e, n, i), (o = !0)
        },
        p(e, o) {
          let l = t
          ;(t = a(e)),
            t === l
              ? s[t].p(e, o)
              : (group_outros(),
                transition_out(s[l], 1, 1, () => {
                  s[l] = null
                }),
                check_outros(),
                (i = s[t]),
                i || ((i = s[t] = r[t](e)), i.c()),
                transition_in(i, 1),
                i.m(n.parentNode, n))
        },
        i(e) {
          o || (transition_in(i), (o = !0))
        },
        o(e) {
          transition_out(i), (o = !1)
        },
        d(e) {
          s[t].d(e), e && detach(n)
        },
      }
    )
  }
  function create_else_block(e) {
    let t
    const i = e[10].default,
      n = create_slot(i, e, e[9], get_default_slot_context)
    return {
      c() {
        n && n.c()
      },
      m(e, i) {
        n && n.m(e, i), (t = !0)
      },
      p(e, t) {
        n &&
          n.p &&
          530 & t &&
          update_slot(
            n,
            i,
            e,
            e[9],
            t,
            get_default_slot_changes,
            get_default_slot_context
          )
      },
      i(e) {
        t || (transition_in(n, e), (t = !0))
      },
      o(e) {
        transition_out(n, e), (t = !1)
      },
      d(e) {
        n && n.d(e)
      },
    }
  }
  function create_if_block_1(e) {
    let t, i, n
    const o = [{ location: e[4] }, e[1], e[2]]
    var r = e[0]
    function s(e) {
      let t = {}
      for (let e = 0; e < o.length; e += 1) t = assign(t, o[e])
      return { props: t }
    }
    return (
      r && (t = new r(s())),
      {
        c() {
          t && create_component(t.$$.fragment), (i = empty())
        },
        m(e, o) {
          t && mount_component(t, e, o), insert(e, i, o), (n = !0)
        },
        p(e, n) {
          const a =
            22 & n
              ? get_spread_update(o, [
                  16 & n && { location: e[4] },
                  2 & n && get_spread_object(e[1]),
                  4 & n && get_spread_object(e[2]),
                ])
              : {}
          if (r !== (r = e[0])) {
            if (t) {
              group_outros()
              const e = t
              transition_out(e.$$.fragment, 1, 0, () => {
                destroy_component(e, 1)
              }),
                check_outros()
            }
            r
              ? ((t = new r(s())),
                create_component(t.$$.fragment),
                transition_in(t.$$.fragment, 1),
                mount_component(t, i.parentNode, i))
              : (t = null)
          } else r && t.$set(a)
        },
        i(e) {
          n || (t && transition_in(t.$$.fragment, e), (n = !0))
        },
        o(e) {
          t && transition_out(t.$$.fragment, e), (n = !1)
        },
        d(e) {
          e && detach(i), t && destroy_component(t, e)
        },
      }
    )
  }
  function create_fragment$1(e) {
    let t,
      i,
      n = null !== e[3] && e[3].route === e[7] && create_if_block(e)
    return {
      c() {
        n && n.c(), (t = empty())
      },
      m(e, o) {
        n && n.m(e, o), insert(e, t, o), (i = !0)
      },
      p(e, [i]) {
        null !== e[3] && e[3].route === e[7]
          ? n
            ? (n.p(e, i), 8 & i && transition_in(n, 1))
            : ((n = create_if_block(e)),
              n.c(),
              transition_in(n, 1),
              n.m(t.parentNode, t))
          : n &&
            (group_outros(),
            transition_out(n, 1, 1, () => {
              n = null
            }),
            check_outros())
      },
      i(e) {
        i || (transition_in(n), (i = !0))
      },
      o(e) {
        transition_out(n), (i = !1)
      },
      d(e) {
        n && n.d(e), e && detach(t)
      },
    }
  }
  function instance$1(e, t, i) {
    let n,
      o,
      { path: r = '' } = t,
      { component: s = null } = t
    const { registerRoute: a, unregisterRoute: l, activeRoute: c } = getContext(
      ROUTER
    )
    component_subscribe(e, c, (e) => i(3, (n = e)))
    const h = getContext(LOCATION)
    component_subscribe(e, h, (e) => i(4, (o = e)))
    const u = { path: r, default: '' === r }
    let d = {},
      p = {}
    a(u),
      'undefined' != typeof window &&
        onDestroy(() => {
          l(u)
        })
    let { $$slots: g = {}, $$scope: m } = t
    return (
      (e.$$set = (e) => {
        i(13, (t = assign(assign({}, t), exclude_internal_props(e)))),
          'path' in e && i(8, (r = e.path)),
          'component' in e && i(0, (s = e.component)),
          '$$scope' in e && i(9, (m = e.$$scope))
      }),
      (e.$$.update = () => {
        8 & e.$$.dirty && n && n.route === u && i(1, (d = n.params))
        {
          const { path: e, component: n, ...o } = t
          i(2, (p = o))
        }
      }),
      (t = exclude_internal_props(t)),
      [s, d, p, n, o, c, h, u, r, m, g]
    )
  }
  class Route extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$1, create_fragment$1, safe_not_equal, {
          path: 8,
          component: 0,
        })
    }
  }
  function create_fragment$2(e) {
    let t, i, n, o
    const r = e[11].default,
      s = create_slot(r, e, e[10], null)
    let a = [{ href: e[0] }, { 'aria-current': e[2] }, e[1]],
      l = {}
    for (let e = 0; e < a.length; e += 1) l = assign(l, a[e])
    return {
      c() {
        ;(t = element('a')), s && s.c(), set_attributes(t, l)
      },
      m(r, a) {
        insert(r, t, a),
          s && s.m(t, null),
          (i = !0),
          n || ((o = listen(t, 'click', e[5])), (n = !0))
      },
      p(e, [n]) {
        s && s.p && 1024 & n && update_slot(s, r, e, e[10], n, null, null),
          set_attributes(
            t,
            (l = get_spread_update(a, [
              (!i || 1 & n) && { href: e[0] },
              (!i || 4 & n) && { 'aria-current': e[2] },
              2 & n && e[1],
            ]))
          )
      },
      i(e) {
        i || (transition_in(s, e), (i = !0))
      },
      o(e) {
        transition_out(s, e), (i = !1)
      },
      d(e) {
        e && detach(t), s && s.d(e), (n = !1), o()
      },
    }
  }
  function instance$2(e, t, i) {
    let n,
      o,
      { to: r = '#' } = t,
      { replace: s = !1 } = t,
      { state: a = {} } = t,
      { getProps: l = () => ({}) } = t
    const { base: c } = getContext(ROUTER)
    component_subscribe(e, c, (e) => i(14, (n = e)))
    const h = getContext(LOCATION)
    component_subscribe(e, h, (e) => i(15, (o = e)))
    const u = createEventDispatcher()
    let d, p, g, m
    let v,
      { $$slots: f = {}, $$scope: y } = t
    return (
      (e.$$set = (e) => {
        'to' in e && i(6, (r = e.to)),
          'replace' in e && i(7, (s = e.replace)),
          'state' in e && i(8, (a = e.state)),
          'getProps' in e && i(9, (l = e.getProps)),
          '$$scope' in e && i(10, (y = e.$$scope))
      }),
      (e.$$.update = () => {
        16448 & e.$$.dirty && i(0, (d = '/' === r ? n.uri : resolve(r, n.uri))),
          32769 & e.$$.dirty && i(12, (p = startsWith(o.pathname, d))),
          32769 & e.$$.dirty && i(13, (g = d === o.pathname)),
          8192 & e.$$.dirty && i(2, (v = g ? 'page' : void 0)),
          45569 & e.$$.dirty &&
            i(
              1,
              (m = l({
                location: o,
                href: d,
                isPartiallyCurrent: p,
                isCurrent: g,
              }))
            )
      }),
      [
        d,
        m,
        v,
        c,
        h,
        function (e) {
          if ((u('click', e), shouldNavigate(e))) {
            e.preventDefault()
            const t = o.pathname === d || s
            navigate(d, { state: a, replace: t })
          }
        },
        r,
        s,
        a,
        l,
        y,
        f,
      ]
    )
  }
  class Link extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$2, create_fragment$2, safe_not_equal, {
          to: 6,
          replace: 7,
          state: 8,
          getProps: 9,
        })
    }
  }
  function create_else_block$1(e) {
    let t
    return {
      c() {
        ;(t = element('div')), attr(t, 'class', 'line-label svelte-1jm5ity')
      },
      m(e, i) {
        insert(e, t, i)
      },
      p: noop,
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_if_block$1(e) {
    let t, i
    return {
      c() {
        ;(t = element('label')),
          (i = text(e[1])),
          attr(t, 'class', 'label line-label svelte-1jm5ity'),
          attr(t, 'for', e[0])
      },
      m(e, n) {
        insert(e, t, n), append(t, i)
      },
      p(e, n) {
        2 & n && set_data(i, e[1]), 1 & n && attr(t, 'for', e[0])
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_fragment$3(e) {
    let t, i, n, o, r, s, a
    function l(e, t) {
      return e[1] ? create_if_block$1 : create_else_block$1
    }
    let c = l(e),
      h = c(e)
    const u = e[4].default,
      d = create_slot(u, e, e[3], null)
    return {
      c() {
        ;(t = element('div')),
          (i = element('div')),
          h.c(),
          (n = space()),
          (o = element('div')),
          (r = element('div')),
          (s = element('div')),
          d && d.c(),
          attr(
            i,
            'class',
            'field-label is-normal label-wrapper svelte-1jm5ity'
          ),
          attr(s, 'class', 'control'),
          attr(r, 'class', 'field'),
          attr(o, 'class', 'field-body'),
          attr(t, 'class', 'field is-horizontal svelte-1jm5ity'),
          toggle_class(t, 'offset', e[2])
      },
      m(e, l) {
        insert(e, t, l),
          append(t, i),
          h.m(i, null),
          append(t, n),
          append(t, o),
          append(o, r),
          append(r, s),
          d && d.m(s, null),
          (a = !0)
      },
      p(e, [n]) {
        c === (c = l(e)) && h
          ? h.p(e, n)
          : (h.d(1), (h = c(e)), h && (h.c(), h.m(i, null))),
          d && d.p && 8 & n && update_slot(d, u, e, e[3], n, null, null),
          4 & n && toggle_class(t, 'offset', e[2])
      },
      i(e) {
        a || (transition_in(d, e), (a = !0))
      },
      o(e) {
        transition_out(d, e), (a = !1)
      },
      d(e) {
        e && detach(t), h.d(), d && d.d(e)
      },
    }
  }
  function instance$3(e, t, i) {
    let { id: n = '' } = t,
      { label: o = '' } = t,
      { offset: r = !1 } = t,
      { $$slots: s = {}, $$scope: a } = t
    return (
      (e.$$set = (e) => {
        'id' in e && i(0, (n = e.id)),
          'label' in e && i(1, (o = e.label)),
          'offset' in e && i(2, (r = e.offset)),
          '$$scope' in e && i(3, (a = e.$$scope))
      }),
      [n, o, r, a, s]
    )
  }
  class FormLine extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$3, create_fragment$3, safe_not_equal, {
          id: 0,
          label: 1,
          offset: 2,
        })
    }
  }
  function cubicOut(e) {
    const t = e - 1
    return t * t * t + 1
  }
  function expoInOut(e) {
    return 0 === e || 1 === e
      ? e
      : e < 0.5
      ? 0.5 * Math.pow(2, 20 * e - 10)
      : -0.5 * Math.pow(2, 10 - 20 * e) + 1
  }
  function quintOut(e) {
    return --e * e * e * e * e + 1
  }
  function growAndFade(
    e,
    { delay: t = 0, duration: i = 250, easing: n = expoInOut }
  ) {
    const o = +getComputedStyle(e).opacity || 1,
      r = e.offsetHeight
    return {
      delay: t,
      duration: i,
      easing: n,
      css: (e) => `\n      opacity: ${e * o};\n      height: ${e * r}px\n    `,
    }
  }
  function create_fragment$4(e) {
    let t, i, n, o, r
    return {
      c() {
        ;(t = element('div')),
          (i = element('em')),
          (n = text(e[0])),
          attr(i, 'class', 'svelte-mluf79'),
          toggle_class(i, 'error', e[1])
      },
      m(e, o) {
        insert(e, t, o), append(t, i), append(i, n), (r = !0)
      },
      p(e, [t]) {
        ;(!r || 1 & t) && set_data(n, e[0]),
          2 & t && toggle_class(i, 'error', e[1])
      },
      i(e) {
        r ||
          (add_render_callback(() => {
            o || (o = create_bidirectional_transition(t, growAndFade, {}, !0)),
              o.run(1)
          }),
          (r = !0))
      },
      o(e) {
        o || (o = create_bidirectional_transition(t, growAndFade, {}, !1)),
          o.run(0),
          (r = !1)
      },
      d(e) {
        e && detach(t), e && o && o.end()
      },
    }
  }
  function instance$4(e, t, i) {
    let { text: n = '' } = t,
      { error: o = !1 } = t
    return (
      (e.$$set = (e) => {
        'text' in e && i(0, (n = e.text)), 'error' in e && i(1, (o = e.error))
      }),
      [n, o]
    )
  }
  class Message extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$4, create_fragment$4, safe_not_equal, {
          text: 0,
          error: 1,
        })
    }
  }
  function create_default_slot_2(e) {
    let t, i, n
    return {
      c() {
        ;(t = element('input')),
          attr(t, 'id', 'cex-file'),
          attr(t, 'type', 'file'),
          attr(t, 'accept', '.cex'),
          attr(t, 'class', 'input-file svelte-edj6yj')
      },
      m(o, r) {
        insert(o, t, r),
          e[10](t),
          i || ((n = listen(t, 'change', e[9])), (i = !0))
      },
      p: noop,
      d(o) {
        o && detach(t), e[10](null), (i = !1), n()
      },
    }
  }
  function create_default_slot_1(e) {
    let t, i
    return (
      (t = new Message({
        props: {
          text:
            "Processing CEX data may take up to several minutes. Please\r\n              don't refresh the page while ingestion is in progress.",
        },
      })),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, n) {
          mount_component(t, e, n), (i = !0)
        },
        p: noop,
        i(e) {
          i || (transition_in(t.$$.fragment, e), (i = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (i = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_default_slot(e) {
    let t, i, n, o, r
    return {
      c() {
        ;(t = element('button')),
          (i = text('Ingest')),
          attr(t, 'class', 'button is-success'),
          attr(t, 'type', 'submit'),
          (t.disabled = n = !e[3] || e[4]),
          toggle_class(t, 'is-loading', e[4])
      },
      m(n, s) {
        insert(n, t, s),
          append(t, i),
          o || ((r = listen(t, 'click', e[8])), (o = !0))
      },
      p(e, i) {
        24 & i && n !== (n = !e[3] || e[4]) && (t.disabled = n),
          16 & i && toggle_class(t, 'is-loading', e[4])
      },
      d(e) {
        e && detach(t), (o = !1), r()
      },
    }
  }
  function create_else_block_1(e) {
    let t
    return {
      c() {
        t = text('Ingestion Successful')
      },
      m(e, i) {
        insert(e, t, i)
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_if_block_1$1(e) {
    let t
    return {
      c() {
        t = text('Error')
      },
      m(e, i) {
        insert(e, t, i)
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_else_block$2(e) {
    let t
    return {
      c() {
        ;(t = element('p')),
          (t.textContent = 'The CEX data has been ingested successfully.')
      },
      m(e, i) {
        insert(e, t, i)
      },
      p: noop,
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_if_block$2(e) {
    let t, i
    return {
      c() {
        ;(t = element('p')), (i = text(e[6]))
      },
      m(e, n) {
        insert(e, t, n), append(t, i)
      },
      p(e, t) {
        64 & t && set_data(i, e[6])
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_fragment$5(e) {
    let t,
      i,
      n,
      o,
      r,
      s,
      a,
      l,
      c,
      h,
      u,
      d,
      p,
      g,
      m,
      v,
      f,
      y,
      w,
      T,
      x,
      _,
      S,
      E,
      P,
      b,
      R,
      C,
      k,
      O,
      I
    function D(e, t) {
      return null !== e[6] ? create_if_block_1$1 : create_else_block_1
    }
    ;(l = new FormLine({
      props: {
        id: 'cex-file',
        label: 'CEX File',
        $$slots: { default: [create_default_slot_2] },
        $$scope: { ctx: e },
      },
    })),
      (h = new FormLine({
        props: {
          offset: !0,
          $$slots: { default: [create_default_slot_1] },
          $$scope: { ctx: e },
        },
      })),
      (d = new FormLine({
        props: {
          $$slots: { default: [create_default_slot] },
          $$scope: { ctx: e },
        },
      }))
    let B = D(e),
      L = B(e)
    function H(e, t) {
      return null !== e[6] ? create_if_block$2 : create_else_block$2
    }
    let z = H(e),
      M = z(e)
    return {
      c() {
        ;(t = element('div')),
          (i = element('section')),
          (n = element('div')),
          (o = element('div')),
          (r = element('p')),
          (r.textContent =
            'Ingest references created previously to set up a project on Brucheion.\r\n          Please select the respective CEX file below and submit the file to\r\n          start the ingestion process.'),
          (s = space()),
          (a = element('form')),
          create_component(l.$$.fragment),
          (c = space()),
          create_component(h.$$.fragment),
          (u = space()),
          create_component(d.$$.fragment),
          (p = space()),
          (g = element('div')),
          (m = element('div')),
          (v = space()),
          (f = element('div')),
          (y = element('header')),
          (w = element('p')),
          L.c(),
          (T = space()),
          (x = element('button')),
          (_ = space()),
          (S = element('section')),
          M.c(),
          (E = space()),
          (P = element('footer')),
          (b = element('button')),
          (b.textContent = 'Dismiss'),
          (R = space()),
          (C = element('button')),
          attr(a, 'class', 'form svelte-edj6yj'),
          attr(m, 'class', 'modal-background'),
          attr(w, 'class', 'modal-card-title'),
          attr(x, 'class', 'delete'),
          attr(x, 'aria-label', 'close'),
          attr(y, 'class', 'modal-card-head'),
          attr(S, 'class', 'modal-card-body'),
          attr(b, 'class', 'button'),
          attr(P, 'class', 'modal-card-foot'),
          attr(C, 'class', 'modal-close is-large'),
          attr(C, 'aria-label', 'close'),
          attr(f, 'class', 'modal-card'),
          attr(g, 'class', 'modal'),
          toggle_class(g, 'is-active', e[5]),
          attr(o, 'class', 'column form-column svelte-edj6yj'),
          attr(n, 'class', 'columns'),
          attr(t, 'class', 'container')
      },
      m(D, B) {
        insert(D, t, B),
          append(t, i),
          append(i, n),
          append(n, o),
          append(o, r),
          append(o, s),
          append(o, a),
          mount_component(l, a, null),
          append(a, c),
          mount_component(h, a, null),
          append(a, u),
          mount_component(d, a, null),
          e[11](a),
          append(o, p),
          append(o, g),
          append(g, m),
          append(g, v),
          append(g, f),
          append(f, y),
          append(y, w),
          L.m(w, null),
          append(y, T),
          append(y, x),
          append(f, _),
          append(f, S),
          M.m(S, null),
          append(f, E),
          append(f, P),
          append(P, b),
          append(f, R),
          append(f, C),
          (k = !0),
          O ||
            ((I = [
              listen(a, 'submit', e[8]),
              listen(m, 'click', e[7]),
              listen(x, 'click', e[7]),
              listen(b, 'click', e[7]),
              listen(C, 'click', e[7]),
            ]),
            (O = !0))
      },
      p(e, [t]) {
        const i = {}
        16389 & t && (i.$$scope = { dirty: t, ctx: e }), l.$set(i)
        const n = {}
        16384 & t && (n.$$scope = { dirty: t, ctx: e }), h.$set(n)
        const o = {}
        16408 & t && (o.$$scope = { dirty: t, ctx: e }),
          d.$set(o),
          B !== (B = D(e)) && (L.d(1), (L = B(e)), L && (L.c(), L.m(w, null))),
          z === (z = H(e)) && M
            ? M.p(e, t)
            : (M.d(1), (M = z(e)), M && (M.c(), M.m(S, null))),
          32 & t && toggle_class(g, 'is-active', e[5])
      },
      i(e) {
        k ||
          (transition_in(l.$$.fragment, e),
          transition_in(h.$$.fragment, e),
          transition_in(d.$$.fragment, e),
          (k = !0))
      },
      o(e) {
        transition_out(l.$$.fragment, e),
          transition_out(h.$$.fragment, e),
          transition_out(d.$$.fragment, e),
          (k = !1)
      },
      d(i) {
        i && detach(t),
          destroy_component(l),
          destroy_component(h),
          destroy_component(d),
          e[11](null),
          L.d(),
          M.d(),
          (O = !1),
          run_all(I)
      },
    }
  }
  function instance$5(e, t, i) {
    let n,
      o,
      r = '',
      s = !1,
      a = !1,
      l = !1,
      c = null
    const h = {
      bad_file_ext:
        'The submitted file did not have the corresponding .cex file extension.',
      bad_file_body: 'The submitted file could not be read.',
      file_not_found: 'The submitted file could not be read.',
      bad_cex_data:
        'The CEX data contained erroneous data and could not be processed.',
      unknown:
        'An unknown error occurred. This is not necessarily due to the uploaded CEX data. Please try again and log in again if necessary.',
    }
    function u() {
      i(5, (l = !0))
    }
    return (
      (e.$$.update = () => {
        4 & e.$$.dirty && i(3, (s = !!r))
      }),
      [
        n,
        o,
        r,
        s,
        a,
        l,
        c,
        function () {
          i(5, (l = !1)), i(6, (c = null))
        },
        async function (e) {
          if ((e.preventDefault(), n.files.length < 1)) return
          const t = n.files[0],
            r = new FormData()
          let s
          r.append('file', t), i(4, (a = !0))
          try {
            s = await fetch('/api/v1/cexupload', {
              method: 'POST',
              body: r,
              redirect: 'error',
              credentials: 'same-origin',
            })
          } catch (e) {
            return i(4, (a = !1)), i(6, (c = h.unknown)), void u()
          }
          if ((i(4, (a = !1)), 200 !== s.status))
            try {
              const e = await s.json()
              void 0 !== h[e.message]
                ? i(6, (c = h[e.message]))
                : i(6, (c = h.unknown))
            } catch (e) {
              i(6, (c = h.unknown))
            }
          else o.reset()
          u()
        },
        function () {
          ;(r = this.value), i(2, r)
        },
        function (e) {
          binding_callbacks[e ? 'unshift' : 'push'](() => {
            ;(n = e), i(0, n)
          })
        },
        function (e) {
          binding_callbacks[e ? 'unshift' : 'push'](() => {
            ;(o = e), i(1, o)
          })
        },
      ]
    )
  }
  class IngestCex extends SvelteComponent {
    constructor(e) {
      super(), init(this, e, instance$5, create_fragment$5, safe_not_equal, {})
    }
  }
  var has = Object.prototype.hasOwnProperty,
    isArray = Array.isArray,
    hexTable = (function () {
      for (var e = [], t = 0; t < 256; ++t)
        e.push('%' + ((t < 16 ? '0' : '') + t.toString(16)).toUpperCase())
      return e
    })(),
    compactQueue = function (e) {
      for (; e.length > 1; ) {
        var t = e.pop(),
          i = t.obj[t.prop]
        if (isArray(i)) {
          for (var n = [], o = 0; o < i.length; ++o)
            void 0 !== i[o] && n.push(i[o])
          t.obj[t.prop] = n
        }
      }
    },
    arrayToObject = function (e, t) {
      for (
        var i = t && t.plainObjects ? Object.create(null) : {}, n = 0;
        n < e.length;
        ++n
      )
        void 0 !== e[n] && (i[n] = e[n])
      return i
    },
    merge = function e(t, i, n) {
      if (!i) return t
      if ('object' != typeof i) {
        if (isArray(t)) t.push(i)
        else {
          if (!t || 'object' != typeof t) return [t, i]
          ;((n && (n.plainObjects || n.allowPrototypes)) ||
            !has.call(Object.prototype, i)) &&
            (t[i] = !0)
        }
        return t
      }
      if (!t || 'object' != typeof t) return [t].concat(i)
      var o = t
      return (
        isArray(t) && !isArray(i) && (o = arrayToObject(t, n)),
        isArray(t) && isArray(i)
          ? (i.forEach(function (i, o) {
              if (has.call(t, o)) {
                var r = t[o]
                r && 'object' == typeof r && i && 'object' == typeof i
                  ? (t[o] = e(r, i, n))
                  : t.push(i)
              } else t[o] = i
            }),
            t)
          : Object.keys(i).reduce(function (t, o) {
              var r = i[o]
              return has.call(t, o) ? (t[o] = e(t[o], r, n)) : (t[o] = r), t
            }, o)
      )
    },
    assign$1 = function (e, t) {
      return Object.keys(t).reduce(function (e, i) {
        return (e[i] = t[i]), e
      }, e)
    },
    decode = function (e, t, i) {
      var n = e.replace(/\+/g, ' ')
      if ('iso-8859-1' === i) return n.replace(/%[0-9a-f]{2}/gi, unescape)
      try {
        return decodeURIComponent(n)
      } catch (e) {
        return n
      }
    },
    encode = function (e, t, i) {
      if (0 === e.length) return e
      var n = e
      if (
        ('symbol' == typeof e
          ? (n = Symbol.prototype.toString.call(e))
          : 'string' != typeof e && (n = String(e)),
        'iso-8859-1' === i)
      )
        return escape(n).replace(/%u[0-9a-f]{4}/gi, function (e) {
          return '%26%23' + parseInt(e.slice(2), 16) + '%3B'
        })
      for (var o = '', r = 0; r < n.length; ++r) {
        var s = n.charCodeAt(r)
        45 === s ||
        46 === s ||
        95 === s ||
        126 === s ||
        (s >= 48 && s <= 57) ||
        (s >= 65 && s <= 90) ||
        (s >= 97 && s <= 122)
          ? (o += n.charAt(r))
          : s < 128
          ? (o += hexTable[s])
          : s < 2048
          ? (o += hexTable[192 | (s >> 6)] + hexTable[128 | (63 & s)])
          : s < 55296 || s >= 57344
          ? (o +=
              hexTable[224 | (s >> 12)] +
              hexTable[128 | ((s >> 6) & 63)] +
              hexTable[128 | (63 & s)])
          : ((r += 1),
            (s = 65536 + (((1023 & s) << 10) | (1023 & n.charCodeAt(r)))),
            (o +=
              hexTable[240 | (s >> 18)] +
              hexTable[128 | ((s >> 12) & 63)] +
              hexTable[128 | ((s >> 6) & 63)] +
              hexTable[128 | (63 & s)]))
      }
      return o
    },
    compact = function (e) {
      for (
        var t = [{ obj: { o: e }, prop: 'o' }], i = [], n = 0;
        n < t.length;
        ++n
      )
        for (
          var o = t[n], r = o.obj[o.prop], s = Object.keys(r), a = 0;
          a < s.length;
          ++a
        ) {
          var l = s[a],
            c = r[l]
          'object' == typeof c &&
            null !== c &&
            -1 === i.indexOf(c) &&
            (t.push({ obj: r, prop: l }), i.push(c))
        }
      return compactQueue(t), e
    },
    isRegExp = function (e) {
      return '[object RegExp]' === Object.prototype.toString.call(e)
    },
    isBuffer = function (e) {
      return (
        !(!e || 'object' != typeof e) &&
        !!(e.constructor && e.constructor.isBuffer && e.constructor.isBuffer(e))
      )
    },
    combine = function (e, t) {
      return [].concat(e, t)
    },
    maybeMap = function (e, t) {
      if (isArray(e)) {
        for (var i = [], n = 0; n < e.length; n += 1) i.push(t(e[n]))
        return i
      }
      return t(e)
    },
    utils = {
      arrayToObject: arrayToObject,
      assign: assign$1,
      combine: combine,
      compact: compact,
      decode: decode,
      encode: encode,
      isBuffer: isBuffer,
      isRegExp: isRegExp,
      maybeMap: maybeMap,
      merge: merge,
    },
    replace = String.prototype.replace,
    percentTwenties = /%20/g,
    Format = { RFC1738: 'RFC1738', RFC3986: 'RFC3986' },
    formats = utils.assign(
      {
        default: Format.RFC3986,
        formatters: {
          RFC1738: function (e) {
            return replace.call(e, percentTwenties, '+')
          },
          RFC3986: function (e) {
            return String(e)
          },
        },
      },
      Format
    ),
    has$1 = Object.prototype.hasOwnProperty,
    arrayPrefixGenerators = {
      brackets: function (e) {
        return e + '[]'
      },
      comma: 'comma',
      indices: function (e, t) {
        return e + '[' + t + ']'
      },
      repeat: function (e) {
        return e
      },
    },
    isArray$1 = Array.isArray,
    push = Array.prototype.push,
    pushToArray = function (e, t) {
      push.apply(e, isArray$1(t) ? t : [t])
    },
    toISO = Date.prototype.toISOString,
    defaultFormat = formats.default,
    defaults = {
      addQueryPrefix: !1,
      allowDots: !1,
      charset: 'utf-8',
      charsetSentinel: !1,
      delimiter: '&',
      encode: !0,
      encoder: utils.encode,
      encodeValuesOnly: !1,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      indices: !1,
      serializeDate: function (e) {
        return toISO.call(e)
      },
      skipNulls: !1,
      strictNullHandling: !1,
    },
    isNonNullishPrimitive = function (e) {
      return (
        'string' == typeof e ||
        'number' == typeof e ||
        'boolean' == typeof e ||
        'symbol' == typeof e ||
        'bigint' == typeof e
      )
    },
    stringify = function e(t, i, n, o, r, s, a, l, c, h, u, d, p) {
      var g = t
      if (
        ('function' == typeof a
          ? (g = a(i, g))
          : g instanceof Date
          ? (g = h(g))
          : 'comma' === n &&
            isArray$1(g) &&
            (g = utils
              .maybeMap(g, function (e) {
                return e instanceof Date ? h(e) : e
              })
              .join(',')),
        null === g)
      ) {
        if (o) return s && !d ? s(i, defaults.encoder, p, 'key') : i
        g = ''
      }
      if (isNonNullishPrimitive(g) || utils.isBuffer(g))
        return s
          ? [
              u(d ? i : s(i, defaults.encoder, p, 'key')) +
                '=' +
                u(s(g, defaults.encoder, p, 'value')),
            ]
          : [u(i) + '=' + u(String(g))]
      var m,
        v = []
      if (void 0 === g) return v
      if (isArray$1(a)) m = a
      else {
        var f = Object.keys(g)
        m = l ? f.sort(l) : f
      }
      for (var y = 0; y < m.length; ++y) {
        var w = m[y],
          T = g[w]
        if (!r || null !== T) {
          var x = isArray$1(g)
            ? 'function' == typeof n
              ? n(i, w)
              : i
            : i + (c ? '.' + w : '[' + w + ']')
          pushToArray(v, e(T, x, n, o, r, s, a, l, c, h, u, d, p))
        }
      }
      return v
    },
    normalizeStringifyOptions = function (e) {
      if (!e) return defaults
      if (
        null !== e.encoder &&
        void 0 !== e.encoder &&
        'function' != typeof e.encoder
      )
        throw new TypeError('Encoder has to be a function.')
      var t = e.charset || defaults.charset
      if (
        void 0 !== e.charset &&
        'utf-8' !== e.charset &&
        'iso-8859-1' !== e.charset
      )
        throw new TypeError(
          'The charset option must be either utf-8, iso-8859-1, or undefined'
        )
      var i = formats.default
      if (void 0 !== e.format) {
        if (!has$1.call(formats.formatters, e.format))
          throw new TypeError('Unknown format option provided.')
        i = e.format
      }
      var n = formats.formatters[i],
        o = defaults.filter
      return (
        ('function' == typeof e.filter || isArray$1(e.filter)) &&
          (o = e.filter),
        {
          addQueryPrefix:
            'boolean' == typeof e.addQueryPrefix
              ? e.addQueryPrefix
              : defaults.addQueryPrefix,
          allowDots:
            void 0 === e.allowDots ? defaults.allowDots : !!e.allowDots,
          charset: t,
          charsetSentinel:
            'boolean' == typeof e.charsetSentinel
              ? e.charsetSentinel
              : defaults.charsetSentinel,
          delimiter: void 0 === e.delimiter ? defaults.delimiter : e.delimiter,
          encode: 'boolean' == typeof e.encode ? e.encode : defaults.encode,
          encoder:
            'function' == typeof e.encoder ? e.encoder : defaults.encoder,
          encodeValuesOnly:
            'boolean' == typeof e.encodeValuesOnly
              ? e.encodeValuesOnly
              : defaults.encodeValuesOnly,
          filter: o,
          formatter: n,
          serializeDate:
            'function' == typeof e.serializeDate
              ? e.serializeDate
              : defaults.serializeDate,
          skipNulls:
            'boolean' == typeof e.skipNulls ? e.skipNulls : defaults.skipNulls,
          sort: 'function' == typeof e.sort ? e.sort : null,
          strictNullHandling:
            'boolean' == typeof e.strictNullHandling
              ? e.strictNullHandling
              : defaults.strictNullHandling,
        }
      )
    },
    stringify_1 = function (e, t) {
      var i,
        n = e,
        o = normalizeStringifyOptions(t)
      'function' == typeof o.filter
        ? (n = (0, o.filter)('', n))
        : isArray$1(o.filter) && (i = o.filter)
      var r,
        s = []
      if ('object' != typeof n || null === n) return ''
      r =
        t && t.arrayFormat in arrayPrefixGenerators
          ? t.arrayFormat
          : t && 'indices' in t
          ? t.indices
            ? 'indices'
            : 'repeat'
          : 'indices'
      var a = arrayPrefixGenerators[r]
      i || (i = Object.keys(n)), o.sort && i.sort(o.sort)
      for (var l = 0; l < i.length; ++l) {
        var c = i[l]
        ;(o.skipNulls && null === n[c]) ||
          pushToArray(
            s,
            stringify(
              n[c],
              c,
              a,
              o.strictNullHandling,
              o.skipNulls,
              o.encode ? o.encoder : null,
              o.filter,
              o.sort,
              o.allowDots,
              o.serializeDate,
              o.formatter,
              o.encodeValuesOnly,
              o.charset
            )
          )
      }
      var h = s.join(o.delimiter),
        u = !0 === o.addQueryPrefix ? '?' : ''
      return (
        o.charsetSentinel &&
          ('iso-8859-1' === o.charset
            ? (u += 'utf8=%26%2310003%3B&')
            : (u += 'utf8=%E2%9C%93&')),
        h.length > 0 ? u + h : ''
      )
    },
    has$2 = Object.prototype.hasOwnProperty,
    isArray$2 = Array.isArray,
    defaults$1 = {
      allowDots: !1,
      allowPrototypes: !1,
      arrayLimit: 20,
      charset: 'utf-8',
      charsetSentinel: !1,
      comma: !1,
      decoder: utils.decode,
      delimiter: '&',
      depth: 5,
      ignoreQueryPrefix: !1,
      interpretNumericEntities: !1,
      parameterLimit: 1e3,
      parseArrays: !0,
      plainObjects: !1,
      strictNullHandling: !1,
    },
    interpretNumericEntities = function (e) {
      return e.replace(/&#(\d+);/g, function (e, t) {
        return String.fromCharCode(parseInt(t, 10))
      })
    },
    parseArrayValue = function (e, t) {
      return e && 'string' == typeof e && t.comma && e.indexOf(',') > -1
        ? e.split(',')
        : e
    },
    isoSentinel = 'utf8=%26%2310003%3B',
    charsetSentinel = 'utf8=%E2%9C%93',
    parseValues = function (e, t) {
      var i,
        n = {},
        o = t.ignoreQueryPrefix ? e.replace(/^\?/, '') : e,
        r = t.parameterLimit === 1 / 0 ? void 0 : t.parameterLimit,
        s = o.split(t.delimiter, r),
        a = -1,
        l = t.charset
      if (t.charsetSentinel)
        for (i = 0; i < s.length; ++i)
          0 === s[i].indexOf('utf8=') &&
            (s[i] === charsetSentinel
              ? (l = 'utf-8')
              : s[i] === isoSentinel && (l = 'iso-8859-1'),
            (a = i),
            (i = s.length))
      for (i = 0; i < s.length; ++i)
        if (i !== a) {
          var c,
            h,
            u = s[i],
            d = u.indexOf(']='),
            p = -1 === d ? u.indexOf('=') : d + 1
          ;-1 === p
            ? ((c = t.decoder(u, defaults$1.decoder, l, 'key')),
              (h = t.strictNullHandling ? null : ''))
            : ((c = t.decoder(u.slice(0, p), defaults$1.decoder, l, 'key')),
              (h = utils.maybeMap(parseArrayValue(u.slice(p + 1), t), function (
                e
              ) {
                return t.decoder(e, defaults$1.decoder, l, 'value')
              }))),
            h &&
              t.interpretNumericEntities &&
              'iso-8859-1' === l &&
              (h = interpretNumericEntities(h)),
            u.indexOf('[]=') > -1 && (h = isArray$2(h) ? [h] : h),
            has$2.call(n, c) ? (n[c] = utils.combine(n[c], h)) : (n[c] = h)
        }
      return n
    },
    parseObject = function (e, t, i, n) {
      for (
        var o = n ? t : parseArrayValue(t, i), r = e.length - 1;
        r >= 0;
        --r
      ) {
        var s,
          a = e[r]
        if ('[]' === a && i.parseArrays) s = [].concat(o)
        else {
          s = i.plainObjects ? Object.create(null) : {}
          var l =
              '[' === a.charAt(0) && ']' === a.charAt(a.length - 1)
                ? a.slice(1, -1)
                : a,
            c = parseInt(l, 10)
          i.parseArrays || '' !== l
            ? !isNaN(c) &&
              a !== l &&
              String(c) === l &&
              c >= 0 &&
              i.parseArrays &&
              c <= i.arrayLimit
              ? ((s = [])[c] = o)
              : (s[l] = o)
            : (s = { 0: o })
        }
        o = s
      }
      return o
    },
    parseKeys = function (e, t, i, n) {
      if (e) {
        var o = i.allowDots ? e.replace(/\.([^.[]+)/g, '[$1]') : e,
          r = /(\[[^[\]]*])/g,
          s = i.depth > 0 && /(\[[^[\]]*])/.exec(o),
          a = s ? o.slice(0, s.index) : o,
          l = []
        if (a) {
          if (
            !i.plainObjects &&
            has$2.call(Object.prototype, a) &&
            !i.allowPrototypes
          )
            return
          l.push(a)
        }
        for (
          var c = 0;
          i.depth > 0 && null !== (s = r.exec(o)) && c < i.depth;

        ) {
          if (
            ((c += 1),
            !i.plainObjects &&
              has$2.call(Object.prototype, s[1].slice(1, -1)) &&
              !i.allowPrototypes)
          )
            return
          l.push(s[1])
        }
        return (
          s && l.push('[' + o.slice(s.index) + ']'), parseObject(l, t, i, n)
        )
      }
    },
    normalizeParseOptions = function (e) {
      if (!e) return defaults$1
      if (
        null !== e.decoder &&
        void 0 !== e.decoder &&
        'function' != typeof e.decoder
      )
        throw new TypeError('Decoder has to be a function.')
      if (
        void 0 !== e.charset &&
        'utf-8' !== e.charset &&
        'iso-8859-1' !== e.charset
      )
        throw new TypeError(
          'The charset option must be either utf-8, iso-8859-1, or undefined'
        )
      var t = void 0 === e.charset ? defaults$1.charset : e.charset
      return {
        allowDots:
          void 0 === e.allowDots ? defaults$1.allowDots : !!e.allowDots,
        allowPrototypes:
          'boolean' == typeof e.allowPrototypes
            ? e.allowPrototypes
            : defaults$1.allowPrototypes,
        arrayLimit:
          'number' == typeof e.arrayLimit
            ? e.arrayLimit
            : defaults$1.arrayLimit,
        charset: t,
        charsetSentinel:
          'boolean' == typeof e.charsetSentinel
            ? e.charsetSentinel
            : defaults$1.charsetSentinel,
        comma: 'boolean' == typeof e.comma ? e.comma : defaults$1.comma,
        decoder:
          'function' == typeof e.decoder ? e.decoder : defaults$1.decoder,
        delimiter:
          'string' == typeof e.delimiter || utils.isRegExp(e.delimiter)
            ? e.delimiter
            : defaults$1.delimiter,
        depth:
          'number' == typeof e.depth || !1 === e.depth
            ? +e.depth
            : defaults$1.depth,
        ignoreQueryPrefix: !0 === e.ignoreQueryPrefix,
        interpretNumericEntities:
          'boolean' == typeof e.interpretNumericEntities
            ? e.interpretNumericEntities
            : defaults$1.interpretNumericEntities,
        parameterLimit:
          'number' == typeof e.parameterLimit
            ? e.parameterLimit
            : defaults$1.parameterLimit,
        parseArrays: !1 !== e.parseArrays,
        plainObjects:
          'boolean' == typeof e.plainObjects
            ? e.plainObjects
            : defaults$1.plainObjects,
        strictNullHandling:
          'boolean' == typeof e.strictNullHandling
            ? e.strictNullHandling
            : defaults$1.strictNullHandling,
      }
    },
    parse = function (e, t) {
      var i = normalizeParseOptions(t)
      if ('' === e || null == e)
        return i.plainObjects ? Object.create(null) : {}
      for (
        var n = 'string' == typeof e ? parseValues(e, i) : e,
          o = i.plainObjects ? Object.create(null) : {},
          r = Object.keys(n),
          s = 0;
        s < r.length;
        ++s
      ) {
        var a = r[s],
          l = parseKeys(a, n[a], i, 'string' == typeof e)
        o = utils.merge(o, l, i)
      }
      return utils.compact(o)
    },
    lib = { formats: formats, parse: parse, stringify: stringify_1 },
    lib_3 = lib.stringify,
    commonjsGlobal =
      'undefined' != typeof globalThis
        ? globalThis
        : 'undefined' != typeof window
        ? window
        : 'undefined' != typeof global
        ? global
        : 'undefined' != typeof self
        ? self
        : {}
  function createCommonjsModule(e, t, i) {
    return (
      e(
        (i = {
          path: t,
          exports: {},
          require: function (e, t) {
            return commonjsRequire(e, null == t ? i.path : t)
          },
        }),
        i.exports
      ),
      i.exports
    )
  }
  function commonjsRequire() {
    throw new Error(
      'Dynamic requires are not currently supported by @rollup/plugin-commonjs'
    )
  }
  var openseadragon = createCommonjsModule(function (module) {
      //! openseadragon 2.4.2
      //! Built on 2020-03-05
      //! Git commit: v2.4.2-0-c450749
      //! http://openseadragon.github.io
      //! License: http://openseadragon.github.io/license/
      function OpenSeadragon(e) {
        return new OpenSeadragon.Viewer(e)
      }
      var root, factory, $, fullScreenApi
      !(function (e) {
        e.version = {
          versionStr: '2.4.2',
          major: parseInt('2', 10),
          minor: parseInt('4', 10),
          revision: parseInt('2', 10),
        }
        var t,
          i = {
            '[object Boolean]': 'boolean',
            '[object Number]': 'number',
            '[object String]': 'string',
            '[object Function]': 'function',
            '[object Array]': 'array',
            '[object Date]': 'date',
            '[object RegExp]': 'regexp',
            '[object Object]': 'object',
          },
          n = Object.prototype.toString,
          o = Object.prototype.hasOwnProperty
        ;(e.isFunction = function (t) {
          return 'function' === e.type(t)
        }),
          (e.isArray =
            Array.isArray ||
            function (t) {
              return 'array' === e.type(t)
            }),
          (e.isWindow = function (e) {
            return e && 'object' == typeof e && 'setInterval' in e
          }),
          (e.type = function (e) {
            return null == e ? String(e) : i[n.call(e)] || 'object'
          }),
          (e.isPlainObject = function (t) {
            if (
              !t ||
              'object' !== OpenSeadragon.type(t) ||
              t.nodeType ||
              e.isWindow(t)
            )
              return !1
            if (
              t.constructor &&
              !o.call(t, 'constructor') &&
              !o.call(t.constructor.prototype, 'isPrototypeOf')
            )
              return !1
            var i
            for (var n in t) i = n
            return void 0 === i || o.call(t, i)
          }),
          (e.isEmptyObject = function (e) {
            for (var t in e) return !1
            return !0
          }),
          (e.freezeObject = function (t) {
            return (
              Object.freeze
                ? (e.freezeObject = Object.freeze)
                : (e.freezeObject = function (e) {
                    return e
                  }),
              e.freezeObject(t)
            )
          }),
          (e.supportsCanvas =
            ((t = document.createElement('canvas')),
            !(!e.isFunction(t.getContext) || !t.getContext('2d')))),
          (e.isCanvasTainted = function (e) {
            var t = !1
            try {
              e.getContext('2d').getImageData(0, 0, 1, 1)
            } catch (e) {
              t = !0
            }
            return t
          }),
          (e.pixelDensityRatio = (function () {
            if (e.supportsCanvas) {
              var t = document.createElement('canvas').getContext('2d'),
                i = window.devicePixelRatio || 1,
                n =
                  t.webkitBackingStorePixelRatio ||
                  t.mozBackingStorePixelRatio ||
                  t.msBackingStorePixelRatio ||
                  t.oBackingStorePixelRatio ||
                  t.backingStorePixelRatio ||
                  1
              return Math.max(i, 1) / n
            }
            return 1
          })())
      })(OpenSeadragon),
        (function ($) {
          $.extend = function () {
            var e,
              t,
              i,
              n,
              o,
              r,
              s = arguments[0] || {},
              a = arguments.length,
              l = !1,
              c = 1
            for (
              'boolean' == typeof s &&
                ((l = s), (s = arguments[1] || {}), (c = 2)),
                'object' == typeof s || OpenSeadragon.isFunction(s) || (s = {}),
                a === c && ((s = this), --c);
              c < a;
              c++
            )
              if (null !== (e = arguments[c]) || void 0 !== e)
                for (t in e)
                  (i = s[t]),
                    s !== (n = e[t]) &&
                      (l &&
                      n &&
                      (OpenSeadragon.isPlainObject(n) ||
                        (o = OpenSeadragon.isArray(n)))
                        ? (o
                            ? ((o = !1),
                              (r = i && OpenSeadragon.isArray(i) ? i : []))
                            : (r =
                                i && OpenSeadragon.isPlainObject(i) ? i : {}),
                          (s[t] = OpenSeadragon.extend(l, r, n)))
                        : void 0 !== n && (s[t] = n))
            return s
          }
          var isIOSDevice = function () {
            if ('object' != typeof navigator) return !1
            var e = navigator.userAgent
            return (
              'string' == typeof e &&
              (-1 !== e.indexOf('iPhone') ||
                -1 !== e.indexOf('iPad') ||
                -1 !== e.indexOf('iPod'))
            )
          }
          $.extend($, {
            DEFAULT_SETTINGS: {
              xmlPath: null,
              tileSources: null,
              tileHost: null,
              initialPage: 0,
              crossOriginPolicy: !1,
              ajaxWithCredentials: !1,
              loadTilesWithAjax: !1,
              ajaxHeaders: {},
              panHorizontal: !0,
              panVertical: !0,
              constrainDuringPan: !1,
              wrapHorizontal: !1,
              wrapVertical: !1,
              visibilityRatio: 0.5,
              minPixelRatio: 0.5,
              defaultZoomLevel: 0,
              minZoomLevel: null,
              maxZoomLevel: null,
              homeFillsViewer: !1,
              clickTimeThreshold: 300,
              clickDistThreshold: 5,
              dblClickTimeThreshold: 300,
              dblClickDistThreshold: 20,
              springStiffness: 6.5,
              animationTime: 1.2,
              gestureSettingsMouse: {
                scrollToZoom: !0,
                clickToZoom: !0,
                dblClickToZoom: !1,
                pinchToZoom: !1,
                zoomToRefPoint: !0,
                flickEnabled: !1,
                flickMinSpeed: 120,
                flickMomentum: 0.25,
                pinchRotate: !1,
              },
              gestureSettingsTouch: {
                scrollToZoom: !1,
                clickToZoom: !1,
                dblClickToZoom: !0,
                pinchToZoom: !0,
                zoomToRefPoint: !0,
                flickEnabled: !0,
                flickMinSpeed: 120,
                flickMomentum: 0.25,
                pinchRotate: !1,
              },
              gestureSettingsPen: {
                scrollToZoom: !1,
                clickToZoom: !0,
                dblClickToZoom: !1,
                pinchToZoom: !1,
                zoomToRefPoint: !0,
                flickEnabled: !1,
                flickMinSpeed: 120,
                flickMomentum: 0.25,
                pinchRotate: !1,
              },
              gestureSettingsUnknown: {
                scrollToZoom: !1,
                clickToZoom: !1,
                dblClickToZoom: !0,
                pinchToZoom: !0,
                zoomToRefPoint: !0,
                flickEnabled: !0,
                flickMinSpeed: 120,
                flickMomentum: 0.25,
                pinchRotate: !1,
              },
              zoomPerClick: 2,
              zoomPerScroll: 1.2,
              zoomPerSecond: 1,
              blendTime: 0,
              alwaysBlend: !1,
              autoHideControls: !0,
              immediateRender: !1,
              minZoomImageRatio: 0.9,
              maxZoomPixelRatio: 1.1,
              smoothTileEdgesMinZoom: 1.1,
              iOSDevice: isIOSDevice(),
              pixelsPerWheelLine: 40,
              pixelsPerArrowPress: 40,
              autoResize: !0,
              preserveImageSizeOnResize: !1,
              minScrollDeltaTime: 50,
              rotationIncrement: 90,
              showSequenceControl: !0,
              sequenceControlAnchor: null,
              preserveViewport: !1,
              preserveOverlays: !1,
              navPrevNextWrap: !1,
              showNavigationControl: !0,
              navigationControlAnchor: null,
              showZoomControl: !0,
              showHomeControl: !0,
              showFullPageControl: !0,
              showRotationControl: !1,
              showFlipControl: !1,
              controlsFadeDelay: 2e3,
              controlsFadeLength: 1500,
              mouseNavEnabled: !0,
              showNavigator: !1,
              navigatorId: null,
              navigatorPosition: null,
              navigatorSizeRatio: 0.2,
              navigatorMaintainSizeRatio: !1,
              navigatorTop: null,
              navigatorLeft: null,
              navigatorHeight: null,
              navigatorWidth: null,
              navigatorAutoResize: !0,
              navigatorAutoFade: !0,
              navigatorRotate: !0,
              navigatorBackground: '#000',
              navigatorOpacity: 0.8,
              navigatorBorderColor: '#555',
              navigatorDisplayRegionColor: '#900',
              degrees: 0,
              flipped: !1,
              opacity: 1,
              preload: !1,
              compositeOperation: null,
              imageSmoothingEnabled: !0,
              placeholderFillStyle: null,
              showReferenceStrip: !1,
              referenceStripScroll: 'horizontal',
              referenceStripElement: null,
              referenceStripHeight: null,
              referenceStripWidth: null,
              referenceStripPosition: 'BOTTOM_LEFT',
              referenceStripSizeRatio: 0.2,
              collectionRows: 3,
              collectionColumns: 0,
              collectionLayout: 'horizontal',
              collectionMode: !1,
              collectionTileSize: 800,
              collectionTileMargin: 80,
              imageLoaderLimit: 0,
              maxImageCacheCount: 200,
              timeout: 3e4,
              useCanvas: !0,
              prefixUrl: '/images/',
              navImages: {
                zoomIn: {
                  REST: 'zoomin_rest.png',
                  GROUP: 'zoomin_grouphover.png',
                  HOVER: 'zoomin_hover.png',
                  DOWN: 'zoomin_pressed.png',
                },
                zoomOut: {
                  REST: 'zoomout_rest.png',
                  GROUP: 'zoomout_grouphover.png',
                  HOVER: 'zoomout_hover.png',
                  DOWN: 'zoomout_pressed.png',
                },
                home: {
                  REST: 'home_rest.png',
                  GROUP: 'home_grouphover.png',
                  HOVER: 'home_hover.png',
                  DOWN: 'home_pressed.png',
                },
                fullpage: {
                  REST: 'fullpage_rest.png',
                  GROUP: 'fullpage_grouphover.png',
                  HOVER: 'fullpage_hover.png',
                  DOWN: 'fullpage_pressed.png',
                },
                rotateleft: {
                  REST: 'rotateleft_rest.png',
                  GROUP: 'rotateleft_grouphover.png',
                  HOVER: 'rotateleft_hover.png',
                  DOWN: 'rotateleft_pressed.png',
                },
                rotateright: {
                  REST: 'rotateright_rest.png',
                  GROUP: 'rotateright_grouphover.png',
                  HOVER: 'rotateright_hover.png',
                  DOWN: 'rotateright_pressed.png',
                },
                flip: {
                  REST: 'flip_rest.png',
                  GROUP: 'flip_grouphover.png',
                  HOVER: 'flip_hover.png',
                  DOWN: 'flip_pressed.png',
                },
                previous: {
                  REST: 'previous_rest.png',
                  GROUP: 'previous_grouphover.png',
                  HOVER: 'previous_hover.png',
                  DOWN: 'previous_pressed.png',
                },
                next: {
                  REST: 'next_rest.png',
                  GROUP: 'next_grouphover.png',
                  HOVER: 'next_hover.png',
                  DOWN: 'next_pressed.png',
                },
              },
              debugMode: !1,
              debugGridColor: [
                '#437AB2',
                '#1B9E77',
                '#D95F02',
                '#7570B3',
                '#E7298A',
                '#66A61E',
                '#E6AB02',
                '#A6761D',
                '#666666',
              ],
            },
            SIGNAL: '----seadragon----',
            delegate: function (e, t) {
              return function () {
                var i = arguments
                return void 0 === i && (i = []), t.apply(e, i)
              }
            },
            BROWSERS: {
              UNKNOWN: 0,
              IE: 1,
              FIREFOX: 2,
              SAFARI: 3,
              CHROME: 4,
              OPERA: 5,
            },
            getElement: function (e) {
              return 'string' == typeof e && (e = document.getElementById(e)), e
            },
            getElementPosition: function (e) {
              var t,
                i,
                n = new $.Point()
              for (
                i = getOffsetParent(
                  (e = $.getElement(e)),
                  (t = 'fixed' == $.getElementStyle(e).position)
                );
                i;

              )
                (n.x += e.offsetLeft),
                  (n.y += e.offsetTop),
                  t && (n = n.plus($.getPageScroll())),
                  (i = getOffsetParent(
                    (e = i),
                    (t = 'fixed' == $.getElementStyle(e).position)
                  ))
              return n
            },
            getElementOffset: function (e) {
              var t,
                i,
                n = (e = $.getElement(e)) && e.ownerDocument,
                o = { top: 0, left: 0 }
              return n
                ? ((t = n.documentElement),
                  void 0 !== e.getBoundingClientRect &&
                    (o = e.getBoundingClientRect()),
                  (i =
                    n == n.window
                      ? n
                      : 9 === n.nodeType && (n.defaultView || n.parentWindow)),
                  new $.Point(
                    o.left +
                      (i.pageXOffset || t.scrollLeft) -
                      (t.clientLeft || 0),
                    o.top + (i.pageYOffset || t.scrollTop) - (t.clientTop || 0)
                  ))
                : new $.Point()
            },
            getElementSize: function (e) {
              return (
                (e = $.getElement(e)),
                new $.Point(e.clientWidth, e.clientHeight)
              )
            },
            getElementStyle: document.documentElement.currentStyle
              ? function (e) {
                  return (e = $.getElement(e)).currentStyle
                }
              : function (e) {
                  return (e = $.getElement(e)), window.getComputedStyle(e, '')
                },
            getCssPropertyWithVendorPrefix: function (e) {
              var t = {}
              return (
                ($.getCssPropertyWithVendorPrefix = function (e) {
                  if (void 0 !== t[e]) return t[e]
                  var i = document.createElement('div').style,
                    n = null
                  if (void 0 !== i[e]) n = e
                  else
                    for (
                      var o = [
                          'Webkit',
                          'Moz',
                          'MS',
                          'O',
                          'webkit',
                          'moz',
                          'ms',
                          'o',
                        ],
                        r = $.capitalizeFirstLetter(e),
                        s = 0;
                      s < o.length;
                      s++
                    ) {
                      var a = o[s] + r
                      if (void 0 !== i[a]) {
                        n = a
                        break
                      }
                    }
                  return (t[e] = n), n
                }),
                $.getCssPropertyWithVendorPrefix(e)
              )
            },
            capitalizeFirstLetter: function (e) {
              return e.charAt(0).toUpperCase() + e.slice(1)
            },
            positiveModulo: function (e, t) {
              var i = e % t
              return i < 0 && (i += t), i
            },
            pointInElement: function (e, t) {
              e = $.getElement(e)
              var i = $.getElementOffset(e),
                n = $.getElementSize(e)
              return (
                t.x >= i.x && t.x < i.x + n.x && t.y < i.y + n.y && t.y >= i.y
              )
            },
            getEvent: function (e) {
              return (
                ($.getEvent = e
                  ? function (e) {
                      return e
                    }
                  : function () {
                      return window.event
                    }),
                $.getEvent(e)
              )
            },
            getMousePosition: function (e) {
              if ('number' == typeof e.pageX)
                $.getMousePosition = function (e) {
                  var t = new $.Point()
                  return (
                    (e = $.getEvent(e)), (t.x = e.pageX), (t.y = e.pageY), t
                  )
                }
              else {
                if ('number' != typeof e.clientX)
                  throw new Error(
                    'Unknown event mouse position, no known technique.'
                  )
                $.getMousePosition = function (e) {
                  var t = new $.Point()
                  return (
                    (e = $.getEvent(e)),
                    (t.x =
                      e.clientX +
                      document.body.scrollLeft +
                      document.documentElement.scrollLeft),
                    (t.y =
                      e.clientY +
                      document.body.scrollTop +
                      document.documentElement.scrollTop),
                    t
                  )
                }
              }
              return $.getMousePosition(e)
            },
            getPageScroll: function () {
              var e = document.documentElement || {},
                t = document.body || {}
              if ('number' == typeof window.pageXOffset)
                $.getPageScroll = function () {
                  return new $.Point(window.pageXOffset, window.pageYOffset)
                }
              else if (t.scrollLeft || t.scrollTop)
                $.getPageScroll = function () {
                  return new $.Point(
                    document.body.scrollLeft,
                    document.body.scrollTop
                  )
                }
              else {
                if (!e.scrollLeft && !e.scrollTop) return new $.Point(0, 0)
                $.getPageScroll = function () {
                  return new $.Point(
                    document.documentElement.scrollLeft,
                    document.documentElement.scrollTop
                  )
                }
              }
              return $.getPageScroll()
            },
            setPageScroll: function (e) {
              if (void 0 !== window.scrollTo)
                $.setPageScroll = function (e) {
                  window.scrollTo(e.x, e.y)
                }
              else {
                var t = $.getPageScroll()
                if (t.x === e.x && t.y === e.y) return
                ;(document.body.scrollLeft = e.x),
                  (document.body.scrollTop = e.y)
                var i = $.getPageScroll()
                if (i.x !== t.x && i.y !== t.y)
                  return void ($.setPageScroll = function (e) {
                    ;(document.body.scrollLeft = e.x),
                      (document.body.scrollTop = e.y)
                  })
                if (
                  ((document.documentElement.scrollLeft = e.x),
                  (document.documentElement.scrollTop = e.y),
                  (i = $.getPageScroll()).x !== t.x && i.y !== t.y)
                )
                  return void ($.setPageScroll = function (e) {
                    ;(document.documentElement.scrollLeft = e.x),
                      (document.documentElement.scrollTop = e.y)
                  })
                $.setPageScroll = function (e) {}
              }
              return $.setPageScroll(e)
            },
            getWindowSize: function () {
              var e = document.documentElement || {},
                t = document.body || {}
              if ('number' == typeof window.innerWidth)
                $.getWindowSize = function () {
                  return new $.Point(window.innerWidth, window.innerHeight)
                }
              else if (e.clientWidth || e.clientHeight)
                $.getWindowSize = function () {
                  return new $.Point(
                    document.documentElement.clientWidth,
                    document.documentElement.clientHeight
                  )
                }
              else {
                if (!t.clientWidth && !t.clientHeight)
                  throw new Error('Unknown window size, no known technique.')
                $.getWindowSize = function () {
                  return new $.Point(
                    document.body.clientWidth,
                    document.body.clientHeight
                  )
                }
              }
              return $.getWindowSize()
            },
            makeCenteredNode: function (e) {
              e = $.getElement(e)
              var t = [
                $.makeNeutralElement('div'),
                $.makeNeutralElement('div'),
                $.makeNeutralElement('div'),
              ]
              return (
                $.extend(t[0].style, {
                  display: 'table',
                  height: '100%',
                  width: '100%',
                }),
                $.extend(t[1].style, { display: 'table-row' }),
                $.extend(t[2].style, {
                  display: 'table-cell',
                  verticalAlign: 'middle',
                  textAlign: 'center',
                }),
                t[0].appendChild(t[1]),
                t[1].appendChild(t[2]),
                t[2].appendChild(e),
                t[0]
              )
            },
            makeNeutralElement: function (e) {
              var t = document.createElement(e),
                i = t.style
              return (
                (i.background = 'transparent none'),
                (i.border = 'none'),
                (i.margin = '0px'),
                (i.padding = '0px'),
                (i.position = 'static'),
                t
              )
            },
            now: function () {
              return (
                Date.now
                  ? ($.now = Date.now)
                  : ($.now = function () {
                      return new Date().getTime()
                    }),
                $.now()
              )
            },
            makeTransparentImage: function (e) {
              return (
                ($.makeTransparentImage = function (e) {
                  var t = $.makeNeutralElement('img')
                  return (t.src = e), t
                }),
                $.Browser.vendor == $.BROWSERS.IE &&
                  $.Browser.version < 7 &&
                  ($.makeTransparentImage = function (e) {
                    var t = $.makeNeutralElement('img'),
                      i = null
                    return (
                      ((i = $.makeNeutralElement('span')).style.display =
                        'inline-block'),
                      (t.onload = function () {
                        ;(i.style.width = i.style.width || t.width + 'px'),
                          (i.style.height = i.style.height || t.height + 'px'),
                          (t.onload = null),
                          (t = null)
                      }),
                      (t.src = e),
                      (i.style.filter =
                        "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" +
                        e +
                        "', sizingMethod='scale')"),
                      i
                    )
                  }),
                $.makeTransparentImage(e)
              )
            },
            setElementOpacity: function (e, t, i) {
              var n
              ;(e = $.getElement(e)),
                i && !$.Browser.alpha && (t = Math.round(t)),
                $.Browser.opacity
                  ? (e.style.opacity = t < 1 ? t : '')
                  : t < 1
                  ? ((n = 'alpha(opacity=' + Math.round(100 * t) + ')'),
                    (e.style.filter = n))
                  : (e.style.filter = '')
            },
            setElementTouchActionNone: function (e) {
              void 0 !== (e = $.getElement(e)).style.touchAction
                ? (e.style.touchAction = 'none')
                : void 0 !== e.style.msTouchAction &&
                  (e.style.msTouchAction = 'none')
            },
            addClass: function (e, t) {
              ;(e = $.getElement(e)).className
                ? -1 === (' ' + e.className + ' ').indexOf(' ' + t + ' ') &&
                  (e.className += ' ' + t)
                : (e.className = t)
            },
            indexOf: function (e, t, i) {
              return (
                Array.prototype.indexOf
                  ? (this.indexOf = function (e, t, i) {
                      return e.indexOf(t, i)
                    })
                  : (this.indexOf = function (e, t, i) {
                      var n,
                        o,
                        r = i || 0
                      if (!e) throw new TypeError()
                      if (0 === (o = e.length) || r >= o) return -1
                      for (r < 0 && (r = o - Math.abs(r)), n = r; n < o; n++)
                        if (e[n] === t) return n
                      return -1
                    }),
                this.indexOf(e, t, i)
              )
            },
            removeClass: function (e, t) {
              var i,
                n,
                o = []
              for (
                i = (e = $.getElement(e)).className.split(/\s+/), n = 0;
                n < i.length;
                n++
              )
                i[n] && i[n] !== t && o.push(i[n])
              e.className = o.join(' ')
            },
            addEvent: (function () {
              if (window.addEventListener)
                return function (e, t, i, n) {
                  ;(e = $.getElement(e)).addEventListener(t, i, n)
                }
              if (window.attachEvent)
                return function (e, t, i, n) {
                  ;(e = $.getElement(e)).attachEvent('on' + t, i)
                }
              throw new Error('No known event model.')
            })(),
            removeEvent: (function () {
              if (window.removeEventListener)
                return function (e, t, i, n) {
                  ;(e = $.getElement(e)).removeEventListener(t, i, n)
                }
              if (window.detachEvent)
                return function (e, t, i, n) {
                  ;(e = $.getElement(e)).detachEvent('on' + t, i)
                }
              throw new Error('No known event model.')
            })(),
            cancelEvent: function (e) {
              ;(e = $.getEvent(e)).preventDefault
                ? ($.cancelEvent = function (e) {
                    e.preventDefault()
                  })
                : ($.cancelEvent = function (e) {
                    ;((e = $.getEvent(e)).cancel = !0), (e.returnValue = !1)
                  }),
                $.cancelEvent(e)
            },
            stopEvent: function (e) {
              ;(e = $.getEvent(e)).stopPropagation
                ? ($.stopEvent = function (e) {
                    e.stopPropagation()
                  })
                : ($.stopEvent = function (e) {
                    ;(e = $.getEvent(e)).cancelBubble = !0
                  }),
                $.stopEvent(e)
            },
            createCallback: function (e, t) {
              var i,
                n = []
              for (i = 2; i < arguments.length; i++) n.push(arguments[i])
              return function () {
                var i,
                  o = n.concat([])
                for (i = 0; i < arguments.length; i++) o.push(arguments[i])
                return t.apply(e, o)
              }
            },
            getUrlParameter: function (e) {
              var t = URLPARAMS[e]
              return t || null
            },
            getUrlProtocol: function (e) {
              var t = e.match(/^([a-z]+:)\/\//i)
              return null === t ? window.location.protocol : t[1].toLowerCase()
            },
            createAjaxRequest: function (e) {
              var t
              try {
                t = !!new ActiveXObject('Microsoft.XMLHTTP')
              } catch (e) {
                t = !1
              }
              if (t)
                window.XMLHttpRequest
                  ? ($.createAjaxRequest = function (e) {
                      return e
                        ? new ActiveXObject('Microsoft.XMLHTTP')
                        : new XMLHttpRequest()
                    })
                  : ($.createAjaxRequest = function () {
                      return new ActiveXObject('Microsoft.XMLHTTP')
                    })
              else {
                if (!window.XMLHttpRequest)
                  throw new Error("Browser doesn't support XMLHttpRequest.")
                $.createAjaxRequest = function () {
                  return new XMLHttpRequest()
                }
              }
              return $.createAjaxRequest(e)
            },
            makeAjaxRequest: function (e, t, i) {
              var n, o, r
              $.isPlainObject(e) &&
                ((t = e.success),
                (i = e.error),
                (n = e.withCredentials),
                (o = e.headers),
                (r = e.responseType || null),
                (e = e.url))
              var s = $.getUrlProtocol(e),
                a = $.createAjaxRequest('file:' === s)
              if (!$.isFunction(t))
                throw new Error('makeAjaxRequest requires a success callback')
              a.onreadystatechange = function () {
                4 == a.readyState &&
                  ((a.onreadystatechange = function () {}),
                  (a.status >= 200 && a.status < 300) ||
                  (0 === a.status && 'http:' !== s && 'https:' !== s)
                    ? t(a)
                    : ($.console.log(
                        'AJAX request returned %d: %s',
                        a.status,
                        e
                      ),
                      $.isFunction(i) && i(a)))
              }
              try {
                if ((a.open('GET', e, !0), r && (a.responseType = r), o))
                  for (var l in o)
                    Object.prototype.hasOwnProperty.call(o, l) &&
                      o[l] &&
                      a.setRequestHeader(l, o[l])
                n && (a.withCredentials = !0), a.send(null)
              } catch (n) {
                var c = n.message
                if (
                  ($.Browser.vendor == $.BROWSERS.IE &&
                    $.Browser.version < 10 &&
                    void 0 !== n.number &&
                    -2147024891 == n.number &&
                    (c +=
                      '\nSee http://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx#xdomain'),
                  $.console.log('%s while making AJAX request: %s', n.name, c),
                  (a.onreadystatechange = function () {}),
                  window.XDomainRequest)
                ) {
                  var h = new window.XDomainRequest()
                  if (h) {
                    ;(h.onload = function (e) {
                      $.isFunction(t) &&
                        t({
                          responseText: h.responseText,
                          status: 200,
                          statusText: 'OK',
                        })
                    }),
                      (h.onerror = function (e) {
                        $.isFunction(i) &&
                          i({
                            responseText: h.responseText,
                            status: 444,
                            statusText:
                              'An error happened. Due to an XDomainRequest deficiency we can not extract any information about this error. Upgrade your browser.',
                          })
                      })
                    try {
                      h.open('GET', e), h.send()
                    } catch (e) {
                      $.isFunction(i) && i(a, n)
                    }
                  }
                } else $.isFunction(i) && i(a, n)
              }
              return a
            },
            jsonp: function (e) {
              var t,
                i = e.url,
                n =
                  document.head ||
                  document.getElementsByTagName('head')[0] ||
                  document.documentElement,
                o = e.callbackName || 'openseadragon' + $.now(),
                r = window[o],
                s = '$1' + o + '$2',
                a = e.param || 'callback',
                l = e.callback
              ;(i = i.replace(/(\=)\?(&|$)|\?\?/i, s)),
                (i += (/\?/.test(i) ? '&' : '?') + a + '=' + o),
                (window[o] = function (e) {
                  if (r) window[o] = r
                  else
                    try {
                      delete window[o]
                    } catch (e) {}
                  l && $.isFunction(l) && l(e)
                }),
                (t = document.createElement('script')),
                (void 0 === e.async && !1 === e.async) || (t.async = 'async'),
                e.scriptCharset && (t.charset = e.scriptCharset),
                (t.src = i),
                (t.onload = t.onreadystatechange = function (e, i) {
                  ;(i ||
                    !t.readyState ||
                    /loaded|complete/.test(t.readyState)) &&
                    ((t.onload = t.onreadystatechange = null),
                    n && t.parentNode && n.removeChild(t),
                    (t = void 0))
                }),
                n.insertBefore(t, n.firstChild)
            },
            createFromDZI: function () {
              throw 'OpenSeadragon.createFromDZI is deprecated, use Viewer.open.'
            },
            parseXml: function (e) {
              if (window.DOMParser)
                $.parseXml = function (e) {
                  return new DOMParser().parseFromString(e, 'text/xml')
                }
              else {
                if (!window.ActiveXObject)
                  throw new Error("Browser doesn't support XML DOM.")
                $.parseXml = function (e) {
                  var t = null
                  return (
                    ((t = new ActiveXObject('Microsoft.XMLDOM')).async = !1),
                    t.loadXML(e),
                    t
                  )
                }
              }
              return $.parseXml(e)
            },
            parseJSON: function (string) {
              return (
                window.JSON && window.JSON.parse
                  ? ($.parseJSON = window.JSON.parse)
                  : ($.parseJSON = function (string) {
                      return eval('(' + string + ')')
                    }),
                $.parseJSON(string)
              )
            },
            imageFormatSupported: function (e) {
              return !!FILEFORMATS[(e = e || '').toLowerCase()]
            },
          })
          var nullfunction = function (e) {}
          ;($.console = window.console || {
            log: nullfunction,
            debug: nullfunction,
            info: nullfunction,
            warn: nullfunction,
            error: nullfunction,
            assert: nullfunction,
          }),
            ($.Browser = { vendor: $.BROWSERS.UNKNOWN, version: 0, alpha: !0 })
          var FILEFORMATS = {
              bmp: !1,
              jpeg: !0,
              jpg: !0,
              png: !0,
              tif: !1,
              wdp: !1,
            },
            URLPARAMS = {}
          function getOffsetParent(e, t) {
            return t && e != document.body ? document.body : e.offsetParent
          }
          !(function () {
            var e = navigator.appVersion,
              t = navigator.userAgent
            switch (navigator.appName) {
              case 'Microsoft Internet Explorer':
                window.attachEvent &&
                  window.ActiveXObject &&
                  (($.Browser.vendor = $.BROWSERS.IE),
                  ($.Browser.version = parseFloat(
                    t.substring(
                      t.indexOf('MSIE') + 5,
                      t.indexOf(';', t.indexOf('MSIE'))
                    )
                  )))
                break
              case 'Netscape':
                window.addEventListener &&
                  (t.indexOf('Firefox') >= 0
                    ? (($.Browser.vendor = $.BROWSERS.FIREFOX),
                      ($.Browser.version = parseFloat(
                        t.substring(t.indexOf('Firefox') + 8)
                      )))
                    : t.indexOf('Safari') >= 0
                    ? (($.Browser.vendor =
                        t.indexOf('Chrome') >= 0
                          ? $.BROWSERS.CHROME
                          : $.BROWSERS.SAFARI),
                      ($.Browser.version = parseFloat(
                        t.substring(
                          t.substring(0, t.indexOf('Safari')).lastIndexOf('/') +
                            1,
                          t.indexOf('Safari')
                        )
                      )))
                    : null !==
                        new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})').exec(
                          t
                        ) &&
                      (($.Browser.vendor = $.BROWSERS.IE),
                      ($.Browser.version = parseFloat(RegExp.$1))))
                break
              case 'Opera':
                ;($.Browser.vendor = $.BROWSERS.OPERA),
                  ($.Browser.version = parseFloat(e))
            }
            var i,
              n,
              o,
              r = window.location.search.substring(1).split('&')
            for (o = 0; o < r.length; o++)
              if ((n = (i = r[o]).indexOf('=')) > 0) {
                var s = i.substring(0, n),
                  a = i.substring(n + 1)
                try {
                  URLPARAMS[s] = decodeURIComponent(a)
                } catch (e) {
                  $.console.error(
                    'Ignoring malformed URL parameter: %s=%s',
                    s,
                    a
                  )
                }
              }
            ;($.Browser.alpha = !(
              ($.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 9) ||
              ($.Browser.vendor == $.BROWSERS.CHROME && $.Browser.version < 2)
            )),
              ($.Browser.opacity = !(
                $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 9
              ))
          })(),
            (function (e) {
              var t =
                  e.requestAnimationFrame ||
                  e.mozRequestAnimationFrame ||
                  e.webkitRequestAnimationFrame ||
                  e.msRequestAnimationFrame,
                i =
                  e.cancelAnimationFrame ||
                  e.mozCancelAnimationFrame ||
                  e.webkitCancelAnimationFrame ||
                  e.msCancelAnimationFrame
              if (t && i)
                ($.requestAnimationFrame = function () {
                  return t.apply(e, arguments)
                }),
                  ($.cancelAnimationFrame = function () {
                    return i.apply(e, arguments)
                  })
              else {
                var n,
                  o = [],
                  r = [],
                  s = 0
                ;($.requestAnimationFrame = function (e) {
                  return (
                    o.push([++s, e]),
                    n ||
                      (n = setInterval(function () {
                        if (o.length) {
                          var e = $.now(),
                            t = r
                          for (r = o, o = t; r.length; ) r.shift()[1](e)
                        } else clearInterval(n), (n = void 0)
                      }, 20)),
                    s
                  )
                }),
                  ($.cancelAnimationFrame = function (e) {
                    var t, i
                    for (t = 0, i = o.length; t < i; t += 1)
                      if (o[t][0] === e) return void o.splice(t, 1)
                    for (t = 0, i = r.length; t < i; t += 1)
                      if (r[t][0] === e) return void r.splice(t, 1)
                  })
              }
            })(window)
        })(OpenSeadragon),
        (root = commonjsGlobal),
        (factory = function () {
          return OpenSeadragon
        }),
        module.exports
          ? (module.exports = factory())
          : (root.OpenSeadragon = factory()),
        ($ = OpenSeadragon),
        (fullScreenApi = {
          supportsFullScreen: !1,
          isFullScreen: function () {
            return !1
          },
          getFullScreenElement: function () {
            return null
          },
          requestFullScreen: function () {},
          exitFullScreen: function () {},
          cancelFullScreen: function () {},
          fullScreenEventName: '',
          fullScreenErrorEventName: '',
        }),
        document.exitFullscreen
          ? ((fullScreenApi.supportsFullScreen = !0),
            (fullScreenApi.getFullScreenElement = function () {
              return document.fullscreenElement
            }),
            (fullScreenApi.requestFullScreen = function (e) {
              return e.requestFullscreen()
            }),
            (fullScreenApi.exitFullScreen = function () {
              document.exitFullscreen()
            }),
            (fullScreenApi.fullScreenEventName = 'fullscreenchange'),
            (fullScreenApi.fullScreenErrorEventName = 'fullscreenerror'))
          : document.msExitFullscreen
          ? ((fullScreenApi.supportsFullScreen = !0),
            (fullScreenApi.getFullScreenElement = function () {
              return document.msFullscreenElement
            }),
            (fullScreenApi.requestFullScreen = function (e) {
              return e.msRequestFullscreen()
            }),
            (fullScreenApi.exitFullScreen = function () {
              document.msExitFullscreen()
            }),
            (fullScreenApi.fullScreenEventName = 'MSFullscreenChange'),
            (fullScreenApi.fullScreenErrorEventName = 'MSFullscreenError'))
          : document.webkitExitFullscreen
          ? ((fullScreenApi.supportsFullScreen = !0),
            (fullScreenApi.getFullScreenElement = function () {
              return document.webkitFullscreenElement
            }),
            (fullScreenApi.requestFullScreen = function (e) {
              return e.webkitRequestFullscreen()
            }),
            (fullScreenApi.exitFullScreen = function () {
              document.webkitExitFullscreen()
            }),
            (fullScreenApi.fullScreenEventName = 'webkitfullscreenchange'),
            (fullScreenApi.fullScreenErrorEventName = 'webkitfullscreenerror'))
          : document.webkitCancelFullScreen
          ? ((fullScreenApi.supportsFullScreen = !0),
            (fullScreenApi.getFullScreenElement = function () {
              return document.webkitCurrentFullScreenElement
            }),
            (fullScreenApi.requestFullScreen = function (e) {
              return e.webkitRequestFullScreen()
            }),
            (fullScreenApi.exitFullScreen = function () {
              document.webkitCancelFullScreen()
            }),
            (fullScreenApi.fullScreenEventName = 'webkitfullscreenchange'),
            (fullScreenApi.fullScreenErrorEventName = 'webkitfullscreenerror'))
          : document.mozCancelFullScreen &&
            ((fullScreenApi.supportsFullScreen = !0),
            (fullScreenApi.getFullScreenElement = function () {
              return document.mozFullScreenElement
            }),
            (fullScreenApi.requestFullScreen = function (e) {
              return e.mozRequestFullScreen()
            }),
            (fullScreenApi.exitFullScreen = function () {
              document.mozCancelFullScreen()
            }),
            (fullScreenApi.fullScreenEventName = 'mozfullscreenchange'),
            (fullScreenApi.fullScreenErrorEventName = 'mozfullscreenerror')),
        (fullScreenApi.isFullScreen = function () {
          return null !== fullScreenApi.getFullScreenElement()
        }),
        (fullScreenApi.cancelFullScreen = function () {
          $.console.error(
            'cancelFullScreen is deprecated. Use exitFullScreen instead.'
          ),
            fullScreenApi.exitFullScreen()
        }),
        $.extend($, fullScreenApi),
        (function (e) {
          ;(e.EventSource = function () {
            this.events = {}
          }),
            (e.EventSource.prototype = {
              addOnceHandler: function (e, t, i, n) {
                var o = this
                n = n || 1
                var r = 0,
                  s = function (i) {
                    ++r === n && o.removeHandler(e, s), t(i)
                  }
                this.addHandler(e, s, i)
              },
              addHandler: function (t, i, n) {
                var o = this.events[t]
                o || (this.events[t] = o = []),
                  i &&
                    e.isFunction(i) &&
                    (o[o.length] = { handler: i, userData: n || null })
              },
              removeHandler: function (t, i) {
                var n,
                  o = this.events[t],
                  r = []
                if (o && e.isArray(o)) {
                  for (n = 0; n < o.length; n++)
                    o[n].handler !== i && r.push(o[n])
                  this.events[t] = r
                }
              },
              removeAllHandlers: function (e) {
                if (e) this.events[e] = []
                else for (var t in this.events) this.events[t] = []
              },
              getHandler: function (e) {
                var t = this.events[e]
                return t && t.length
                  ? ((t = 1 === t.length ? [t[0]] : Array.apply(null, t)),
                    function (e, i) {
                      var n,
                        o = t.length
                      for (n = 0; n < o; n++)
                        t[n] &&
                          ((i.eventSource = e),
                          (i.userData = t[n].userData),
                          t[n].handler(i))
                    })
                  : null
              },
              raiseEvent: function (e, t) {
                var i = this.getHandler(e)
                i && (t || (t = {}), i(this, t))
              },
            })
        })(OpenSeadragon),
        (function (e) {
          var t,
            i,
            n,
            o,
            r,
            s,
            a = [],
            l = {}
          function c(t) {
            var i,
              n = l[t.hash],
              o = n.activePointersLists.length
            for (i = 0; i < o; i++)
              n.activePointersLists[i].captureCount > 0 &&
                (e.removeEvent(
                  e.MouseTracker.captureElement,
                  'mousemove',
                  n.mousemovecaptured,
                  !0
                ),
                e.removeEvent(
                  e.MouseTracker.captureElement,
                  'mouseup',
                  n.mouseupcaptured,
                  !0
                ),
                e.removeEvent(
                  e.MouseTracker.captureElement,
                  e.MouseTracker.unprefixedPointerEvents
                    ? 'pointermove'
                    : 'MSPointerMove',
                  n.pointermovecaptured,
                  !0
                ),
                e.removeEvent(
                  e.MouseTracker.captureElement,
                  e.MouseTracker.unprefixedPointerEvents
                    ? 'pointerup'
                    : 'MSPointerUp',
                  n.pointerupcaptured,
                  !0
                ),
                e.removeEvent(
                  e.MouseTracker.captureElement,
                  'touchmove',
                  n.touchmovecaptured,
                  !0
                ),
                e.removeEvent(
                  e.MouseTracker.captureElement,
                  'touchend',
                  n.touchendcaptured,
                  !0
                ),
                (n.activePointersLists[i].captureCount = 0))
            for (i = 0; i < o; i++) n.activePointersLists.pop()
          }
          function h(t) {
            var i,
              n,
              o = l[t.hash]
            if (o.tracking) {
              for (n = 0; n < e.MouseTracker.subscribeEvents.length; n++)
                (i = e.MouseTracker.subscribeEvents[n]),
                  e.removeEvent(t.element, i, o[i], !1)
              c(t), (o.tracking = !1)
            }
          }
          function u(t, i) {
            var n = l[t.hash]
            if ('pointerevent' === i)
              return {
                upName: e.MouseTracker.unprefixedPointerEvents
                  ? 'pointerup'
                  : 'MSPointerUp',
                upHandler: n.pointerupcaptured,
                moveName: e.MouseTracker.unprefixedPointerEvents
                  ? 'pointermove'
                  : 'MSPointerMove',
                moveHandler: n.pointermovecaptured,
              }
            if ('mouse' === i)
              return {
                upName: 'mouseup',
                upHandler: n.mouseupcaptured,
                moveName: 'mousemove',
                moveHandler: n.mousemovecaptured,
              }
            if ('touch' === i)
              return {
                upName: 'touchend',
                upHandler: n.touchendcaptured,
                moveName: 'touchmove',
                moveHandler: n.touchmovecaptured,
              }
            throw new Error(
              'MouseTracker.getCaptureEventParams: Unknown pointer type.'
            )
          }
          function d(t, i, n) {
            var o,
              r = t.getActivePointersListByType(i)
            ;(r.captureCount += n || 1),
              1 === r.captureCount &&
                (e.Browser.vendor === e.BROWSERS.IE && e.Browser.version < 9
                  ? t.element.setCapture(!0)
                  : ((o = u(
                      t,
                      e.MouseTracker.havePointerEvents ? 'pointerevent' : i
                    )),
                    ye &&
                      we(window.top) &&
                      e.addEvent(window.top, o.upName, o.upHandler, !0),
                    e.addEvent(
                      e.MouseTracker.captureElement,
                      o.upName,
                      o.upHandler,
                      !0
                    ),
                    e.addEvent(
                      e.MouseTracker.captureElement,
                      o.moveName,
                      o.moveHandler,
                      !0
                    )))
          }
          function p(t, i, n) {
            var o,
              r = t.getActivePointersListByType(i)
            ;(r.captureCount -= n || 1),
              0 === r.captureCount &&
                (e.Browser.vendor === e.BROWSERS.IE && e.Browser.version < 9
                  ? t.element.releaseCapture()
                  : ((o = u(
                      t,
                      e.MouseTracker.havePointerEvents ? 'pointerevent' : i
                    )),
                    ye &&
                      we(window.top) &&
                      e.removeEvent(window.top, o.upName, o.upHandler, !0),
                    e.removeEvent(
                      e.MouseTracker.captureElement,
                      o.moveName,
                      o.moveHandler,
                      !0
                    ),
                    e.removeEvent(
                      e.MouseTracker.captureElement,
                      o.upName,
                      o.upHandler,
                      !0
                    )))
          }
          function g(t) {
            var i
            if (e.MouseTracker.unprefixedPointerEvents) i = t.pointerType
            else
              switch (t.pointerType) {
                case 2:
                  i = 'touch'
                  break
                case 3:
                  i = 'pen'
                  break
                case 4:
                  i = 'mouse'
                  break
                default:
                  i = ''
              }
            return i
          }
          function m(t) {
            return e.getMousePosition(t)
          }
          function v(e, t) {
            return f(m(e), t)
          }
          function f(t, i) {
            var n = e.getElementOffset(i)
            return t.minus(n)
          }
          function y(t, i) {
            return new e.Point((t.x + i.x) / 2, (t.y + i.y) / 2)
          }
          function w(t, i) {
            t.clickHandler && e.cancelEvent(i)
          }
          function T(t, i) {
            t.dblClickHandler && e.cancelEvent(i)
          }
          function x(t, i) {
            t.keyDownHandler &&
              ((i = e.getEvent(i)),
              t.keyDownHandler({
                eventSource: t,
                keyCode: i.keyCode ? i.keyCode : i.charCode,
                ctrl: i.ctrlKey,
                shift: i.shiftKey,
                alt: i.altKey,
                meta: i.metaKey,
                originalEvent: i,
                preventDefaultAction: !1,
                userData: t.userData,
              }) || e.cancelEvent(i))
          }
          function _(t, i) {
            t.keyUpHandler &&
              ((i = e.getEvent(i)),
              t.keyUpHandler({
                eventSource: t,
                keyCode: i.keyCode ? i.keyCode : i.charCode,
                ctrl: i.ctrlKey,
                shift: i.shiftKey,
                alt: i.altKey,
                meta: i.metaKey,
                originalEvent: i,
                preventDefaultAction: !1,
                userData: t.userData,
              }) || e.cancelEvent(i))
          }
          function S(t, i) {
            t.keyHandler &&
              ((i = e.getEvent(i)),
              t.keyHandler({
                eventSource: t,
                keyCode: i.keyCode ? i.keyCode : i.charCode,
                ctrl: i.ctrlKey,
                shift: i.shiftKey,
                alt: i.altKey,
                meta: i.metaKey,
                originalEvent: i,
                preventDefaultAction: !1,
                userData: t.userData,
              }) || e.cancelEvent(i))
          }
          function E(t, i) {
            t.focusHandler &&
              ((i = e.getEvent(i)),
              !1 ===
                t.focusHandler({
                  eventSource: t,
                  originalEvent: i,
                  preventDefaultAction: !1,
                  userData: t.userData,
                }) && e.cancelEvent(i))
          }
          function P(t, i) {
            t.blurHandler &&
              ((i = e.getEvent(i)),
              !1 ===
                t.blurHandler({
                  eventSource: t,
                  originalEvent: i,
                  preventDefaultAction: !1,
                  userData: t.userData,
                }) && e.cancelEvent(i))
          }
          function b(e, t) {
            C(e, t, t)
          }
          function R(t, i) {
            var n = {
              target: (i = e.getEvent(i)).target || i.srcElement,
              type: 'wheel',
              shiftKey: i.shiftKey || !1,
              clientX: i.clientX,
              clientY: i.clientY,
              pageX: i.pageX ? i.pageX : i.clientX,
              pageY: i.pageY ? i.pageY : i.clientY,
              deltaMode: 'MozMousePixelScroll' == i.type ? 0 : 1,
              deltaX: 0,
              deltaZ: 0,
            }
            'mousewheel' == e.MouseTracker.wheelEventName
              ? (n.deltaY =
                  -i.wheelDelta / e.DEFAULT_SETTINGS.pixelsPerWheelLine)
              : (n.deltaY = i.detail),
              C(t, n, i)
          }
          function C(t, i, n) {
            var o
            ;(o = i.deltaY < 0 ? 1 : -1),
              t.scrollHandler &&
                !1 ===
                  t.scrollHandler({
                    eventSource: t,
                    pointerType: 'mouse',
                    position: v(i, t.element),
                    scroll: o,
                    shift: i.shiftKey,
                    isTouchEvent: !1,
                    originalEvent: n,
                    preventDefaultAction: !1,
                    userData: t.userData,
                  }) &&
                e.cancelEvent(n)
          }
          function k(e, t) {
            if (e === t) return !1
            for (; t && t !== e; ) t = t.parentNode
            return t === e
          }
          function O(t, i) {
            D(t, (i = e.getEvent(i)))
          }
          function I(t, i) {
            ;(i = e.getEvent(i)).currentTarget === i.relatedTarget ||
              k(i.currentTarget, i.relatedTarget) ||
              D(t, i)
          }
          function D(t, i) {
            pe(t, i, [
              {
                id: e.MouseTracker.mousePointerId,
                type: 'mouse',
                isPrimary: !0,
                currentPos: m(i),
                currentTime: e.now(),
              },
            ])
          }
          function B(t, i) {
            H(t, (i = e.getEvent(i)))
          }
          function L(t, i) {
            ;(i = e.getEvent(i)).currentTarget === i.relatedTarget ||
              k(i.currentTarget, i.relatedTarget) ||
              H(t, i)
          }
          function H(t, i) {
            ge(t, i, [
              {
                id: e.MouseTracker.mousePointerId,
                type: 'mouse',
                isPrimary: !0,
                currentPos: m(i),
                currentTime: e.now(),
              },
            ])
          }
          function z(t) {
            return e.Browser.vendor === e.BROWSERS.IE && e.Browser.version < 9
              ? 1 === t
                ? 0
                : 2 === t
                ? 2
                : 4 === t
                ? 1
                : -1
              : t
          }
          function M(t, i) {
            me(
              t,
              (i = e.getEvent(i)),
              [
                {
                  id: e.MouseTracker.mousePointerId,
                  type: 'mouse',
                  isPrimary: !0,
                  currentPos: m(i),
                  currentTime: e.now(),
                },
              ],
              z(i.button)
            ) && (e.stopEvent(i), d(t, 'mouse')),
              (t.clickHandler ||
                t.dblClickHandler ||
                t.pressHandler ||
                t.dragHandler ||
                t.dragEndHandler) &&
                e.cancelEvent(i)
          }
          function F(e, t) {
            A(e, t)
          }
          function N(t, i) {
            A(t, i), e.stopEvent(i)
          }
          function A(t, i) {
            ve(
              t,
              (i = e.getEvent(i)),
              [
                {
                  id: e.MouseTracker.mousePointerId,
                  type: 'mouse',
                  isPrimary: !0,
                  currentPos: m(i),
                  currentTime: e.now(),
                },
              ],
              z(i.button)
            ) && p(t, 'mouse')
          }
          function $(e, t) {
            U(e, t)
          }
          function j(t, i) {
            U(t, i), e.stopEvent(i)
          }
          function U(t, i) {
            fe(t, (i = e.getEvent(i)), [
              {
                id: e.MouseTracker.mousePointerId,
                type: 'mouse',
                isPrimary: !0,
                currentPos: m(i),
                currentTime: e.now(),
              },
            ])
          }
          function W(e, t, i) {
            var n,
              o = i.getLength(),
              r = []
            if ('touch' === i.type || i.contacts > 0) {
              for (n = 0; n < o; n++) r.push(i.getByIndex(n))
              r.length > 0 &&
                (ve(e, t, r, 0),
                (i.captureCount = 1),
                p(e, i.type),
                ge(e, t, r))
            }
          }
          function V(t, i) {
            var n,
              o,
              r,
              s,
              l = i.changedTouches.length,
              c = [],
              h = t.getActivePointersListByType('touch')
            for (
              n = e.now(),
                h.getLength() > i.touches.length - l &&
                  (e.console.warn(
                    "Tracked touch contact count doesn't match event.touches.length. Removing all tracked touch pointers."
                  ),
                  W(t, i, h)),
                o = 0;
              o < l;
              o++
            )
              c.push({
                id: i.changedTouches[o].identifier,
                type: 'touch',
                currentPos: m(i.changedTouches[o]),
                currentTime: n,
              })
            for (pe(t, i, c), o = 0; o < a.length; o++)
              if (
                a[o] !== t &&
                a[o].isTracking() &&
                k(a[o].element, t.element)
              ) {
                for (s = [], r = 0; r < l; r++)
                  s.push({
                    id: i.changedTouches[r].identifier,
                    type: 'touch',
                    currentPos: m(i.changedTouches[r]),
                    currentTime: n,
                  })
                pe(a[o], i, s)
              }
            me(t, i, c, 0) && (e.stopEvent(i), d(t, 'touch', l)),
              e.cancelEvent(i)
          }
          function G(e, t) {
            Z(e, t)
          }
          function q(t, i) {
            Z(t, i), e.stopEvent(i)
          }
          function Z(t, i) {
            var n,
              o,
              r,
              s,
              l = i.changedTouches.length,
              c = []
            for (n = e.now(), o = 0; o < l; o++)
              c.push({
                id: i.changedTouches[o].identifier,
                type: 'touch',
                currentPos: m(i.changedTouches[o]),
                currentTime: n,
              })
            for (
              ve(t, i, c, 0) && p(t, 'touch', l), ge(t, i, c), o = 0;
              o < a.length;
              o++
            )
              if (
                a[o] !== t &&
                a[o].isTracking() &&
                k(a[o].element, t.element)
              ) {
                for (s = [], r = 0; r < l; r++)
                  s.push({
                    id: i.changedTouches[r].identifier,
                    type: 'touch',
                    currentPos: m(i.changedTouches[r]),
                    currentTime: n,
                  })
                ge(a[o], i, s)
              }
            e.cancelEvent(i)
          }
          function X(e, t) {
            Y(e, t)
          }
          function K(t, i) {
            Y(t, i), e.stopEvent(i)
          }
          function Y(t, i) {
            var n,
              o = i.changedTouches.length,
              r = []
            for (n = 0; n < o; n++)
              r.push({
                id: i.changedTouches[n].identifier,
                type: 'touch',
                currentPos: m(i.changedTouches[n]),
                currentTime: e.now(),
              })
            fe(t, i, r), e.cancelEvent(i)
          }
          function Q(e, t) {
            var i = e.getActivePointersListByType('touch')
            W(e, t, i)
          }
          function J(e, t) {
            return t.stopPropagation(), t.preventDefault(), !1
          }
          function ee(e, t) {
            return t.stopPropagation(), t.preventDefault(), !1
          }
          function te(t, i) {
            i.currentTarget === i.relatedTarget ||
              k(i.currentTarget, i.relatedTarget) ||
              pe(t, i, [
                {
                  id: i.pointerId,
                  type: g(i),
                  isPrimary: i.isPrimary,
                  currentPos: m(i),
                  currentTime: e.now(),
                },
              ])
          }
          function ie(t, i) {
            i.currentTarget === i.relatedTarget ||
              k(i.currentTarget, i.relatedTarget) ||
              ge(t, i, [
                {
                  id: i.pointerId,
                  type: g(i),
                  isPrimary: i.isPrimary,
                  currentPos: m(i),
                  currentTime: e.now(),
                },
              ])
          }
          function ne(t, i) {
            var n
            me(
              t,
              i,
              [
                (n = {
                  id: i.pointerId,
                  type: g(i),
                  isPrimary: i.isPrimary,
                  currentPos: m(i),
                  currentTime: e.now(),
                }),
              ],
              i.button
            ) && (e.stopEvent(i), d(t, n.type)),
              (t.clickHandler ||
                t.dblClickHandler ||
                t.pressHandler ||
                t.dragHandler ||
                t.dragEndHandler ||
                t.pinchHandler) &&
                e.cancelEvent(i)
          }
          function oe(e, t) {
            se(e, t)
          }
          function re(t, i) {
            t.getActivePointersListByType(g(i)).getById(i.pointerId) &&
              se(t, i),
              e.stopEvent(i)
          }
          function se(t, i) {
            var n
            ve(
              t,
              i,
              [
                (n = {
                  id: i.pointerId,
                  type: g(i),
                  isPrimary: i.isPrimary,
                  currentPos: m(i),
                  currentTime: e.now(),
                }),
              ],
              i.button
            ) && p(t, n.type)
          }
          function ae(e, t) {
            ce(e, t)
          }
          function le(t, i) {
            t.getActivePointersListByType(g(i)).getById(i.pointerId) &&
              ce(t, i),
              e.stopEvent(i)
          }
          function ce(t, i) {
            fe(t, i, [
              {
                id: i.pointerId,
                type: g(i),
                isPrimary: i.isPrimary,
                currentPos: m(i),
                currentTime: e.now(),
              },
            ])
          }
          function he(e, t) {
            !(function (e, t, i) {
              ve(e, t, i, 0), ge(e, t, i)
            })(e, t, [{ id: t.pointerId, type: g(t) }])
          }
          function ue(e, t) {
            return (
              Object.prototype.hasOwnProperty.call(t, 'isPrimary') ||
                (0 === e.getLength() ? (t.isPrimary = !0) : (t.isPrimary = !1)),
              (t.speed = 0),
              (t.direction = 0),
              (t.contactPos = t.currentPos),
              (t.contactTime = t.currentTime),
              (t.lastPos = t.currentPos),
              (t.lastTime = t.currentTime),
              e.add(t)
            )
          }
          function de(e, t) {
            var i, n
            return (
              e.getById(t.id)
                ? ((i = e.removeById(t.id)),
                  Object.prototype.hasOwnProperty.call(t, 'isPrimary') ||
                    (n = e.getPrimary()) ||
                    ((n = e.getByIndex(0)) && (n.isPrimary = !0)))
                : (i = e.getLength()),
              i
            )
          }
          function pe(t, i, n) {
            var o,
              r,
              s,
              a = t.getActivePointersListByType(n[0].type),
              l = n.length
            for (o = 0; o < l; o++)
              (r = n[o]),
                (s = a.getById(r.id))
                  ? ((s.insideElement = !0),
                    (s.lastPos = s.currentPos),
                    (s.lastTime = s.currentTime),
                    (s.currentPos = r.currentPos),
                    (s.currentTime = r.currentTime),
                    (r = s))
                  : ((r.captured = !1),
                    (r.insideElementPressed = !1),
                    (r.insideElement = !0),
                    ue(a, r)),
                t.enterHandler &&
                  !1 ===
                    t.enterHandler({
                      eventSource: t,
                      pointerType: r.type,
                      position: f(r.currentPos, t.element),
                      buttons: a.buttons,
                      pointers: t.getActivePointerCount(),
                      insideElementPressed: r.insideElementPressed,
                      buttonDownAny: 0 !== a.buttons,
                      isTouchEvent: 'touch' === r.type,
                      originalEvent: i,
                      preventDefaultAction: !1,
                      userData: t.userData,
                    }) &&
                  e.cancelEvent(i)
          }
          function ge(t, i, n) {
            var o,
              r,
              s,
              a = t.getActivePointersListByType(n[0].type),
              l = n.length
            for (o = 0; o < l; o++)
              (r = n[o]),
                (s = a.getById(r.id)) &&
                  (s.captured
                    ? ((s.insideElement = !1),
                      (s.lastPos = s.currentPos),
                      (s.lastTime = s.currentTime),
                      (s.currentPos = r.currentPos),
                      (s.currentTime = r.currentTime))
                    : de(a, s),
                  (r = s)),
                t.exitHandler &&
                  !1 ===
                    t.exitHandler({
                      eventSource: t,
                      pointerType: r.type,
                      position: r.currentPos && f(r.currentPos, t.element),
                      buttons: a.buttons,
                      pointers: t.getActivePointerCount(),
                      insideElementPressed: !!s && s.insideElementPressed,
                      buttonDownAny: 0 !== a.buttons,
                      isTouchEvent: 'touch' === r.type,
                      originalEvent: i,
                      preventDefaultAction: !1,
                      userData: t.userData,
                    }) &&
                  e.cancelEvent(i)
          }
          function me(t, i, n, o) {
            var r,
              s,
              a,
              c = l[t.hash],
              h = t.getActivePointersListByType(n[0].type),
              u = n.length
            void 0 !== i.buttons
              ? (h.buttons = i.buttons)
              : e.Browser.vendor === e.BROWSERS.IE && e.Browser.version < 9
              ? 0 === o
                ? (h.buttons += 1)
                : 1 === o
                ? (h.buttons += 4)
                : 2 === o
                ? (h.buttons += 2)
                : 3 === o
                ? (h.buttons += 8)
                : 4 === o
                ? (h.buttons += 16)
                : 5 === o && (h.buttons += 32)
              : 0 === o
              ? (h.buttons |= 1)
              : 1 === o
              ? (h.buttons |= 4)
              : 2 === o
              ? (h.buttons |= 2)
              : 3 === o
              ? (h.buttons |= 8)
              : 4 === o
              ? (h.buttons |= 16)
              : 5 === o && (h.buttons |= 32)
            var d = t.getActivePointersListsExceptType(n[0].type)
            for (r = 0; r < d.length; r++) W(t, i, d[r])
            if (0 !== o)
              return (
                t.nonPrimaryPressHandler &&
                  !1 ===
                    t.nonPrimaryPressHandler({
                      eventSource: t,
                      pointerType: n[0].type,
                      position: f(n[0].currentPos, t.element),
                      button: o,
                      buttons: h.buttons,
                      isTouchEvent: 'touch' === n[0].type,
                      originalEvent: i,
                      preventDefaultAction: !1,
                      userData: t.userData,
                    }) &&
                  e.cancelEvent(i),
                !1
              )
            for (r = 0; r < u; r++)
              (s = n[r]),
                (a = h.getById(s.id))
                  ? ((a.captured = !0),
                    (a.insideElementPressed = !0),
                    (a.insideElement = !0),
                    (a.contactPos = s.currentPos),
                    (a.contactTime = s.currentTime),
                    (a.lastPos = a.currentPos),
                    (a.lastTime = a.currentTime),
                    (a.currentPos = s.currentPos),
                    (a.currentTime = s.currentTime),
                    (s = a))
                  : ((s.captured = !0),
                    (s.insideElementPressed = !0),
                    (s.insideElement = !0),
                    ue(h, s)),
                h.addContact(),
                (t.dragHandler || t.dragEndHandler || t.pinchHandler) &&
                  e.MouseTracker.gesturePointVelocityTracker.addPoint(t, s),
                1 === h.contacts
                  ? t.pressHandler &&
                    !1 ===
                      t.pressHandler({
                        eventSource: t,
                        pointerType: s.type,
                        position: f(s.contactPos, t.element),
                        buttons: h.buttons,
                        isTouchEvent: 'touch' === s.type,
                        originalEvent: i,
                        preventDefaultAction: !1,
                        userData: t.userData,
                      }) &&
                    e.cancelEvent(i)
                  : 2 === h.contacts &&
                    t.pinchHandler &&
                    'touch' === s.type &&
                    ((c.pinchGPoints = h.asArray()),
                    (c.lastPinchDist = c.currentPinchDist = c.pinchGPoints[0].currentPos.distanceTo(
                      c.pinchGPoints[1].currentPos
                    )),
                    (c.lastPinchCenter = c.currentPinchCenter = y(
                      c.pinchGPoints[0].currentPos,
                      c.pinchGPoints[1].currentPos
                    )))
            return !0
          }
          function ve(t, i, n, o) {
            var r,
              s,
              a,
              c,
              h,
              u,
              d = l[t.hash],
              p = t.getActivePointersListByType(n[0].type),
              g = n.length,
              m = !1,
              v = !1
            if (
              (void 0 !== i.buttons
                ? (p.buttons = i.buttons)
                : e.Browser.vendor === e.BROWSERS.IE && e.Browser.version < 9
                ? 0 === o
                  ? (p.buttons -= 1)
                  : 1 === o
                  ? (p.buttons -= 4)
                  : 2 === o
                  ? (p.buttons -= 2)
                  : 3 === o
                  ? (p.buttons -= 8)
                  : 4 === o
                  ? (p.buttons -= 16)
                  : 5 === o && (p.buttons -= 32)
                : 0 === o
                ? (p.buttons ^= -2)
                : 1 === o
                ? (p.buttons ^= -5)
                : 2 === o
                ? (p.buttons ^= -3)
                : 3 === o
                ? (p.buttons ^= -9)
                : 4 === o
                ? (p.buttons ^= -17)
                : 5 === o && (p.buttons ^= -33),
              0 !== o)
            ) {
              t.nonPrimaryReleaseHandler &&
                !1 ===
                  t.nonPrimaryReleaseHandler({
                    eventSource: t,
                    pointerType: n[0].type,
                    position: f(n[0].currentPos, t.element),
                    button: o,
                    buttons: p.buttons,
                    isTouchEvent: 'touch' === n[0].type,
                    originalEvent: i,
                    preventDefaultAction: !1,
                    userData: t.userData,
                  }) &&
                e.cancelEvent(i)
              var w = t.getActivePointersListByType('mouse')
              return W(t, i, w), !1
            }
            if (void 0 === n[0].currentPos) return W(t, i, p), !1
            for (a = 0; a < g; a++)
              (c = n[a]),
                (h = p.getById(c.id)) &&
                  (h.captured && ((h.captured = !1), (m = !0), (v = !0)),
                  (h.lastPos = h.currentPos),
                  (h.lastTime = h.currentTime),
                  (h.currentPos = c.currentPos),
                  (h.currentTime = c.currentTime),
                  h.insideElement || de(p, h),
                  (r = h.currentPos),
                  (s = h.currentTime),
                  v
                    ? (p.removeContact(),
                      (t.dragHandler || t.dragEndHandler || t.pinchHandler) &&
                        e.MouseTracker.gesturePointVelocityTracker.removePoint(
                          t,
                          h
                        ),
                      0 === p.contacts
                        ? (t.releaseHandler &&
                            !1 ===
                              t.releaseHandler({
                                eventSource: t,
                                pointerType: h.type,
                                position: f(r, t.element),
                                buttons: p.buttons,
                                insideElementPressed: h.insideElementPressed,
                                insideElementReleased: h.insideElement,
                                isTouchEvent: 'touch' === h.type,
                                originalEvent: i,
                                preventDefaultAction: !1,
                                userData: t.userData,
                              }) &&
                            e.cancelEvent(i),
                          t.dragEndHandler &&
                            !h.currentPos.equals(h.contactPos) &&
                            !1 ===
                              t.dragEndHandler({
                                eventSource: t,
                                pointerType: h.type,
                                position: f(h.currentPos, t.element),
                                speed: h.speed,
                                direction: h.direction,
                                shift: i.shiftKey,
                                isTouchEvent: 'touch' === h.type,
                                originalEvent: i,
                                preventDefaultAction: !1,
                                userData: t.userData,
                              }) &&
                            e.cancelEvent(i),
                          (t.clickHandler || t.dblClickHandler) &&
                            h.insideElement &&
                            ((u =
                              s - h.contactTime <= t.clickTimeThreshold &&
                              h.contactPos.distanceTo(r) <=
                                t.clickDistThreshold),
                            t.clickHandler &&
                              !1 ===
                                t.clickHandler({
                                  eventSource: t,
                                  pointerType: h.type,
                                  position: f(h.currentPos, t.element),
                                  quick: u,
                                  shift: i.shiftKey,
                                  isTouchEvent: 'touch' === h.type,
                                  originalEvent: i,
                                  preventDefaultAction: !1,
                                  userData: t.userData,
                                }) &&
                              e.cancelEvent(i),
                            t.dblClickHandler &&
                              u &&
                              (p.clicks++,
                              1 === p.clicks
                                ? ((d.lastClickPos = r),
                                  (d.dblClickTimeOut = setTimeout(function () {
                                    p.clicks = 0
                                  }, t.dblClickTimeThreshold)))
                                : 2 === p.clicks &&
                                  (clearTimeout(d.dblClickTimeOut),
                                  (p.clicks = 0),
                                  d.lastClickPos.distanceTo(r) <=
                                    t.dblClickDistThreshold &&
                                    !1 ===
                                      t.dblClickHandler({
                                        eventSource: t,
                                        pointerType: h.type,
                                        position: f(h.currentPos, t.element),
                                        shift: i.shiftKey,
                                        isTouchEvent: 'touch' === h.type,
                                        originalEvent: i,
                                        preventDefaultAction: !1,
                                        userData: t.userData,
                                      }) &&
                                    e.cancelEvent(i),
                                  (d.lastClickPos = null)))))
                        : 2 === p.contacts &&
                          t.pinchHandler &&
                          'touch' === h.type &&
                          ((d.pinchGPoints = p.asArray()),
                          (d.lastPinchDist = d.currentPinchDist = d.pinchGPoints[0].currentPos.distanceTo(
                            d.pinchGPoints[1].currentPos
                          )),
                          (d.lastPinchCenter = d.currentPinchCenter = y(
                            d.pinchGPoints[0].currentPos,
                            d.pinchGPoints[1].currentPos
                          ))))
                    : t.releaseHandler &&
                      !1 ===
                        t.releaseHandler({
                          eventSource: t,
                          pointerType: h.type,
                          position: f(r, t.element),
                          buttons: p.buttons,
                          insideElementPressed: h.insideElementPressed,
                          insideElementReleased: h.insideElement,
                          isTouchEvent: 'touch' === h.type,
                          originalEvent: i,
                          preventDefaultAction: !1,
                          userData: t.userData,
                        }) &&
                      e.cancelEvent(i))
            return m
          }
          function fe(t, i, n) {
            var o,
              r,
              s,
              a,
              c,
              h = l[t.hash],
              u = t.getActivePointersListByType(n[0].type),
              d = n.length
            for (
              void 0 !== i.buttons && (u.buttons = i.buttons), o = 0;
              o < d;
              o++
            )
              (r = n[o]),
                (s = u.getById(r.id))
                  ? (Object.prototype.hasOwnProperty.call(r, 'isPrimary') &&
                      (s.isPrimary = r.isPrimary),
                    (s.lastPos = s.currentPos),
                    (s.lastTime = s.currentTime),
                    (s.currentPos = r.currentPos),
                    (s.currentTime = r.currentTime))
                  : ((r.captured = !1),
                    (r.insideElementPressed = !1),
                    (r.insideElement = !0),
                    ue(u, r))
            t.stopHandler &&
              'mouse' === n[0].type &&
              (clearTimeout(t.stopTimeOut),
              (t.stopTimeOut = setTimeout(function () {
                !(function (e, t, i) {
                  e.stopHandler &&
                    e.stopHandler({
                      eventSource: e,
                      pointerType: i,
                      position: v(t, e.element),
                      buttons: e.getActivePointersListByType(i).buttons,
                      isTouchEvent: 'touch' === i,
                      originalEvent: t,
                      preventDefaultAction: !1,
                      userData: e.userData,
                    })
                })(t, i, n[0].type)
              }, t.stopDelay))),
              0 === u.contacts
                ? t.moveHandler &&
                  !1 ===
                    t.moveHandler({
                      eventSource: t,
                      pointerType: n[0].type,
                      position: f(n[0].currentPos, t.element),
                      buttons: u.buttons,
                      isTouchEvent: 'touch' === n[0].type,
                      originalEvent: i,
                      preventDefaultAction: !1,
                      userData: t.userData,
                    }) &&
                  e.cancelEvent(i)
                : 1 === u.contacts
                ? (t.moveHandler &&
                    ((s = u.asArray()[0]),
                    !1 ===
                      t.moveHandler({
                        eventSource: t,
                        pointerType: s.type,
                        position: f(s.currentPos, t.element),
                        buttons: u.buttons,
                        isTouchEvent: 'touch' === s.type,
                        originalEvent: i,
                        preventDefaultAction: !1,
                        userData: t.userData,
                      }) && e.cancelEvent(i)),
                  t.dragHandler &&
                    ((c = (s = u.asArray()[0]).currentPos.minus(s.lastPos)),
                    !1 ===
                      t.dragHandler({
                        eventSource: t,
                        pointerType: s.type,
                        position: f(s.currentPos, t.element),
                        buttons: u.buttons,
                        delta: c,
                        speed: s.speed,
                        direction: s.direction,
                        shift: i.shiftKey,
                        isTouchEvent: 'touch' === s.type,
                        originalEvent: i,
                        preventDefaultAction: !1,
                        userData: t.userData,
                      }) && e.cancelEvent(i)))
                : 2 === u.contacts &&
                  (t.moveHandler &&
                    ((a = u.asArray()),
                    !1 ===
                      t.moveHandler({
                        eventSource: t,
                        pointerType: a[0].type,
                        position: f(
                          y(a[0].currentPos, a[1].currentPos),
                          t.element
                        ),
                        buttons: u.buttons,
                        isTouchEvent: 'touch' === a[0].type,
                        originalEvent: i,
                        preventDefaultAction: !1,
                        userData: t.userData,
                      }) && e.cancelEvent(i)),
                  t.pinchHandler &&
                    'touch' === n[0].type &&
                    (c = h.pinchGPoints[0].currentPos.distanceTo(
                      h.pinchGPoints[1].currentPos
                    )) != h.currentPinchDist &&
                    ((h.lastPinchDist = h.currentPinchDist),
                    (h.currentPinchDist = c),
                    (h.lastPinchCenter = h.currentPinchCenter),
                    (h.currentPinchCenter = y(
                      h.pinchGPoints[0].currentPos,
                      h.pinchGPoints[1].currentPos
                    )),
                    !1 ===
                      t.pinchHandler({
                        eventSource: t,
                        pointerType: 'touch',
                        gesturePoints: h.pinchGPoints,
                        lastCenter: f(h.lastPinchCenter, t.element),
                        center: f(h.currentPinchCenter, t.element),
                        lastDistance: h.lastPinchDist,
                        distance: h.currentPinchDist,
                        shift: i.shiftKey,
                        originalEvent: i,
                        preventDefaultAction: !1,
                        userData: t.userData,
                      }) && e.cancelEvent(i)))
          }
          ;(e.MouseTracker = function (t) {
            a.push(this)
            var i = arguments
            e.isPlainObject(t) ||
              (t = {
                element: i[0],
                clickTimeThreshold: i[1],
                clickDistThreshold: i[2],
              }),
              (this.hash = Math.random()),
              (this.element = e.getElement(t.element)),
              (this.clickTimeThreshold =
                t.clickTimeThreshold || e.DEFAULT_SETTINGS.clickTimeThreshold),
              (this.clickDistThreshold =
                t.clickDistThreshold || e.DEFAULT_SETTINGS.clickDistThreshold),
              (this.dblClickTimeThreshold =
                t.dblClickTimeThreshold ||
                e.DEFAULT_SETTINGS.dblClickTimeThreshold),
              (this.dblClickDistThreshold =
                t.dblClickDistThreshold ||
                e.DEFAULT_SETTINGS.dblClickDistThreshold),
              (this.userData = t.userData || null),
              (this.stopDelay = t.stopDelay || 50),
              (this.enterHandler = t.enterHandler || null),
              (this.exitHandler = t.exitHandler || null),
              (this.pressHandler = t.pressHandler || null),
              (this.nonPrimaryPressHandler = t.nonPrimaryPressHandler || null),
              (this.releaseHandler = t.releaseHandler || null),
              (this.nonPrimaryReleaseHandler =
                t.nonPrimaryReleaseHandler || null),
              (this.moveHandler = t.moveHandler || null),
              (this.scrollHandler = t.scrollHandler || null),
              (this.clickHandler = t.clickHandler || null),
              (this.dblClickHandler = t.dblClickHandler || null),
              (this.dragHandler = t.dragHandler || null),
              (this.dragEndHandler = t.dragEndHandler || null),
              (this.pinchHandler = t.pinchHandler || null),
              (this.stopHandler = t.stopHandler || null),
              (this.keyDownHandler = t.keyDownHandler || null),
              (this.keyUpHandler = t.keyUpHandler || null),
              (this.keyHandler = t.keyHandler || null),
              (this.focusHandler = t.focusHandler || null),
              (this.blurHandler = t.blurHandler || null)
            var n = this
            ;(l[this.hash] = {
              click: function (e) {
                w(n, e)
              },
              dblclick: function (e) {
                T(n, e)
              },
              keydown: function (e) {
                x(n, e)
              },
              keyup: function (e) {
                _(n, e)
              },
              keypress: function (e) {
                S(n, e)
              },
              focus: function (e) {
                E(n, e)
              },
              blur: function (e) {
                P(n, e)
              },
              wheel: function (e) {
                b(n, e)
              },
              mousewheel: function (e) {
                R(n, e)
              },
              DOMMouseScroll: function (e) {
                R(n, e)
              },
              MozMousePixelScroll: function (e) {
                R(n, e)
              },
              mouseenter: function (e) {
                O(n, e)
              },
              mouseleave: function (e) {
                B(n, e)
              },
              mouseover: function (e) {
                I(n, e)
              },
              mouseout: function (e) {
                L(n, e)
              },
              mousedown: function (e) {
                M(n, e)
              },
              mouseup: function (e) {
                F(n, e)
              },
              mouseupcaptured: function (e) {
                N(n, e)
              },
              mousemove: function (e) {
                $(n, e)
              },
              mousemovecaptured: function (e) {
                j(n, e)
              },
              touchstart: function (e) {
                V(n, e)
              },
              touchend: function (e) {
                G(n, e)
              },
              touchendcaptured: function (e) {
                q(n, e)
              },
              touchmove: function (e) {
                X(n, e)
              },
              touchmovecaptured: function (e) {
                K(n, e)
              },
              touchcancel: function (e) {
                Q(n, e)
              },
              gesturestart: function (e) {
                J(n, e)
              },
              gesturechange: function (e) {
                ee(n, e)
              },
              pointerover: function (e) {
                te(n, e)
              },
              MSPointerOver: function (e) {
                te(n, e)
              },
              pointerout: function (e) {
                ie(n, e)
              },
              MSPointerOut: function (e) {
                ie(n, e)
              },
              pointerdown: function (e) {
                ne(n, e)
              },
              MSPointerDown: function (e) {
                ne(n, e)
              },
              pointerup: function (e) {
                oe(n, e)
              },
              MSPointerUp: function (e) {
                oe(n, e)
              },
              pointermove: function (e) {
                ae(n, e)
              },
              MSPointerMove: function (e) {
                ae(n, e)
              },
              pointercancel: function (e) {
                he(n, e)
              },
              MSPointerCancel: function (e) {
                he(n, e)
              },
              pointerupcaptured: function (e) {
                re(n, e)
              },
              pointermovecaptured: function (e) {
                le(n, e)
              },
              tracking: !1,
              activePointersLists: [],
              lastClickPos: null,
              dblClickTimeOut: null,
              pinchGPoints: [],
              lastPinchDist: 0,
              currentPinchDist: 0,
              lastPinchCenter: null,
              currentPinchCenter: null,
            }),
              t.startDisabled || this.setTracking(!0)
          }),
            (e.MouseTracker.prototype = {
              destroy: function () {
                var e
                for (h(this), this.element = null, e = 0; e < a.length; e++)
                  if (a[e] === this) {
                    a.splice(e, 1)
                    break
                  }
                ;(l[this.hash] = null), delete l[this.hash]
              },
              isTracking: function () {
                return l[this.hash].tracking
              },
              setTracking: function (t) {
                return (
                  t
                    ? (function (t) {
                        var i,
                          n,
                          o = l[t.hash]
                        if (!o.tracking) {
                          for (
                            n = 0;
                            n < e.MouseTracker.subscribeEvents.length;
                            n++
                          )
                            (i = e.MouseTracker.subscribeEvents[n]),
                              e.addEvent(t.element, i, o[i], !1)
                          c(t), (o.tracking = !0)
                        }
                      })(this)
                    : h(this),
                  this
                )
              },
              getActivePointersListsExceptType: function (e) {
                for (
                  var t = l[this.hash], i = [], n = 0;
                  n < t.activePointersLists.length;
                  ++n
                )
                  t.activePointersLists[n].type !== e &&
                    i.push(t.activePointersLists[n])
                return i
              },
              getActivePointersListByType: function (t) {
                var i,
                  n,
                  o = l[this.hash],
                  r = o.activePointersLists.length
                for (i = 0; i < r; i++)
                  if (o.activePointersLists[i].type === t)
                    return o.activePointersLists[i]
                return (
                  (n = new e.MouseTracker.GesturePointList(t)),
                  o.activePointersLists.push(n),
                  n
                )
              },
              getActivePointerCount: function () {
                var e,
                  t = l[this.hash],
                  i = t.activePointersLists.length,
                  n = 0
                for (e = 0; e < i; e++)
                  n += t.activePointersLists[e].getLength()
                return n
              },
              enterHandler: function () {},
              exitHandler: function () {},
              pressHandler: function () {},
              nonPrimaryPressHandler: function () {},
              releaseHandler: function () {},
              nonPrimaryReleaseHandler: function () {},
              moveHandler: function () {},
              scrollHandler: function () {},
              clickHandler: function () {},
              dblClickHandler: function () {},
              dragHandler: function () {},
              dragEndHandler: function () {},
              pinchHandler: function () {},
              stopHandler: function () {},
              keyDownHandler: function () {},
              keyUpHandler: function () {},
              keyHandler: function () {},
              focusHandler: function () {},
              blurHandler: function () {},
            }),
            (e.MouseTracker.resetAllMouseTrackers = function () {
              for (var e = 0; e < a.length; e++)
                a[e].isTracking() &&
                  (a[e].setTracking(!1), a[e].setTracking(!0))
            }),
            (e.MouseTracker.gesturePointVelocityTracker =
              ((t = []),
              (i = 0),
              (n = 0),
              (o = function (e, t) {
                return e.hash.toString() + t.type + t.id.toString()
              }),
              (r = function () {
                var i,
                  o,
                  r,
                  s,
                  a,
                  l,
                  c = t.length,
                  h = e.now()
                for (s = h - n, n = h, i = 0; i < c; i++)
                  ((r = (o = t[i]).gPoint).direction = Math.atan2(
                    r.currentPos.y - o.lastPos.y,
                    r.currentPos.x - o.lastPos.x
                  )),
                    (a = o.lastPos.distanceTo(r.currentPos)),
                    (o.lastPos = r.currentPos),
                    (l = (1e3 * a) / (s + 1)),
                    (r.speed = 0.75 * l + 0.25 * r.speed)
              }),
              {
                addPoint: function (s, a) {
                  var l = o(s, a)
                  t.push({ guid: l, gPoint: a, lastPos: a.currentPos }),
                    1 === t.length &&
                      ((n = e.now()), (i = window.setInterval(r, 50)))
                },
                removePoint: function (e, n) {
                  var r,
                    s = o(e, n),
                    a = t.length
                  for (r = 0; r < a; r++)
                    if (t[r].guid === s) {
                      t.splice(r, 1), 0 == --a && window.clearInterval(i)
                      break
                    }
                },
              })),
            (e.MouseTracker.captureElement = document),
            (e.MouseTracker.wheelEventName =
              (e.Browser.vendor == e.BROWSERS.IE && e.Browser.version > 8) ||
              'onwheel' in document.createElement('div')
                ? 'wheel'
                : void 0 !== document.onmousewheel
                ? 'mousewheel'
                : 'DOMMouseScroll'),
            (e.MouseTracker.supportsMouseCapture =
              ((s = document.createElement('div')),
              e.isFunction(s.setCapture) && e.isFunction(s.releaseCapture))),
            (e.MouseTracker.subscribeEvents = [
              'click',
              'dblclick',
              'keydown',
              'keyup',
              'keypress',
              'focus',
              'blur',
              e.MouseTracker.wheelEventName,
            ]),
            'DOMMouseScroll' == e.MouseTracker.wheelEventName &&
              e.MouseTracker.subscribeEvents.push('MozMousePixelScroll'),
            window.PointerEvent &&
            (window.navigator.pointerEnabled ||
              e.Browser.vendor !== e.BROWSERS.IE)
              ? ((e.MouseTracker.havePointerEvents = !0),
                e.MouseTracker.subscribeEvents.push(
                  'pointerover',
                  'pointerout',
                  'pointerdown',
                  'pointerup',
                  'pointermove',
                  'pointercancel'
                ),
                (e.MouseTracker.unprefixedPointerEvents = !0),
                navigator.maxTouchPoints
                  ? (e.MouseTracker.maxTouchPoints = navigator.maxTouchPoints)
                  : (e.MouseTracker.maxTouchPoints = 0),
                (e.MouseTracker.haveMouseEnter = !1))
              : window.MSPointerEvent && window.navigator.msPointerEnabled
              ? ((e.MouseTracker.havePointerEvents = !0),
                e.MouseTracker.subscribeEvents.push(
                  'MSPointerOver',
                  'MSPointerOut',
                  'MSPointerDown',
                  'MSPointerUp',
                  'MSPointerMove',
                  'MSPointerCancel'
                ),
                (e.MouseTracker.unprefixedPointerEvents = !1),
                navigator.msMaxTouchPoints
                  ? (e.MouseTracker.maxTouchPoints = navigator.msMaxTouchPoints)
                  : (e.MouseTracker.maxTouchPoints = 0),
                (e.MouseTracker.haveMouseEnter = !1))
              : ((e.MouseTracker.havePointerEvents = !1),
                e.Browser.vendor === e.BROWSERS.IE && e.Browser.version < 9
                  ? (e.MouseTracker.subscribeEvents.push(
                      'mouseenter',
                      'mouseleave'
                    ),
                    (e.MouseTracker.haveMouseEnter = !0))
                  : (e.MouseTracker.subscribeEvents.push(
                      'mouseover',
                      'mouseout'
                    ),
                    (e.MouseTracker.haveMouseEnter = !1)),
                e.MouseTracker.subscribeEvents.push(
                  'mousedown',
                  'mouseup',
                  'mousemove'
                ),
                'ontouchstart' in window &&
                  e.MouseTracker.subscribeEvents.push(
                    'touchstart',
                    'touchend',
                    'touchmove',
                    'touchcancel'
                  ),
                'ongesturestart' in window &&
                  e.MouseTracker.subscribeEvents.push(
                    'gesturestart',
                    'gesturechange'
                  ),
                (e.MouseTracker.mousePointerId = 'legacy-mouse'),
                (e.MouseTracker.maxTouchPoints = 10)),
            (e.MouseTracker.GesturePointList = function (e) {
              ;(this._gPoints = []),
                (this.type = e),
                (this.buttons = 0),
                (this.contacts = 0),
                (this.clicks = 0),
                (this.captureCount = 0)
            }),
            (e.MouseTracker.GesturePointList.prototype = {
              getLength: function () {
                return this._gPoints.length
              },
              asArray: function () {
                return this._gPoints
              },
              add: function (e) {
                return this._gPoints.push(e)
              },
              removeById: function (e) {
                var t,
                  i = this._gPoints.length
                for (t = 0; t < i; t++)
                  if (this._gPoints[t].id === e) {
                    this._gPoints.splice(t, 1)
                    break
                  }
                return this._gPoints.length
              },
              getByIndex: function (e) {
                return e < this._gPoints.length ? this._gPoints[e] : null
              },
              getById: function (e) {
                var t,
                  i = this._gPoints.length
                for (t = 0; t < i; t++)
                  if (this._gPoints[t].id === e) return this._gPoints[t]
                return null
              },
              getPrimary: function (e) {
                var t,
                  i = this._gPoints.length
                for (t = 0; t < i; t++)
                  if (this._gPoints[t].isPrimary) return this._gPoints[t]
                return null
              },
              addContact: function () {
                ++this.contacts,
                  this.contacts > 1 &&
                    ('mouse' === this.type || 'pen' === this.type) &&
                    (this.contacts = 1)
              },
              removeContact: function () {
                --this.contacts, this.contacts < 0 && (this.contacts = 0)
              },
            })
          var ye = (function () {
            try {
              return window.self !== window.top
            } catch (e) {
              return !0
            }
          })()
          function we(e) {
            try {
              return e.addEventListener && e.removeEventListener
            } catch (e) {
              return !1
            }
          }
        })(OpenSeadragon),
        (function (e) {
          ;(e.ControlAnchor = {
            NONE: 0,
            TOP_LEFT: 1,
            TOP_RIGHT: 2,
            BOTTOM_RIGHT: 3,
            BOTTOM_LEFT: 4,
            ABSOLUTE: 5,
          }),
            (e.Control = function (t, i, n) {
              var o = t.parentNode
              'number' == typeof i &&
                (e.console.error(
                  'Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; please use an options object instead.  Support for this deprecated variant is scheduled for removal in December 2013'
                ),
                (i = { anchor: i })),
                (i.attachToViewer =
                  void 0 === i.attachToViewer || i.attachToViewer),
                (this.autoFade = void 0 === i.autoFade || i.autoFade),
                (this.element = t),
                (this.anchor = i.anchor),
                (this.container = n),
                this.anchor == e.ControlAnchor.ABSOLUTE
                  ? ((this.wrapper = e.makeNeutralElement('div')),
                    (this.wrapper.style.position = 'absolute'),
                    (this.wrapper.style.top =
                      'number' == typeof i.top ? i.top + 'px' : i.top),
                    (this.wrapper.style.left =
                      'number' == typeof i.left ? i.left + 'px' : i.left),
                    (this.wrapper.style.height =
                      'number' == typeof i.height ? i.height + 'px' : i.height),
                    (this.wrapper.style.width =
                      'number' == typeof i.width ? i.width + 'px' : i.width),
                    (this.wrapper.style.margin = '0px'),
                    (this.wrapper.style.padding = '0px'),
                    (this.element.style.position = 'relative'),
                    (this.element.style.top = '0px'),
                    (this.element.style.left = '0px'),
                    (this.element.style.height = '100%'),
                    (this.element.style.width = '100%'))
                  : ((this.wrapper = e.makeNeutralElement('div')),
                    (this.wrapper.style.display = 'inline-block'),
                    this.anchor == e.ControlAnchor.NONE &&
                      (this.wrapper.style.width = this.wrapper.style.height =
                        '100%')),
                this.wrapper.appendChild(this.element),
                i.attachToViewer
                  ? this.anchor == e.ControlAnchor.TOP_RIGHT ||
                    this.anchor == e.ControlAnchor.BOTTOM_RIGHT
                    ? this.container.insertBefore(
                        this.wrapper,
                        this.container.firstChild
                      )
                    : this.container.appendChild(this.wrapper)
                  : o.appendChild(this.wrapper)
            }),
            (e.Control.prototype = {
              destroy: function () {
                this.wrapper.removeChild(this.element),
                  this.container.removeChild(this.wrapper)
              },
              isVisible: function () {
                return 'none' != this.wrapper.style.display
              },
              setVisible: function (t) {
                this.wrapper.style.display = t
                  ? this.anchor == e.ControlAnchor.ABSOLUTE
                    ? 'block'
                    : 'inline-block'
                  : 'none'
              },
              setOpacity: function (t) {
                this.element[e.SIGNAL] && e.Browser.vendor == e.BROWSERS.IE
                  ? e.setElementOpacity(this.element, t, !0)
                  : e.setElementOpacity(this.wrapper, t, !0)
              },
            })
        })(OpenSeadragon),
        (function (e) {
          function t(e, t) {
            var i,
              n = e.controls
            for (i = n.length - 1; i >= 0; i--) if (n[i].element == t) return i
            return -1
          }
          ;(e.ControlDock = function (t) {
            var i,
              n,
              o = ['topleft', 'topright', 'bottomright', 'bottomleft']
            for (
              e.extend(
                !0,
                this,
                {
                  id:
                    'controldock-' +
                    e.now() +
                    '-' +
                    Math.floor(1e6 * Math.random()),
                  container: e.makeNeutralElement('div'),
                  controls: [],
                },
                t
              ),
                this.container.onsubmit = function () {
                  return !1
                },
                this.element &&
                  ((this.element = e.getElement(this.element)),
                  this.element.appendChild(this.container),
                  (this.element.style.position = 'relative'),
                  (this.container.style.width = '100%'),
                  (this.container.style.height = '100%')),
                n = 0;
              n < o.length;
              n++
            )
              (i = o[n]),
                (this.controls[i] = e.makeNeutralElement('div')),
                (this.controls[i].style.position = 'absolute'),
                i.match('left') && (this.controls[i].style.left = '0px'),
                i.match('right') && (this.controls[i].style.right = '0px'),
                i.match('top') && (this.controls[i].style.top = '0px'),
                i.match('bottom') && (this.controls[i].style.bottom = '0px')
            this.container.appendChild(this.controls.topleft),
              this.container.appendChild(this.controls.topright),
              this.container.appendChild(this.controls.bottomright),
              this.container.appendChild(this.controls.bottomleft)
          }),
            (e.ControlDock.prototype = {
              addControl: function (i, n) {
                var o = null
                if (!(t(this, (i = e.getElement(i))) >= 0)) {
                  switch (n.anchor) {
                    case e.ControlAnchor.TOP_RIGHT:
                      ;(o = this.controls.topright),
                        (i.style.position = 'relative'),
                        (i.style.paddingRight = '0px'),
                        (i.style.paddingTop = '0px')
                      break
                    case e.ControlAnchor.BOTTOM_RIGHT:
                      ;(o = this.controls.bottomright),
                        (i.style.position = 'relative'),
                        (i.style.paddingRight = '0px'),
                        (i.style.paddingBottom = '0px')
                      break
                    case e.ControlAnchor.BOTTOM_LEFT:
                      ;(o = this.controls.bottomleft),
                        (i.style.position = 'relative'),
                        (i.style.paddingLeft = '0px'),
                        (i.style.paddingBottom = '0px')
                      break
                    case e.ControlAnchor.TOP_LEFT:
                      ;(o = this.controls.topleft),
                        (i.style.position = 'relative'),
                        (i.style.paddingLeft = '0px'),
                        (i.style.paddingTop = '0px')
                      break
                    case e.ControlAnchor.ABSOLUTE:
                      ;(o = this.container),
                        (i.style.margin = '0px'),
                        (i.style.padding = '0px')
                      break
                    default:
                    case e.ControlAnchor.NONE:
                      ;(o = this.container),
                        (i.style.margin = '0px'),
                        (i.style.padding = '0px')
                  }
                  this.controls.push(new e.Control(i, n, o)),
                    (i.style.display = 'inline-block')
                }
              },
              removeControl: function (i) {
                var n = t(this, (i = e.getElement(i)))
                return (
                  n >= 0 &&
                    (this.controls[n].destroy(), this.controls.splice(n, 1)),
                  this
                )
              },
              clearControls: function () {
                for (; this.controls.length > 0; ) this.controls.pop().destroy()
                return this
              },
              areControlsEnabled: function () {
                var e
                for (e = this.controls.length - 1; e >= 0; e--)
                  if (this.controls[e].isVisible()) return !0
                return !1
              },
              setControlsEnabled: function (e) {
                var t
                for (t = this.controls.length - 1; t >= 0; t--)
                  this.controls[t].setVisible(e)
                return this
              },
            })
        })(OpenSeadragon),
        (function (e) {
          e.Placement = e.freezeObject({
            CENTER: 0,
            TOP_LEFT: 1,
            TOP: 2,
            TOP_RIGHT: 3,
            RIGHT: 4,
            BOTTOM_RIGHT: 5,
            BOTTOM: 6,
            BOTTOM_LEFT: 7,
            LEFT: 8,
            properties: {
              0: {
                isLeft: !1,
                isHorizontallyCentered: !0,
                isRight: !1,
                isTop: !1,
                isVerticallyCentered: !0,
                isBottom: !1,
              },
              1: {
                isLeft: !0,
                isHorizontallyCentered: !1,
                isRight: !1,
                isTop: !0,
                isVerticallyCentered: !1,
                isBottom: !1,
              },
              2: {
                isLeft: !1,
                isHorizontallyCentered: !0,
                isRight: !1,
                isTop: !0,
                isVerticallyCentered: !1,
                isBottom: !1,
              },
              3: {
                isLeft: !1,
                isHorizontallyCentered: !1,
                isRight: !0,
                isTop: !0,
                isVerticallyCentered: !1,
                isBottom: !1,
              },
              4: {
                isLeft: !1,
                isHorizontallyCentered: !1,
                isRight: !0,
                isTop: !1,
                isVerticallyCentered: !0,
                isBottom: !1,
              },
              5: {
                isLeft: !1,
                isHorizontallyCentered: !1,
                isRight: !0,
                isTop: !1,
                isVerticallyCentered: !1,
                isBottom: !0,
              },
              6: {
                isLeft: !1,
                isHorizontallyCentered: !0,
                isRight: !1,
                isTop: !1,
                isVerticallyCentered: !1,
                isBottom: !0,
              },
              7: {
                isLeft: !0,
                isHorizontallyCentered: !1,
                isRight: !1,
                isTop: !1,
                isVerticallyCentered: !1,
                isBottom: !0,
              },
              8: {
                isLeft: !0,
                isHorizontallyCentered: !1,
                isRight: !1,
                isTop: !1,
                isVerticallyCentered: !0,
                isBottom: !1,
              },
            },
          })
        })(OpenSeadragon),
        (function (e) {
          var t = {},
            i = 1
          function n(t) {
            return (
              (t = e.getElement(t)),
              new e.Point(
                0 === t.clientWidth ? 1 : t.clientWidth,
                0 === t.clientHeight ? 1 : t.clientHeight
              )
            )
          }
          function o(t, i) {
            if (i instanceof e.Overlay) return i
            var n = null
            if (i.element) n = e.getElement(i.element)
            else {
              var o = i.id
                ? i.id
                : 'openseadragon-overlay-' + Math.floor(1e7 * Math.random())
              ;(n = e.getElement(i.id)) ||
                ((n = document.createElement('a')).href = '#/overlay/' + o),
                (n.id = o),
                e.addClass(
                  n,
                  i.className ? i.className : 'openseadragon-overlay'
                )
            }
            var r = i.location,
              s = i.width,
              a = i.height
            if (!r) {
              var l = i.x,
                c = i.y
              if (void 0 !== i.px) {
                var h = t.viewport.imageToViewportRectangle(
                  new e.Rect(i.px, i.py, s || 0, a || 0)
                )
                ;(l = h.x),
                  (c = h.y),
                  (s = void 0 !== s ? h.width : void 0),
                  (a = void 0 !== a ? h.height : void 0)
              }
              r = new e.Point(l, c)
            }
            var u = i.placement
            return (
              u &&
                'string' === e.type(u) &&
                (u = e.Placement[i.placement.toUpperCase()]),
              new e.Overlay({
                element: n,
                location: r,
                placement: u,
                onDraw: i.onDraw,
                checkResize: i.checkResize,
                width: s,
                height: a,
                rotationMode: i.rotationMode,
              })
            )
          }
          function r(e, t) {
            var i
            for (i = e.length - 1; i >= 0; i--) if (e[i].element === t) return i
            return -1
          }
          function s(t, i) {
            return e.requestAnimationFrame(function () {
              i(t)
            })
          }
          function a(t) {
            e.requestAnimationFrame(function () {
              !(function (t) {
                var i, n
                if (t.controlsShouldFade) {
                  for (
                    i =
                      1 -
                      (e.now() - t.controlsFadeBeginTime) /
                        t.controlsFadeLength,
                      i = Math.min(1, i),
                      i = Math.max(0, i),
                      n = t.controls.length - 1;
                    n >= 0;
                    n--
                  )
                    t.controls[n].autoFade && t.controls[n].setOpacity(i)
                  i > 0 && a(t)
                }
              })(t)
            })
          }
          function l(t) {
            t.autoHideControls &&
              ((t.controlsShouldFade = !0),
              (t.controlsFadeBeginTime = e.now() + t.controlsFadeDelay),
              window.setTimeout(function () {
                a(t)
              }, t.controlsFadeDelay))
          }
          function c(e) {
            var t
            for (
              e.controlsShouldFade = !1, t = e.controls.length - 1;
              t >= 0;
              t--
            )
              e.controls[t].setOpacity(1)
          }
          function h() {
            c(this)
          }
          function u() {
            l(this)
          }
          function d(t) {
            var i = {
              originalEvent: t.originalEvent,
              preventDefaultAction: t.preventDefaultAction,
              preventVerticalPan: t.preventVerticalPan,
              preventHorizontalPan: t.preventHorizontalPan,
            }
            if (
              (this.raiseEvent('canvas-key', i),
              i.preventDefaultAction || t.ctrl || t.alt || t.meta)
            )
              return !0
            switch (t.keyCode) {
              case 38:
                return (
                  i.preventVerticalPan ||
                    (t.shift
                      ? this.viewport.zoomBy(1.1)
                      : this.viewport.panBy(
                          this.viewport.deltaPointsFromPixels(
                            new e.Point(0, -this.pixelsPerArrowPress)
                          )
                        ),
                    this.viewport.applyConstraints()),
                  !1
                )
              case 40:
                return (
                  i.preventVerticalPan ||
                    (t.shift
                      ? this.viewport.zoomBy(0.9)
                      : this.viewport.panBy(
                          this.viewport.deltaPointsFromPixels(
                            new e.Point(0, this.pixelsPerArrowPress)
                          )
                        ),
                    this.viewport.applyConstraints()),
                  !1
                )
              case 37:
                return (
                  i.preventHorizontalPan ||
                    (this.viewport.panBy(
                      this.viewport.deltaPointsFromPixels(
                        new e.Point(-this.pixelsPerArrowPress, 0)
                      )
                    ),
                    this.viewport.applyConstraints()),
                  !1
                )
              case 39:
                return (
                  i.preventHorizontalPan ||
                    (this.viewport.panBy(
                      this.viewport.deltaPointsFromPixels(
                        new e.Point(this.pixelsPerArrowPress, 0)
                      )
                    ),
                    this.viewport.applyConstraints()),
                  !1
                )
              default:
                return !0
            }
          }
          function p(t) {
            var i = {
              originalEvent: t.originalEvent,
              preventDefaultAction: t.preventDefaultAction,
              preventVerticalPan: t.preventVerticalPan,
              preventHorizontalPan: t.preventHorizontalPan,
            }
            if (
              (this.raiseEvent('canvas-key', i),
              i.preventDefaultAction || t.ctrl || t.alt || t.meta)
            )
              return !0
            switch (t.keyCode) {
              case 43:
              case 61:
                return (
                  this.viewport.zoomBy(1.1),
                  this.viewport.applyConstraints(),
                  !1
                )
              case 45:
                return (
                  this.viewport.zoomBy(0.9),
                  this.viewport.applyConstraints(),
                  !1
                )
              case 48:
                return (
                  this.viewport.goHome(), this.viewport.applyConstraints(), !1
                )
              case 119:
              case 87:
                return (
                  i.preventVerticalPan ||
                    (t.shift
                      ? this.viewport.zoomBy(1.1)
                      : this.viewport.panBy(
                          this.viewport.deltaPointsFromPixels(
                            new e.Point(0, -40)
                          )
                        ),
                    this.viewport.applyConstraints()),
                  !1
                )
              case 115:
              case 83:
                return (
                  i.preventVerticalPan ||
                    (t.shift
                      ? this.viewport.zoomBy(0.9)
                      : this.viewport.panBy(
                          this.viewport.deltaPointsFromPixels(
                            new e.Point(0, 40)
                          )
                        ),
                    this.viewport.applyConstraints()),
                  !1
                )
              case 97:
                return (
                  i.preventHorizontalPan ||
                    (this.viewport.panBy(
                      this.viewport.deltaPointsFromPixels(new e.Point(-40, 0))
                    ),
                    this.viewport.applyConstraints()),
                  !1
                )
              case 100:
                return (
                  i.preventHorizontalPan ||
                    (this.viewport.panBy(
                      this.viewport.deltaPointsFromPixels(new e.Point(40, 0))
                    ),
                    this.viewport.applyConstraints()),
                  !1
                )
              case 114:
                return (
                  this.viewport.flipped
                    ? this.viewport.setRotation(
                        e.positiveModulo(
                          this.viewport.degrees - this.rotationIncrement,
                          360
                        )
                      )
                    : this.viewport.setRotation(
                        e.positiveModulo(
                          this.viewport.degrees + this.rotationIncrement,
                          360
                        )
                      ),
                  this.viewport.applyConstraints(),
                  !1
                )
              case 82:
                return (
                  this.viewport.flipped
                    ? this.viewport.setRotation(
                        e.positiveModulo(
                          this.viewport.degrees + this.rotationIncrement,
                          360
                        )
                      )
                    : this.viewport.setRotation(
                        e.positiveModulo(
                          this.viewport.degrees - this.rotationIncrement,
                          360
                        )
                      ),
                  this.viewport.applyConstraints(),
                  !1
                )
              case 102:
                return this.viewport.toggleFlip(), !1
              default:
                return !0
            }
          }
          function g(e) {
            var t
            document.activeElement == this.canvas || this.canvas.focus(),
              this.viewport.flipped &&
                (e.position.x =
                  this.viewport.getContainerSize().x - e.position.x)
            var i = {
              tracker: e.eventSource,
              position: e.position,
              quick: e.quick,
              shift: e.shift,
              originalEvent: e.originalEvent,
              preventDefaultAction: e.preventDefaultAction,
            }
            this.raiseEvent('canvas-click', i),
              !i.preventDefaultAction &&
                this.viewport &&
                e.quick &&
                (t = this.gestureSettingsByDeviceType(e.pointerType))
                  .clickToZoom &&
                (this.viewport.zoomBy(
                  e.shift ? 1 / this.zoomPerClick : this.zoomPerClick,
                  t.zoomToRefPoint
                    ? this.viewport.pointFromPixel(e.position, !0)
                    : null
                ),
                this.viewport.applyConstraints())
          }
          function m(e) {
            var t,
              i = {
                tracker: e.eventSource,
                position: e.position,
                shift: e.shift,
                originalEvent: e.originalEvent,
                preventDefaultAction: e.preventDefaultAction,
              }
            this.raiseEvent('canvas-double-click', i),
              !i.preventDefaultAction &&
                this.viewport &&
                (t = this.gestureSettingsByDeviceType(e.pointerType))
                  .dblClickToZoom &&
                (this.viewport.zoomBy(
                  e.shift ? 1 / this.zoomPerClick : this.zoomPerClick,
                  t.zoomToRefPoint
                    ? this.viewport.pointFromPixel(e.position, !0)
                    : null
                ),
                this.viewport.applyConstraints())
          }
          function v(e) {
            var t,
              i = {
                tracker: e.eventSource,
                position: e.position,
                delta: e.delta,
                speed: e.speed,
                direction: e.direction,
                shift: e.shift,
                originalEvent: e.originalEvent,
                preventDefaultAction: e.preventDefaultAction,
              }
            if (
              (this.raiseEvent('canvas-drag', i),
              !i.preventDefaultAction && this.viewport)
            ) {
              if (
                ((t = this.gestureSettingsByDeviceType(e.pointerType)),
                this.panHorizontal || (e.delta.x = 0),
                this.panVertical || (e.delta.y = 0),
                this.viewport.flipped && (e.delta.x = -e.delta.x),
                this.constrainDuringPan)
              ) {
                var n = this.viewport.deltaPointsFromPixels(e.delta.negate())
                ;(this.viewport.centerSpringX.target.value += n.x),
                  (this.viewport.centerSpringY.target.value += n.y)
                var o = this.viewport.getBounds(),
                  r = this.viewport.getConstrainedBounds()
                ;(this.viewport.centerSpringX.target.value -= n.x),
                  (this.viewport.centerSpringY.target.value -= n.y),
                  o.x != r.x && (e.delta.x = 0),
                  o.y != r.y && (e.delta.y = 0)
              }
              this.viewport.panBy(
                this.viewport.deltaPointsFromPixels(e.delta.negate()),
                t.flickEnabled && !this.constrainDuringPan
              )
            }
          }
          function f(t) {
            if (!t.preventDefaultAction && this.viewport) {
              var i = this.gestureSettingsByDeviceType(t.pointerType)
              if (i.flickEnabled && t.speed >= i.flickMinSpeed) {
                var n = 0
                this.panHorizontal &&
                  (n = i.flickMomentum * t.speed * Math.cos(t.direction))
                var o = 0
                this.panVertical &&
                  (o = i.flickMomentum * t.speed * Math.sin(t.direction))
                var r = this.viewport.pixelFromPoint(
                    this.viewport.getCenter(!0)
                  ),
                  s = this.viewport.pointFromPixel(
                    new e.Point(r.x - n, r.y - o)
                  )
                this.viewport.panTo(s, !1)
              }
              this.viewport.applyConstraints()
            }
            this.raiseEvent('canvas-drag-end', {
              tracker: t.eventSource,
              position: t.position,
              speed: t.speed,
              direction: t.direction,
              shift: t.shift,
              originalEvent: t.originalEvent,
            })
          }
          function y(e) {
            this.raiseEvent('canvas-enter', {
              tracker: e.eventSource,
              pointerType: e.pointerType,
              position: e.position,
              buttons: e.buttons,
              pointers: e.pointers,
              insideElementPressed: e.insideElementPressed,
              buttonDownAny: e.buttonDownAny,
              originalEvent: e.originalEvent,
            })
          }
          function w(t) {
            window.location != window.parent.location &&
              e.MouseTracker.resetAllMouseTrackers(),
              this.raiseEvent('canvas-exit', {
                tracker: t.eventSource,
                pointerType: t.pointerType,
                position: t.position,
                buttons: t.buttons,
                pointers: t.pointers,
                insideElementPressed: t.insideElementPressed,
                buttonDownAny: t.buttonDownAny,
                originalEvent: t.originalEvent,
              })
          }
          function T(e) {
            this.raiseEvent('canvas-press', {
              tracker: e.eventSource,
              pointerType: e.pointerType,
              position: e.position,
              insideElementPressed: e.insideElementPressed,
              insideElementReleased: e.insideElementReleased,
              originalEvent: e.originalEvent,
            })
          }
          function x(e) {
            this.raiseEvent('canvas-release', {
              tracker: e.eventSource,
              pointerType: e.pointerType,
              position: e.position,
              insideElementPressed: e.insideElementPressed,
              insideElementReleased: e.insideElementReleased,
              originalEvent: e.originalEvent,
            })
          }
          function _(e) {
            this.raiseEvent('canvas-nonprimary-press', {
              tracker: e.eventSource,
              position: e.position,
              pointerType: e.pointerType,
              button: e.button,
              buttons: e.buttons,
              originalEvent: e.originalEvent,
            })
          }
          function S(e) {
            this.raiseEvent('canvas-nonprimary-release', {
              tracker: e.eventSource,
              position: e.position,
              pointerType: e.pointerType,
              button: e.button,
              buttons: e.buttons,
              originalEvent: e.originalEvent,
            })
          }
          function E(e) {
            var t, i, n
            if (
              !e.preventDefaultAction &&
              this.viewport &&
              ((t = this.gestureSettingsByDeviceType(e.pointerType))
                .pinchToZoom &&
                ((i = this.viewport.pointFromPixel(e.center, !0)),
                (n = this.viewport.pointFromPixel(e.lastCenter, !0).minus(i)),
                this.panHorizontal || (n.x = 0),
                this.panVertical || (n.y = 0),
                this.viewport.zoomBy(e.distance / e.lastDistance, i, !0),
                t.zoomToRefPoint && this.viewport.panBy(n, !0),
                this.viewport.applyConstraints()),
              t.pinchRotate)
            ) {
              var o = Math.atan2(
                  e.gesturePoints[0].currentPos.y -
                    e.gesturePoints[1].currentPos.y,
                  e.gesturePoints[0].currentPos.x -
                    e.gesturePoints[1].currentPos.x
                ),
                r = Math.atan2(
                  e.gesturePoints[0].lastPos.y - e.gesturePoints[1].lastPos.y,
                  e.gesturePoints[0].lastPos.x - e.gesturePoints[1].lastPos.x
                )
              this.viewport.setRotation(
                this.viewport.getRotation() + (o - r) * (180 / Math.PI)
              )
            }
            return (
              this.raiseEvent('canvas-pinch', {
                tracker: e.eventSource,
                gesturePoints: e.gesturePoints,
                lastCenter: e.lastCenter,
                center: e.center,
                lastDistance: e.lastDistance,
                distance: e.distance,
                shift: e.shift,
                originalEvent: e.originalEvent,
              }),
              !1
            )
          }
          function P(t) {
            var i, n, o
            if (
              (o = e.now()) - this._lastScrollTime >
              this.minScrollDeltaTime
            ) {
              if (
                ((this._lastScrollTime = o),
                this.viewport.flipped &&
                  (t.position.x =
                    this.viewport.getContainerSize().x - t.position.x),
                !t.preventDefaultAction &&
                  this.viewport &&
                  (i = this.gestureSettingsByDeviceType(t.pointerType))
                    .scrollToZoom &&
                  ((n = Math.pow(this.zoomPerScroll, t.scroll)),
                  this.viewport.zoomBy(
                    n,
                    i.zoomToRefPoint
                      ? this.viewport.pointFromPixel(t.position, !0)
                      : null
                  ),
                  this.viewport.applyConstraints()),
                this.raiseEvent('canvas-scroll', {
                  tracker: t.eventSource,
                  position: t.position,
                  scroll: t.scroll,
                  shift: t.shift,
                  originalEvent: t.originalEvent,
                }),
                i && i.scrollToZoom)
              )
                return !1
            } else if (
              (i = this.gestureSettingsByDeviceType(t.pointerType)) &&
              i.scrollToZoom
            )
              return !1
          }
          function b(e) {
            ;(t[this.hash].mouseInside = !0),
              c(this),
              this.raiseEvent('container-enter', {
                tracker: e.eventSource,
                position: e.position,
                buttons: e.buttons,
                pointers: e.pointers,
                insideElementPressed: e.insideElementPressed,
                buttonDownAny: e.buttonDownAny,
                originalEvent: e.originalEvent,
              })
          }
          function R(e) {
            e.pointers < 1 &&
              ((t[this.hash].mouseInside = !1),
              t[this.hash].animating || l(this)),
              this.raiseEvent('container-exit', {
                tracker: e.eventSource,
                position: e.position,
                buttons: e.buttons,
                pointers: e.pointers,
                insideElementPressed: e.insideElementPressed,
                buttonDownAny: e.buttonDownAny,
                originalEvent: e.originalEvent,
              })
          }
          function C(e) {
            !(function (e) {
              if (e._opening) return
              if (e.autoResize) {
                var i = n(e.container),
                  o = t[e.hash].prevContainerSize
                if (!i.equals(o)) {
                  var r = e.viewport
                  if (e.preserveImageSizeOnResize) {
                    var s = o.x / i.x,
                      a = r.getZoom() * s,
                      h = r.getCenter()
                    r.resize(i, !1), r.zoomTo(a, null, !0), r.panTo(h, !0)
                  } else {
                    var u = r.getBounds()
                    r.resize(i, !0), r.fitBoundsWithConstraints(u, !0)
                  }
                  ;(t[e.hash].prevContainerSize = i),
                    (t[e.hash].forceRedraw = !0)
                }
              }
              var d = e.viewport.update(),
                p = e.world.update() || d
              d && e.raiseEvent('viewport-change')
              e.referenceStrip && (p = e.referenceStrip.update(e.viewport) || p)
              !t[e.hash].animating &&
                p &&
                (e.raiseEvent('animation-start'), c(e))
              ;(p || t[e.hash].forceRedraw || e.world.needsDraw()) &&
                (!(function (e) {
                  e.imageLoader.clear(),
                    e.drawer.clear(),
                    e.world.draw(),
                    e.raiseEvent('update-viewport', {})
                })(e),
                e._drawOverlays(),
                e.navigator && e.navigator.update(e.viewport),
                (t[e.hash].forceRedraw = !1),
                p && e.raiseEvent('animation'))
              t[e.hash].animating &&
                !p &&
                (e.raiseEvent('animation-finish'),
                t[e.hash].mouseInside || l(e))
              t[e.hash].animating = p
            })(e),
              e.isOpen()
                ? (e._updateRequestId = s(e, C))
                : (e._updateRequestId = !1)
          }
          function k(e, t) {
            return e ? e + t : t
          }
          function O() {
            ;(t[this.hash].lastZoomTime = e.now()),
              (t[this.hash].zoomFactor = this.zoomPerSecond),
              (t[this.hash].zooming = !0),
              B(this)
          }
          function I() {
            ;(t[this.hash].lastZoomTime = e.now()),
              (t[this.hash].zoomFactor = 1 / this.zoomPerSecond),
              (t[this.hash].zooming = !0),
              B(this)
          }
          function D() {
            t[this.hash].zooming = !1
          }
          function B(t) {
            e.requestAnimationFrame(e.delegate(t, L))
          }
          function L() {
            var i, n, o
            t[this.hash].zooming &&
              this.viewport &&
              ((n = (i = e.now()) - t[this.hash].lastZoomTime),
              (o = Math.pow(t[this.hash].zoomFactor, n / 1e3)),
              this.viewport.zoomBy(o),
              this.viewport.applyConstraints(),
              (t[this.hash].lastZoomTime = i),
              B(this))
          }
          function H() {
            this.viewport &&
              ((t[this.hash].zooming = !1),
              this.viewport.zoomBy(this.zoomPerClick / 1),
              this.viewport.applyConstraints())
          }
          function z() {
            this.viewport &&
              ((t[this.hash].zooming = !1),
              this.viewport.zoomBy(1 / this.zoomPerClick),
              this.viewport.applyConstraints())
          }
          function M() {
            this.buttons.emulateEnter(), this.buttons.emulateExit()
          }
          function F() {
            this.viewport && this.viewport.goHome()
          }
          function N() {
            this.isFullPage() && !e.isFullScreen()
              ? this.setFullPage(!1)
              : this.setFullScreen(!this.isFullPage()),
              this.buttons && this.buttons.emulateExit(),
              this.fullPageButton.element.focus(),
              this.viewport && this.viewport.applyConstraints()
          }
          function A() {
            if (this.viewport) {
              var t = this.viewport.getRotation()
              ;(t = this.viewport.flipped
                ? e.positiveModulo(t + this.rotationIncrement, 360)
                : e.positiveModulo(t - this.rotationIncrement, 360)),
                this.viewport.setRotation(t)
            }
          }
          function $() {
            if (this.viewport) {
              var t = this.viewport.getRotation()
              ;(t = this.viewport.flipped
                ? e.positiveModulo(t - this.rotationIncrement, 360)
                : e.positiveModulo(t + this.rotationIncrement, 360)),
                this.viewport.setRotation(t)
            }
          }
          function j() {
            this.viewport.toggleFlip()
          }
          function U() {
            var e = this._sequenceIndex - 1
            this.navPrevNextWrap && e < 0 && (e += this.tileSources.length),
              this.goToPage(e)
          }
          function W() {
            var e = this._sequenceIndex + 1
            this.navPrevNextWrap && e >= this.tileSources.length && (e = 0),
              this.goToPage(e)
          }
          ;(e.Viewer = function (o) {
            var r,
              a,
              c = arguments,
              h = this
            if (
              (e.isPlainObject(o) ||
                (o = {
                  id: c[0],
                  xmlPath: c.length > 1 ? c[1] : void 0,
                  prefixUrl: c.length > 2 ? c[2] : void 0,
                  controls: c.length > 3 ? c[3] : void 0,
                  overlays: c.length > 4 ? c[4] : void 0,
                }),
              o.config && (e.extend(!0, o, o.config), delete o.config),
              e.extend(
                !0,
                this,
                {
                  id: o.id,
                  hash: o.hash || i++,
                  initialPage: 0,
                  element: null,
                  container: null,
                  canvas: null,
                  overlays: [],
                  overlaysContainer: null,
                  previousBody: [],
                  customControls: [],
                  source: null,
                  drawer: null,
                  world: null,
                  viewport: null,
                  navigator: null,
                  collectionViewport: null,
                  collectionDrawer: null,
                  navImages: null,
                  buttons: null,
                  profiler: null,
                },
                e.DEFAULT_SETTINGS,
                o
              ),
              void 0 === this.hash)
            )
              throw new Error(
                'A hash must be defined, either by specifying options.id or options.hash.'
              )
            for (
              void 0 !== t[this.hash] &&
                e.console.warn('Hash ' + this.hash + ' has already been used.'),
                t[this.hash] = {
                  fsBoundsDelta: new e.Point(1, 1),
                  prevContainerSize: null,
                  animating: !1,
                  forceRedraw: !1,
                  mouseInside: !1,
                  group: null,
                  zooming: !1,
                  zoomFactor: null,
                  lastZoomTime: null,
                  fullPage: !1,
                  onfullscreenchange: null,
                },
                this._sequenceIndex = 0,
                this._firstOpen = !0,
                this._updateRequestId = null,
                this._loadQueue = [],
                this.currentOverlays = [],
                this._lastScrollTime = e.now(),
                e.EventSource.call(this),
                this.addHandler('open-failed', function (t) {
                  var i = e.getString(
                    'Errors.OpenFailed',
                    t.eventSource,
                    t.message
                  )
                  h._showMessage(i)
                }),
                e.ControlDock.call(this, o),
                this.xmlPath && (this.tileSources = [this.xmlPath]),
                this.element = this.element || document.getElementById(this.id),
                this.canvas = e.makeNeutralElement('div'),
                this.canvas.className = 'openseadragon-canvas',
                (a = this.canvas.style).width = '100%',
                a.height = '100%',
                a.overflow = 'hidden',
                a.position = 'absolute',
                a.top = '0px',
                a.left = '0px',
                e.setElementTouchActionNone(this.canvas),
                '' !== o.tabIndex &&
                  (this.canvas.tabIndex =
                    void 0 === o.tabIndex ? 0 : o.tabIndex),
                this.container.className = 'openseadragon-container',
                (function (e) {
                  ;(e.width = '100%'),
                    (e.height = '100%'),
                    (e.position = 'relative'),
                    (e.overflow = 'hidden'),
                    (e.left = '0px'),
                    (e.top = '0px'),
                    (e.textAlign = 'left')
                })(this.container.style),
                this.container.insertBefore(
                  this.canvas,
                  this.container.firstChild
                ),
                this.element.appendChild(this.container),
                this.bodyWidth = document.body.style.width,
                this.bodyHeight = document.body.style.height,
                this.bodyOverflow = document.body.style.overflow,
                this.docOverflow = document.documentElement.style.overflow,
                this.innerTracker = new e.MouseTracker({
                  element: this.canvas,
                  startDisabled: !this.mouseNavEnabled,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  dblClickTimeThreshold: this.dblClickTimeThreshold,
                  dblClickDistThreshold: this.dblClickDistThreshold,
                  keyDownHandler: e.delegate(this, d),
                  keyHandler: e.delegate(this, p),
                  clickHandler: e.delegate(this, g),
                  dblClickHandler: e.delegate(this, m),
                  dragHandler: e.delegate(this, v),
                  dragEndHandler: e.delegate(this, f),
                  enterHandler: e.delegate(this, y),
                  exitHandler: e.delegate(this, w),
                  pressHandler: e.delegate(this, T),
                  releaseHandler: e.delegate(this, x),
                  nonPrimaryPressHandler: e.delegate(this, _),
                  nonPrimaryReleaseHandler: e.delegate(this, S),
                  scrollHandler: e.delegate(this, P),
                  pinchHandler: e.delegate(this, E),
                }),
                this.outerTracker = new e.MouseTracker({
                  element: this.container,
                  startDisabled: !this.mouseNavEnabled,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  dblClickTimeThreshold: this.dblClickTimeThreshold,
                  dblClickDistThreshold: this.dblClickDistThreshold,
                  enterHandler: e.delegate(this, b),
                  exitHandler: e.delegate(this, R),
                }),
                this.toolbar &&
                  (this.toolbar = new e.ControlDock({ element: this.toolbar })),
                this.bindStandardControls(),
                t[this.hash].prevContainerSize = n(this.container),
                this.world = new e.World({ viewer: this }),
                this.world.addHandler('add-item', function (e) {
                  ;(h.source = h.world.getItemAt(0).source),
                    (t[h.hash].forceRedraw = !0),
                    h._updateRequestId || (h._updateRequestId = s(h, C))
                }),
                this.world.addHandler('remove-item', function (e) {
                  h.world.getItemCount()
                    ? (h.source = h.world.getItemAt(0).source)
                    : (h.source = null),
                    (t[h.hash].forceRedraw = !0)
                }),
                this.world.addHandler('metrics-change', function (e) {
                  h.viewport &&
                    h.viewport._setContentBounds(
                      h.world.getHomeBounds(),
                      h.world.getContentFactor()
                    )
                }),
                this.world.addHandler('item-index-change', function (e) {
                  h.source = h.world.getItemAt(0).source
                }),
                this.viewport = new e.Viewport({
                  containerSize: t[this.hash].prevContainerSize,
                  springStiffness: this.springStiffness,
                  animationTime: this.animationTime,
                  minZoomImageRatio: this.minZoomImageRatio,
                  maxZoomPixelRatio: this.maxZoomPixelRatio,
                  visibilityRatio: this.visibilityRatio,
                  wrapHorizontal: this.wrapHorizontal,
                  wrapVertical: this.wrapVertical,
                  defaultZoomLevel: this.defaultZoomLevel,
                  minZoomLevel: this.minZoomLevel,
                  maxZoomLevel: this.maxZoomLevel,
                  viewer: this,
                  degrees: this.degrees,
                  flipped: this.flipped,
                  navigatorRotate: this.navigatorRotate,
                  homeFillsViewer: this.homeFillsViewer,
                  margins: this.viewportMargins,
                }),
                this.viewport._setContentBounds(
                  this.world.getHomeBounds(),
                  this.world.getContentFactor()
                ),
                this.imageLoader = new e.ImageLoader({
                  jobLimit: this.imageLoaderLimit,
                  timeout: o.timeout,
                }),
                this.tileCache = new e.TileCache({
                  maxImageCacheCount: this.maxImageCacheCount,
                }),
                this.drawer = new e.Drawer({
                  viewer: this,
                  viewport: this.viewport,
                  element: this.canvas,
                  debugGridColor: this.debugGridColor,
                }),
                this.overlaysContainer = e.makeNeutralElement('div'),
                this.canvas.appendChild(this.overlaysContainer),
                this.drawer.canRotate() ||
                  (this.rotateLeft &&
                    ((r = this.buttons.buttons.indexOf(this.rotateLeft)),
                    this.buttons.buttons.splice(r, 1),
                    this.buttons.element.removeChild(this.rotateLeft.element)),
                  this.rotateRight &&
                    ((r = this.buttons.buttons.indexOf(this.rotateRight)),
                    this.buttons.buttons.splice(r, 1),
                    this.buttons.element.removeChild(
                      this.rotateRight.element
                    ))),
                this.showNavigator &&
                  (this.navigator = new e.Navigator({
                    id: this.navigatorId,
                    position: this.navigatorPosition,
                    sizeRatio: this.navigatorSizeRatio,
                    maintainSizeRatio: this.navigatorMaintainSizeRatio,
                    top: this.navigatorTop,
                    left: this.navigatorLeft,
                    width: this.navigatorWidth,
                    height: this.navigatorHeight,
                    autoResize: this.navigatorAutoResize,
                    autoFade: this.navigatorAutoFade,
                    prefixUrl: this.prefixUrl,
                    viewer: this,
                    navigatorRotate: this.navigatorRotate,
                    background: this.navigatorBackground,
                    opacity: this.navigatorOpacity,
                    borderColor: this.navigatorBorderColor,
                    displayRegionColor: this.navigatorDisplayRegionColor,
                    crossOriginPolicy: this.crossOriginPolicy,
                  })),
                this.sequenceMode && this.bindSequenceControls(),
                this.tileSources && this.open(this.tileSources),
                r = 0;
              r < this.customControls.length;
              r++
            )
              this.addControl(this.customControls[r].id, {
                anchor: this.customControls[r].anchor,
              })
            e.requestAnimationFrame(function () {
              l(h)
            }),
              void 0 === this.imageSmoothingEnabled ||
                this.imageSmoothingEnabled ||
                this.drawer.setImageSmoothingEnabled(this.imageSmoothingEnabled)
          }),
            e.extend(
              e.Viewer.prototype,
              e.EventSource.prototype,
              e.ControlDock.prototype,
              {
                isOpen: function () {
                  return !!this.world.getItemCount()
                },
                openDzi: function (t) {
                  return (
                    e.console.error(
                      '[Viewer.openDzi] this function is deprecated; use Viewer.open() instead.'
                    ),
                    this.open(t)
                  )
                },
                openTileSource: function (t) {
                  return (
                    e.console.error(
                      '[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead.'
                    ),
                    this.open(t)
                  )
                },
                open: function (t, i) {
                  var n = this
                  if ((this.close(), t)) {
                    if (this.sequenceMode && e.isArray(t))
                      return (
                        this.referenceStrip &&
                          (this.referenceStrip.destroy(),
                          (this.referenceStrip = null)),
                        void 0 === i || isNaN(i) || (this.initialPage = i),
                        (this.tileSources = t),
                        (this._sequenceIndex = Math.max(
                          0,
                          Math.min(
                            this.tileSources.length - 1,
                            this.initialPage
                          )
                        )),
                        this.tileSources.length &&
                          (this.open(this.tileSources[this._sequenceIndex]),
                          this.showReferenceStrip && this.addReferenceStrip()),
                        void this._updateSequenceButtons(this._sequenceIndex)
                      )
                    if ((e.isArray(t) || (t = [t]), t.length)) {
                      this._opening = !0
                      for (
                        var r,
                          s = t.length,
                          a = 0,
                          l = 0,
                          c = function () {
                            if (a + l === s)
                              if (a) {
                                ;(!n._firstOpen && n.preserveViewport) ||
                                  (n.viewport.goHome(!0), n.viewport.update()),
                                  (n._firstOpen = !1)
                                var e = t[0]
                                if (
                                  (e.tileSource && (e = e.tileSource),
                                  n.overlays && !n.preserveOverlays)
                                )
                                  for (var i = 0; i < n.overlays.length; i++)
                                    n.currentOverlays[i] = o(n, n.overlays[i])
                                n._drawOverlays(),
                                  (n._opening = !1),
                                  n.raiseEvent('open', { source: e })
                              } else
                                (n._opening = !1),
                                  n.raiseEvent('open-failed', r)
                          },
                          h = function (t) {
                            ;(e.isPlainObject(t) && t.tileSource) ||
                              (t = { tileSource: t }),
                              void 0 !== t.index &&
                                (e.console.error(
                                  '[Viewer.open] setting indexes here is not supported; use addTiledImage instead'
                                ),
                                delete t.index),
                              void 0 === t.collectionImmediately &&
                                (t.collectionImmediately = !0)
                            var i = t.success
                            t.success = function (e) {
                              if ((a++, t.tileSource.overlays))
                                for (
                                  var o = 0;
                                  o < t.tileSource.overlays.length;
                                  o++
                                )
                                  n.addOverlay(t.tileSource.overlays[o])
                              i && i(e), c()
                            }
                            var o = t.error
                            ;(t.error = function (e) {
                              l++, r || (r = e), o && o(e), c()
                            }),
                              n.addTiledImage(t)
                          },
                          u = 0;
                        u < t.length;
                        u++
                      )
                        h(t[u])
                      return this
                    }
                  }
                },
                close: function () {
                  return t[this.hash]
                    ? ((this._opening = !1),
                      this.navigator && this.navigator.close(),
                      this.preserveOverlays ||
                        (this.clearOverlays(),
                        (this.overlaysContainer.innerHTML = '')),
                      (t[this.hash].animating = !1),
                      this.world.removeAll(),
                      this.imageLoader.clear(),
                      this.raiseEvent('close'),
                      this)
                    : this
                },
                destroy: function () {
                  if (t[this.hash]) {
                    if (
                      (this.close(),
                      this.clearOverlays(),
                      (this.overlaysContainer.innerHTML = ''),
                      this.referenceStrip &&
                        (this.referenceStrip.destroy(),
                        (this.referenceStrip = null)),
                      null !== this._updateRequestId &&
                        (e.cancelAnimationFrame(this._updateRequestId),
                        (this._updateRequestId = null)),
                      this.drawer && this.drawer.destroy(),
                      this.removeAllHandlers(),
                      this.element)
                    )
                      for (; this.element.firstChild; )
                        this.element.removeChild(this.element.firstChild)
                    this.innerTracker && this.innerTracker.destroy(),
                      this.outerTracker && this.outerTracker.destroy(),
                      (t[this.hash] = null),
                      delete t[this.hash],
                      (this.canvas = null),
                      (this.container = null),
                      (this.element = null)
                  }
                },
                isMouseNavEnabled: function () {
                  return this.innerTracker.isTracking()
                },
                setMouseNavEnabled: function (e) {
                  return (
                    this.innerTracker.setTracking(e),
                    this.outerTracker.setTracking(e),
                    this.raiseEvent('mouse-enabled', { enabled: e }),
                    this
                  )
                },
                areControlsEnabled: function () {
                  var e,
                    t = this.controls.length
                  for (e = 0; e < this.controls.length; e++)
                    t = t && this.controls[e].isVisible()
                  return t
                },
                setControlsEnabled: function (e) {
                  return (
                    e ? c(this) : l(this),
                    this.raiseEvent('controls-enabled', { enabled: e }),
                    this
                  )
                },
                setDebugMode: function (e) {
                  for (var t = 0; t < this.world.getItemCount(); t++)
                    this.world.getItemAt(t).debugMode = e
                  ;(this.debugMode = e), this.forceRedraw()
                },
                isFullPage: function () {
                  return t[this.hash].fullPage
                },
                setFullPage: function (i) {
                  var n,
                    o,
                    r = document.body,
                    s = r.style,
                    a = document.documentElement.style,
                    l = this
                  if (i == this.isFullPage()) return this
                  var c = { fullPage: i, preventDefaultAction: !1 }
                  if (
                    (this.raiseEvent('pre-full-page', c),
                    c.preventDefaultAction)
                  )
                    return this
                  if (i) {
                    for (
                      this.elementSize = e.getElementSize(this.element),
                        this.pageScroll = e.getPageScroll(),
                        this.elementMargin = this.element.style.margin,
                        this.element.style.margin = '0',
                        this.elementPadding = this.element.style.padding,
                        this.element.style.padding = '0',
                        this.bodyMargin = s.margin,
                        this.docMargin = a.margin,
                        s.margin = '0',
                        a.margin = '0',
                        this.bodyPadding = s.padding,
                        this.docPadding = a.padding,
                        s.padding = '0',
                        a.padding = '0',
                        this.bodyWidth = s.width,
                        this.docWidth = a.width,
                        s.width = '100%',
                        a.width = '100%',
                        this.bodyHeight = s.height,
                        this.docHeight = a.height,
                        s.height = '100%',
                        a.height = '100%',
                        this.previousBody = [],
                        t[
                          this.hash
                        ].prevElementParent = this.element.parentNode,
                        t[this.hash].prevNextSibling = this.element.nextSibling,
                        t[
                          this.hash
                        ].prevElementWidth = this.element.style.width,
                        t[
                          this.hash
                        ].prevElementHeight = this.element.style.height,
                        n = r.childNodes.length,
                        o = 0;
                      o < n;
                      o++
                    )
                      this.previousBody.push(r.childNodes[0]),
                        r.removeChild(r.childNodes[0])
                    this.toolbar &&
                      this.toolbar.element &&
                      ((this.toolbar.parentNode = this.toolbar.element.parentNode),
                      (this.toolbar.nextSibling = this.toolbar.element.nextSibling),
                      r.appendChild(this.toolbar.element),
                      e.addClass(this.toolbar.element, 'fullpage')),
                      e.addClass(this.element, 'fullpage'),
                      r.appendChild(this.element),
                      (this.element.style.height = e.getWindowSize().y + 'px'),
                      (this.element.style.width = e.getWindowSize().x + 'px'),
                      this.toolbar &&
                        this.toolbar.element &&
                        (this.element.style.height =
                          e.getElementSize(this.element).y -
                          e.getElementSize(this.toolbar.element).y +
                          'px'),
                      (t[this.hash].fullPage = !0),
                      e.delegate(this, b)({})
                  } else {
                    for (
                      this.element.style.margin = this.elementMargin,
                        this.element.style.padding = this.elementPadding,
                        s.margin = this.bodyMargin,
                        a.margin = this.docMargin,
                        s.padding = this.bodyPadding,
                        a.padding = this.docPadding,
                        s.width = this.bodyWidth,
                        a.width = this.docWidth,
                        s.height = this.bodyHeight,
                        a.height = this.docHeight,
                        r.removeChild(this.element),
                        n = this.previousBody.length,
                        o = 0;
                      o < n;
                      o++
                    )
                      r.appendChild(this.previousBody.shift())
                    e.removeClass(this.element, 'fullpage'),
                      t[this.hash].prevElementParent.insertBefore(
                        this.element,
                        t[this.hash].prevNextSibling
                      ),
                      this.toolbar &&
                        this.toolbar.element &&
                        (r.removeChild(this.toolbar.element),
                        e.removeClass(this.toolbar.element, 'fullpage'),
                        this.toolbar.parentNode.insertBefore(
                          this.toolbar.element,
                          this.toolbar.nextSibling
                        ),
                        delete this.toolbar.parentNode,
                        delete this.toolbar.nextSibling),
                      (this.element.style.width =
                        t[this.hash].prevElementWidth),
                      (this.element.style.height =
                        t[this.hash].prevElementHeight)
                    var h = 0,
                      u = function () {
                        e.setPageScroll(l.pageScroll)
                        var t = e.getPageScroll()
                        ++h < 10 &&
                          (t.x !== l.pageScroll.x || t.y !== l.pageScroll.y) &&
                          e.requestAnimationFrame(u)
                      }
                    e.requestAnimationFrame(u),
                      (t[this.hash].fullPage = !1),
                      e.delegate(this, R)({})
                  }
                  return (
                    this.navigator &&
                      this.viewport &&
                      this.navigator.update(this.viewport),
                    this.raiseEvent('full-page', { fullPage: i }),
                    this
                  )
                },
                setFullScreen: function (t) {
                  var i = this
                  if (!e.supportsFullScreen) return this.setFullPage(t)
                  if (e.isFullScreen() === t) return this
                  var n = { fullScreen: t, preventDefaultAction: !1 }
                  if (
                    (this.raiseEvent('pre-full-screen', n),
                    n.preventDefaultAction)
                  )
                    return this
                  if (t) {
                    if ((this.setFullPage(!0), !this.isFullPage())) return this
                    ;(this.fullPageStyleWidth = this.element.style.width),
                      (this.fullPageStyleHeight = this.element.style.height),
                      (this.element.style.width = '100%'),
                      (this.element.style.height = '100%')
                    var o = function () {
                      var t = e.isFullScreen()
                      t ||
                        (e.removeEvent(document, e.fullScreenEventName, o),
                        e.removeEvent(document, e.fullScreenErrorEventName, o),
                        i.setFullPage(!1),
                        i.isFullPage() &&
                          ((i.element.style.width = i.fullPageStyleWidth),
                          (i.element.style.height = i.fullPageStyleHeight))),
                        i.navigator &&
                          i.viewport &&
                          setTimeout(function () {
                            i.navigator.update(i.viewport)
                          }),
                        i.raiseEvent('full-screen', { fullScreen: t })
                    }
                    e.addEvent(document, e.fullScreenEventName, o),
                      e.addEvent(document, e.fullScreenErrorEventName, o),
                      e.requestFullScreen(document.body)
                  } else e.exitFullScreen()
                  return this
                },
                isVisible: function () {
                  return 'hidden' != this.container.style.visibility
                },
                setVisible: function (e) {
                  return (
                    (this.container.style.visibility = e ? '' : 'hidden'),
                    this.raiseEvent('visible', { visible: e }),
                    this
                  )
                },
                addTiledImage: function (t) {
                  e.console.assert(
                    t,
                    '[Viewer.addTiledImage] options is required'
                  ),
                    e.console.assert(
                      t.tileSource,
                      '[Viewer.addTiledImage] options.tileSource is required'
                    ),
                    e.console.assert(
                      !t.replace ||
                        (t.index > -1 && t.index < this.world.getItemCount()),
                      '[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world'
                    )
                  var i = this
                  t.replace && (t.replaceItem = i.world.getItemAt(t.index)),
                    this._hideMessage(),
                    void 0 === t.placeholderFillStyle &&
                      (t.placeholderFillStyle = this.placeholderFillStyle),
                    void 0 === t.opacity && (t.opacity = this.opacity),
                    void 0 === t.preload && (t.preload = this.preload),
                    void 0 === t.compositeOperation &&
                      (t.compositeOperation = this.compositeOperation),
                    void 0 === t.crossOriginPolicy &&
                      (t.crossOriginPolicy =
                        void 0 !== t.tileSource.crossOriginPolicy
                          ? t.tileSource.crossOriginPolicy
                          : this.crossOriginPolicy),
                    void 0 === t.ajaxWithCredentials &&
                      (t.ajaxWithCredentials = this.ajaxWithCredentials),
                    void 0 === t.loadTilesWithAjax &&
                      (t.loadTilesWithAjax = this.loadTilesWithAjax),
                    void 0 === t.ajaxHeaders || null === t.ajaxHeaders
                      ? (t.ajaxHeaders = this.ajaxHeaders)
                      : e.isPlainObject(t.ajaxHeaders) &&
                        e.isPlainObject(this.ajaxHeaders) &&
                        (t.ajaxHeaders = e.extend(
                          {},
                          this.ajaxHeaders,
                          t.ajaxHeaders
                        ))
                  var n = { options: t }
                  function o(e) {
                    for (var o = 0; o < i._loadQueue.length; o++)
                      if (i._loadQueue[o] === n) {
                        i._loadQueue.splice(o, 1)
                        break
                      }
                    0 === i._loadQueue.length && r(n),
                      i.raiseEvent('add-item-failed', e),
                      t.error && t.error(e)
                  }
                  function r(e) {
                    i.collectionMode &&
                      (i.world.arrange({
                        immediately: e.options.collectionImmediately,
                        rows: i.collectionRows,
                        columns: i.collectionColumns,
                        layout: i.collectionLayout,
                        tileSize: i.collectionTileSize,
                        tileMargin: i.collectionTileMargin,
                      }),
                      i.world.setAutoRefigureSizes(!0))
                  }
                  function s() {
                    for (
                      var t, n, o;
                      i._loadQueue.length && (t = i._loadQueue[0]).tileSource;

                    ) {
                      if ((i._loadQueue.splice(0, 1), t.options.replace)) {
                        var s = i.world.getIndexOfItem(t.options.replaceItem)
                        ;-1 != s && (t.options.index = s),
                          i.world.removeItem(t.options.replaceItem)
                      }
                      ;(n = new e.TiledImage({
                        viewer: i,
                        source: t.tileSource,
                        viewport: i.viewport,
                        drawer: i.drawer,
                        tileCache: i.tileCache,
                        imageLoader: i.imageLoader,
                        x: t.options.x,
                        y: t.options.y,
                        width: t.options.width,
                        height: t.options.height,
                        fitBounds: t.options.fitBounds,
                        fitBoundsPlacement: t.options.fitBoundsPlacement,
                        clip: t.options.clip,
                        placeholderFillStyle: t.options.placeholderFillStyle,
                        opacity: t.options.opacity,
                        preload: t.options.preload,
                        degrees: t.options.degrees,
                        compositeOperation: t.options.compositeOperation,
                        springStiffness: i.springStiffness,
                        animationTime: i.animationTime,
                        minZoomImageRatio: i.minZoomImageRatio,
                        wrapHorizontal: i.wrapHorizontal,
                        wrapVertical: i.wrapVertical,
                        immediateRender: i.immediateRender,
                        blendTime: i.blendTime,
                        alwaysBlend: i.alwaysBlend,
                        minPixelRatio: i.minPixelRatio,
                        smoothTileEdgesMinZoom: i.smoothTileEdgesMinZoom,
                        iOSDevice: i.iOSDevice,
                        crossOriginPolicy: t.options.crossOriginPolicy,
                        ajaxWithCredentials: t.options.ajaxWithCredentials,
                        loadTilesWithAjax: t.options.loadTilesWithAjax,
                        ajaxHeaders: t.options.ajaxHeaders,
                        debugMode: i.debugMode,
                      })),
                        i.collectionMode && i.world.setAutoRefigureSizes(!1),
                        i.world.addItem(n, { index: t.options.index }),
                        0 === i._loadQueue.length && r(t),
                        1 !== i.world.getItemCount() ||
                          i.preserveViewport ||
                          i.viewport.goHome(!0),
                        i.navigator &&
                          ((o = e.extend({}, t.options, {
                            replace: !1,
                            originalTiledImage: n,
                            tileSource: t.tileSource,
                          })),
                          i.navigator.addTiledImage(o)),
                        t.options.success && t.options.success({ item: n })
                    }
                  }
                  e.isArray(t.tileSource)
                    ? setTimeout(function () {
                        o({
                          message:
                            '[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.',
                          source: t.tileSource,
                          options: t,
                        })
                      })
                    : (this._loadQueue.push(n),
                      (function (t, i, n, o, r) {
                        var s = t
                        if ('string' == e.type(i))
                          if (i.match(/^\s*<.*>\s*$/)) i = e.parseXml(i)
                          else if (i.match(/^\s*[\{\[].*[\}\]]\s*$/))
                            try {
                              var a = e.parseJSON(i)
                              i = a
                            } catch (e) {}
                        function l(e, t) {
                          e.ready
                            ? o(e)
                            : (e.addHandler('ready', function () {
                                o(e)
                              }),
                              e.addHandler('open-failed', function (e) {
                                r({ message: e.message, source: t })
                              }))
                        }
                        setTimeout(function () {
                          if ('string' == e.type(i))
                            (i = new e.TileSource({
                              url: i,
                              crossOriginPolicy:
                                void 0 !== n.crossOriginPolicy
                                  ? n.crossOriginPolicy
                                  : t.crossOriginPolicy,
                              ajaxWithCredentials: t.ajaxWithCredentials,
                              ajaxHeaders: t.ajaxHeaders,
                              useCanvas: t.useCanvas,
                              success: function (e) {
                                o(e.tileSource)
                              },
                            })).addHandler('open-failed', function (e) {
                              r(e)
                            })
                          else if (e.isPlainObject(i) || i.nodeType)
                            if (
                              (void 0 !== i.crossOriginPolicy ||
                                (void 0 === n.crossOriginPolicy &&
                                  void 0 === t.crossOriginPolicy) ||
                                (i.crossOriginPolicy =
                                  void 0 !== n.crossOriginPolicy
                                    ? n.crossOriginPolicy
                                    : t.crossOriginPolicy),
                              void 0 === i.ajaxWithCredentials &&
                                (i.ajaxWithCredentials = t.ajaxWithCredentials),
                              void 0 === i.useCanvas &&
                                (i.useCanvas = t.useCanvas),
                              e.isFunction(i.getTileUrl))
                            ) {
                              var a = new e.TileSource(i)
                              ;(a.getTileUrl = i.getTileUrl), o(a)
                            } else {
                              var c = e.TileSource.determineType(s, i)
                              if (!c)
                                return void r({
                                  message: 'Unable to load TileSource',
                                  source: i,
                                })
                              var h = c.prototype.configure.apply(s, [i])
                              l(new c(h), i)
                            }
                          else l(i, i)
                        })
                      })(
                        this,
                        t.tileSource,
                        t,
                        function (e) {
                          ;(n.tileSource = e), s()
                        },
                        function (e) {
                          ;(e.options = t), o(e), s()
                        }
                      ))
                },
                addSimpleImage: function (t) {
                  e.console.assert(
                    t,
                    '[Viewer.addSimpleImage] options is required'
                  ),
                    e.console.assert(
                      t.url,
                      '[Viewer.addSimpleImage] options.url is required'
                    )
                  var i = e.extend({}, t, {
                    tileSource: { type: 'image', url: t.url },
                  })
                  delete i.url, this.addTiledImage(i)
                },
                addLayer: function (t) {
                  var i = this
                  e.console.error(
                    '[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead.'
                  )
                  var n = e.extend({}, t, {
                    success: function (e) {
                      i.raiseEvent('add-layer', { options: t, drawer: e.item })
                    },
                    error: function (e) {
                      i.raiseEvent('add-layer-failed', e)
                    },
                  })
                  return this.addTiledImage(n), this
                },
                getLayerAtLevel: function (t) {
                  return (
                    e.console.error(
                      '[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead.'
                    ),
                    this.world.getItemAt(t)
                  )
                },
                getLevelOfLayer: function (t) {
                  return (
                    e.console.error(
                      '[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead.'
                    ),
                    this.world.getIndexOfItem(t)
                  )
                },
                getLayersCount: function () {
                  return (
                    e.console.error(
                      '[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead.'
                    ),
                    this.world.getItemCount()
                  )
                },
                setLayerLevel: function (t, i) {
                  return (
                    e.console.error(
                      '[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead.'
                    ),
                    this.world.setItemIndex(t, i)
                  )
                },
                removeLayer: function (t) {
                  return (
                    e.console.error(
                      '[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead.'
                    ),
                    this.world.removeItem(t)
                  )
                },
                forceRedraw: function () {
                  return (t[this.hash].forceRedraw = !0), this
                },
                bindSequenceControls: function () {
                  var t = e.delegate(this, h),
                    i = e.delegate(this, u),
                    n = e.delegate(this, W),
                    o = e.delegate(this, U),
                    r = this.navImages,
                    s = !0
                  return (
                    this.showSequenceControl &&
                      ((this.previousButton || this.nextButton) && (s = !1),
                      (this.previousButton = new e.Button({
                        element: this.previousButton
                          ? e.getElement(this.previousButton)
                          : null,
                        clickTimeThreshold: this.clickTimeThreshold,
                        clickDistThreshold: this.clickDistThreshold,
                        tooltip: e.getString('Tooltips.PreviousPage'),
                        srcRest: k(this.prefixUrl, r.previous.REST),
                        srcGroup: k(this.prefixUrl, r.previous.GROUP),
                        srcHover: k(this.prefixUrl, r.previous.HOVER),
                        srcDown: k(this.prefixUrl, r.previous.DOWN),
                        onRelease: o,
                        onFocus: t,
                        onBlur: i,
                      })),
                      (this.nextButton = new e.Button({
                        element: this.nextButton
                          ? e.getElement(this.nextButton)
                          : null,
                        clickTimeThreshold: this.clickTimeThreshold,
                        clickDistThreshold: this.clickDistThreshold,
                        tooltip: e.getString('Tooltips.NextPage'),
                        srcRest: k(this.prefixUrl, r.next.REST),
                        srcGroup: k(this.prefixUrl, r.next.GROUP),
                        srcHover: k(this.prefixUrl, r.next.HOVER),
                        srcDown: k(this.prefixUrl, r.next.DOWN),
                        onRelease: n,
                        onFocus: t,
                        onBlur: i,
                      })),
                      this.navPrevNextWrap || this.previousButton.disable(),
                      (this.tileSources && this.tileSources.length) ||
                        this.nextButton.disable(),
                      s &&
                        ((this.paging = new e.ButtonGroup({
                          buttons: [this.previousButton, this.nextButton],
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                        })),
                        (this.pagingControl = this.paging.element),
                        this.toolbar
                          ? this.toolbar.addControl(this.pagingControl, {
                              anchor: e.ControlAnchor.BOTTOM_RIGHT,
                            })
                          : this.addControl(this.pagingControl, {
                              anchor:
                                this.sequenceControlAnchor ||
                                e.ControlAnchor.TOP_LEFT,
                            }))),
                    this
                  )
                },
                bindStandardControls: function () {
                  var t = e.delegate(this, O),
                    i = e.delegate(this, D),
                    n = e.delegate(this, H),
                    o = e.delegate(this, I),
                    r = e.delegate(this, z),
                    s = e.delegate(this, F),
                    a = e.delegate(this, N),
                    l = e.delegate(this, A),
                    c = e.delegate(this, $),
                    d = e.delegate(this, j),
                    p = e.delegate(this, h),
                    g = e.delegate(this, u),
                    m = this.navImages,
                    v = [],
                    f = !0
                  return (
                    this.showNavigationControl &&
                      ((this.zoomInButton ||
                        this.zoomOutButton ||
                        this.homeButton ||
                        this.fullPageButton ||
                        this.rotateLeftButton ||
                        this.rotateRightButton ||
                        this.flipButton) &&
                        (f = !1),
                      this.showZoomControl &&
                        (v.push(
                          (this.zoomInButton = new e.Button({
                            element: this.zoomInButton
                              ? e.getElement(this.zoomInButton)
                              : null,
                            clickTimeThreshold: this.clickTimeThreshold,
                            clickDistThreshold: this.clickDistThreshold,
                            tooltip: e.getString('Tooltips.ZoomIn'),
                            srcRest: k(this.prefixUrl, m.zoomIn.REST),
                            srcGroup: k(this.prefixUrl, m.zoomIn.GROUP),
                            srcHover: k(this.prefixUrl, m.zoomIn.HOVER),
                            srcDown: k(this.prefixUrl, m.zoomIn.DOWN),
                            onPress: t,
                            onRelease: i,
                            onClick: n,
                            onEnter: t,
                            onExit: i,
                            onFocus: p,
                            onBlur: g,
                          }))
                        ),
                        v.push(
                          (this.zoomOutButton = new e.Button({
                            element: this.zoomOutButton
                              ? e.getElement(this.zoomOutButton)
                              : null,
                            clickTimeThreshold: this.clickTimeThreshold,
                            clickDistThreshold: this.clickDistThreshold,
                            tooltip: e.getString('Tooltips.ZoomOut'),
                            srcRest: k(this.prefixUrl, m.zoomOut.REST),
                            srcGroup: k(this.prefixUrl, m.zoomOut.GROUP),
                            srcHover: k(this.prefixUrl, m.zoomOut.HOVER),
                            srcDown: k(this.prefixUrl, m.zoomOut.DOWN),
                            onPress: o,
                            onRelease: i,
                            onClick: r,
                            onEnter: o,
                            onExit: i,
                            onFocus: p,
                            onBlur: g,
                          }))
                        )),
                      this.showHomeControl &&
                        v.push(
                          (this.homeButton = new e.Button({
                            element: this.homeButton
                              ? e.getElement(this.homeButton)
                              : null,
                            clickTimeThreshold: this.clickTimeThreshold,
                            clickDistThreshold: this.clickDistThreshold,
                            tooltip: e.getString('Tooltips.Home'),
                            srcRest: k(this.prefixUrl, m.home.REST),
                            srcGroup: k(this.prefixUrl, m.home.GROUP),
                            srcHover: k(this.prefixUrl, m.home.HOVER),
                            srcDown: k(this.prefixUrl, m.home.DOWN),
                            onRelease: s,
                            onFocus: p,
                            onBlur: g,
                          }))
                        ),
                      this.showFullPageControl &&
                        v.push(
                          (this.fullPageButton = new e.Button({
                            element: this.fullPageButton
                              ? e.getElement(this.fullPageButton)
                              : null,
                            clickTimeThreshold: this.clickTimeThreshold,
                            clickDistThreshold: this.clickDistThreshold,
                            tooltip: e.getString('Tooltips.FullPage'),
                            srcRest: k(this.prefixUrl, m.fullpage.REST),
                            srcGroup: k(this.prefixUrl, m.fullpage.GROUP),
                            srcHover: k(this.prefixUrl, m.fullpage.HOVER),
                            srcDown: k(this.prefixUrl, m.fullpage.DOWN),
                            onRelease: a,
                            onFocus: p,
                            onBlur: g,
                          }))
                        ),
                      this.showRotationControl &&
                        (v.push(
                          (this.rotateLeftButton = new e.Button({
                            element: this.rotateLeftButton
                              ? e.getElement(this.rotateLeftButton)
                              : null,
                            clickTimeThreshold: this.clickTimeThreshold,
                            clickDistThreshold: this.clickDistThreshold,
                            tooltip: e.getString('Tooltips.RotateLeft'),
                            srcRest: k(this.prefixUrl, m.rotateleft.REST),
                            srcGroup: k(this.prefixUrl, m.rotateleft.GROUP),
                            srcHover: k(this.prefixUrl, m.rotateleft.HOVER),
                            srcDown: k(this.prefixUrl, m.rotateleft.DOWN),
                            onRelease: l,
                            onFocus: p,
                            onBlur: g,
                          }))
                        ),
                        v.push(
                          (this.rotateRightButton = new e.Button({
                            element: this.rotateRightButton
                              ? e.getElement(this.rotateRightButton)
                              : null,
                            clickTimeThreshold: this.clickTimeThreshold,
                            clickDistThreshold: this.clickDistThreshold,
                            tooltip: e.getString('Tooltips.RotateRight'),
                            srcRest: k(this.prefixUrl, m.rotateright.REST),
                            srcGroup: k(this.prefixUrl, m.rotateright.GROUP),
                            srcHover: k(this.prefixUrl, m.rotateright.HOVER),
                            srcDown: k(this.prefixUrl, m.rotateright.DOWN),
                            onRelease: c,
                            onFocus: p,
                            onBlur: g,
                          }))
                        )),
                      this.showFlipControl &&
                        v.push(
                          (this.flipButton = new e.Button({
                            element: this.flipButton
                              ? e.getElement(this.flipButton)
                              : null,
                            clickTimeThreshold: this.clickTimeThreshold,
                            clickDistThreshold: this.clickDistThreshold,
                            tooltip: e.getString('Tooltips.Flip'),
                            srcRest: k(this.prefixUrl, m.flip.REST),
                            srcGroup: k(this.prefixUrl, m.flip.GROUP),
                            srcHover: k(this.prefixUrl, m.flip.HOVER),
                            srcDown: k(this.prefixUrl, m.flip.DOWN),
                            onRelease: d,
                            onFocus: p,
                            onBlur: g,
                          }))
                        ),
                      f &&
                        ((this.buttons = new e.ButtonGroup({
                          buttons: v,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                        })),
                        (this.navControl = this.buttons.element),
                        this.addHandler('open', e.delegate(this, M)),
                        this.toolbar
                          ? this.toolbar.addControl(this.navControl, {
                              anchor:
                                this.navigationControlAnchor ||
                                e.ControlAnchor.TOP_LEFT,
                            })
                          : this.addControl(this.navControl, {
                              anchor:
                                this.navigationControlAnchor ||
                                e.ControlAnchor.TOP_LEFT,
                            }))),
                    this
                  )
                },
                currentPage: function () {
                  return this._sequenceIndex
                },
                goToPage: function (e) {
                  return (
                    this.tileSources &&
                      e >= 0 &&
                      e < this.tileSources.length &&
                      ((this._sequenceIndex = e),
                      this._updateSequenceButtons(e),
                      this.open(this.tileSources[e]),
                      this.referenceStrip && this.referenceStrip.setFocus(e),
                      this.raiseEvent('page', { page: e })),
                    this
                  )
                },
                addOverlay: function (t, i, n, s) {
                  var a
                  if (
                    ((a = e.isPlainObject(t)
                      ? t
                      : { element: t, location: i, placement: n, onDraw: s }),
                    (t = e.getElement(a.element)),
                    r(this.currentOverlays, t) >= 0)
                  )
                    return this
                  var l = o(this, a)
                  return (
                    this.currentOverlays.push(l),
                    l.drawHTML(this.overlaysContainer, this.viewport),
                    this.raiseEvent('add-overlay', {
                      element: t,
                      location: a.location,
                      placement: a.placement,
                    }),
                    this
                  )
                },
                updateOverlay: function (i, n, o) {
                  var s
                  return (
                    (i = e.getElement(i)),
                    (s = r(this.currentOverlays, i)) >= 0 &&
                      (this.currentOverlays[s].update(n, o),
                      (t[this.hash].forceRedraw = !0),
                      this.raiseEvent('update-overlay', {
                        element: i,
                        location: n,
                        placement: o,
                      })),
                    this
                  )
                },
                removeOverlay: function (i) {
                  var n
                  return (
                    (i = e.getElement(i)),
                    (n = r(this.currentOverlays, i)) >= 0 &&
                      (this.currentOverlays[n].destroy(),
                      this.currentOverlays.splice(n, 1),
                      (t[this.hash].forceRedraw = !0),
                      this.raiseEvent('remove-overlay', { element: i })),
                    this
                  )
                },
                clearOverlays: function () {
                  for (; this.currentOverlays.length > 0; )
                    this.currentOverlays.pop().destroy()
                  return (
                    (t[this.hash].forceRedraw = !0),
                    this.raiseEvent('clear-overlay', {}),
                    this
                  )
                },
                getOverlayById: function (t) {
                  var i
                  return (
                    (t = e.getElement(t)),
                    (i = r(this.currentOverlays, t)) >= 0
                      ? this.currentOverlays[i]
                      : null
                  )
                },
                _updateSequenceButtons: function (e) {
                  this.nextButton &&
                    (this.tileSources && this.tileSources.length - 1 !== e
                      ? this.nextButton.enable()
                      : this.navPrevNextWrap || this.nextButton.disable()),
                    this.previousButton &&
                      (e > 0
                        ? this.previousButton.enable()
                        : this.navPrevNextWrap || this.previousButton.disable())
                },
                _showMessage: function (t) {
                  this._hideMessage()
                  var i = e.makeNeutralElement('div')
                  i.appendChild(document.createTextNode(t)),
                    (this.messageDiv = e.makeCenteredNode(i)),
                    e.addClass(this.messageDiv, 'openseadragon-message'),
                    this.container.appendChild(this.messageDiv)
                },
                _hideMessage: function () {
                  var e = this.messageDiv
                  e && (e.parentNode.removeChild(e), delete this.messageDiv)
                },
                gestureSettingsByDeviceType: function (e) {
                  switch (e) {
                    case 'mouse':
                      return this.gestureSettingsMouse
                    case 'touch':
                      return this.gestureSettingsTouch
                    case 'pen':
                      return this.gestureSettingsPen
                    default:
                      return this.gestureSettingsUnknown
                  }
                },
                _drawOverlays: function () {
                  var e,
                    t = this.currentOverlays.length
                  for (e = 0; e < t; e++)
                    this.currentOverlays[e].drawHTML(
                      this.overlaysContainer,
                      this.viewport
                    )
                },
                _cancelPendingImages: function () {
                  this._loadQueue = []
                },
                removeReferenceStrip: function () {
                  ;(this.showReferenceStrip = !1),
                    this.referenceStrip &&
                      (this.referenceStrip.destroy(),
                      (this.referenceStrip = null))
                },
                addReferenceStrip: function () {
                  if (((this.showReferenceStrip = !0), this.sequenceMode)) {
                    if (this.referenceStrip) return
                    this.tileSources.length &&
                      this.tileSources.length > 1 &&
                      ((this.referenceStrip = new e.ReferenceStrip({
                        id: this.referenceStripElement,
                        position: this.referenceStripPosition,
                        sizeRatio: this.referenceStripSizeRatio,
                        scroll: this.referenceStripScroll,
                        height: this.referenceStripHeight,
                        width: this.referenceStripWidth,
                        tileSources: this.tileSources,
                        prefixUrl: this.prefixUrl,
                        useCanvas: this.useCanvas,
                        viewer: this,
                      })),
                      this.referenceStrip.setFocus(this._sequenceIndex))
                  } else
                    e.console.warn(
                      'Attempting to display a reference strip while "sequenceMode" is off.'
                    )
                },
              }
            )
        })(OpenSeadragon),
        (function (e) {
          function t(e) {
            var t = {
              tracker: e.eventSource,
              position: e.position,
              quick: e.quick,
              shift: e.shift,
              originalEvent: e.originalEvent,
              preventDefaultAction: e.preventDefaultAction,
            }
            if (
              (this.viewer.raiseEvent('navigator-click', t),
              !t.preventDefaultAction &&
                e.quick &&
                this.viewer.viewport &&
                (this.panVertical || this.panHorizontal))
            ) {
              this.viewer.viewport.flipped &&
                (e.position.x =
                  this.viewport.getContainerSize().x - e.position.x)
              var i = this.viewport.pointFromPixel(e.position)
              this.panVertical
                ? this.panHorizontal ||
                  (i.x = this.viewer.viewport.getCenter(!0).x)
                : (i.y = this.viewer.viewport.getCenter(!0).y),
                this.viewer.viewport.panTo(i),
                this.viewer.viewport.applyConstraints()
            }
          }
          function i(e) {
            var t = {
              tracker: e.eventSource,
              position: e.position,
              delta: e.delta,
              speed: e.speed,
              direction: e.direction,
              shift: e.shift,
              originalEvent: e.originalEvent,
              preventDefaultAction: e.preventDefaultAction,
            }
            this.viewer.raiseEvent('navigator-drag', t),
              !t.preventDefaultAction &&
                this.viewer.viewport &&
                (this.panHorizontal || (e.delta.x = 0),
                this.panVertical || (e.delta.y = 0),
                this.viewer.viewport.flipped && (e.delta.x = -e.delta.x),
                this.viewer.viewport.panBy(
                  this.viewport.deltaPointsFromPixels(e.delta)
                ),
                this.viewer.constrainDuringPan &&
                  this.viewer.viewport.applyConstraints())
          }
          function n(e) {
            e.insideElementPressed &&
              this.viewer.viewport &&
              this.viewer.viewport.applyConstraints()
          }
          function o(e) {
            return (
              this.viewer.raiseEvent('navigator-scroll', {
                tracker: e.eventSource,
                position: e.position,
                scroll: e.scroll,
                shift: e.shift,
                originalEvent: e.originalEvent,
              }),
              !1
            )
          }
          function r(e, t) {
            s(e, 'rotate(' + t + 'deg)')
          }
          function s(e, t) {
            ;(e.style.webkitTransform = t),
              (e.style.mozTransform = t),
              (e.style.msTransform = t),
              (e.style.oTransform = t),
              (e.style.transform = t)
          }
          ;(e.Navigator = function (s) {
            var a,
              l,
              c,
              h,
              u = s.viewer,
              d = this
            function p(e) {
              r(d.displayRegionContainer, e),
                r(d.displayRegion, -e),
                d.viewport.setRotation(e)
            }
            ;(s.id
              ? ((this.element = document.getElementById(s.id)),
                (s.controlOptions = {
                  anchor: e.ControlAnchor.NONE,
                  attachToViewer: !1,
                  autoFade: !1,
                }))
              : ((s.id = 'navigator-' + e.now()),
                (this.element = e.makeNeutralElement('div')),
                (s.controlOptions = {
                  anchor: e.ControlAnchor.TOP_RIGHT,
                  attachToViewer: !0,
                  autoFade: s.autoFade,
                }),
                s.position &&
                  ('BOTTOM_RIGHT' == s.position
                    ? (s.controlOptions.anchor = e.ControlAnchor.BOTTOM_RIGHT)
                    : 'BOTTOM_LEFT' == s.position
                    ? (s.controlOptions.anchor = e.ControlAnchor.BOTTOM_LEFT)
                    : 'TOP_RIGHT' == s.position
                    ? (s.controlOptions.anchor = e.ControlAnchor.TOP_RIGHT)
                    : 'TOP_LEFT' == s.position
                    ? (s.controlOptions.anchor = e.ControlAnchor.TOP_LEFT)
                    : 'ABSOLUTE' == s.position &&
                      ((s.controlOptions.anchor = e.ControlAnchor.ABSOLUTE),
                      (s.controlOptions.top = s.top),
                      (s.controlOptions.left = s.left),
                      (s.controlOptions.height = s.height),
                      (s.controlOptions.width = s.width)))),
            (this.element.id = s.id),
            (this.element.className += ' navigator'),
            ((s = e.extend(
              !0,
              { sizeRatio: e.DEFAULT_SETTINGS.navigatorSizeRatio },
              s,
              {
                element: this.element,
                tabIndex: -1,
                showNavigator: !1,
                mouseNavEnabled: !1,
                showNavigationControl: !1,
                showSequenceControl: !1,
                immediateRender: !0,
                blendTime: 0,
                animationTime: 0,
                autoResize: s.autoResize,
                minZoomImageRatio: 1,
                background: s.background,
                opacity: s.opacity,
                borderColor: s.borderColor,
                displayRegionColor: s.displayRegionColor,
              }
            )).minPixelRatio = this.minPixelRatio = u.minPixelRatio),
            e.setElementTouchActionNone(this.element),
            (this.borderWidth = 2),
            (this.fudge = new e.Point(1, 1)),
            (this.totalBorderWidths = new e.Point(
              2 * this.borderWidth,
              2 * this.borderWidth
            ).minus(this.fudge)),
            s.controlOptions.anchor != e.ControlAnchor.NONE &&
              ((c = this.element.style),
              (h = this.borderWidth),
              (c.margin = '0px'),
              (c.border = h + 'px solid ' + s.borderColor),
              (c.padding = '0px'),
              (c.background = s.background),
              (c.opacity = s.opacity),
              (c.overflow = 'hidden')),
            (this.displayRegion = e.makeNeutralElement('div')),
            (this.displayRegion.id = this.element.id + '-displayregion'),
            (this.displayRegion.className = 'displayregion'),
            (function (e, t) {
              ;(e.position = 'relative'),
                (e.top = '0px'),
                (e.left = '0px'),
                (e.fontSize = '0px'),
                (e.overflow = 'hidden'),
                (e.border = t + 'px solid ' + s.displayRegionColor),
                (e.margin = '0px'),
                (e.padding = '0px'),
                (e.background = 'transparent'),
                (e.float = 'left'),
                (e.cssFloat = 'left'),
                (e.styleFloat = 'left'),
                (e.zIndex = 999999999),
                (e.cursor = 'default')
            })(this.displayRegion.style, this.borderWidth),
            (this.displayRegionContainer = e.makeNeutralElement('div')),
            (this.displayRegionContainer.id =
              this.element.id + '-displayregioncontainer'),
            (this.displayRegionContainer.className = 'displayregioncontainer'),
            (this.displayRegionContainer.style.width = '100%'),
            (this.displayRegionContainer.style.height = '100%'),
            u.addControl(this.element, s.controlOptions),
            (this._resizeWithViewer =
              s.controlOptions.anchor != e.ControlAnchor.ABSOLUTE &&
              s.controlOptions.anchor != e.ControlAnchor.NONE),
            s.width && s.height
              ? (this.setWidth(s.width), this.setHeight(s.height))
              : this._resizeWithViewer &&
                ((a = e.getElementSize(u.element)),
                (this.element.style.height =
                  Math.round(a.y * s.sizeRatio) + 'px'),
                (this.element.style.width =
                  Math.round(a.x * s.sizeRatio) + 'px'),
                (this.oldViewerSize = a),
                (l = e.getElementSize(this.element)),
                (this.elementArea = l.x * l.y)),
            (this.oldContainerSize = new e.Point(0, 0)),
            e.Viewer.apply(this, [s]),
            this.displayRegionContainer.appendChild(this.displayRegion),
            this.element
              .getElementsByTagName('div')[0]
              .appendChild(this.displayRegionContainer),
            s.navigatorRotate) &&
              (p(
                s.viewer.viewport
                  ? s.viewer.viewport.getRotation()
                  : s.viewer.degrees || 0
              ),
              s.viewer.addHandler('rotate', function (e) {
                p(e.degrees)
              }))
            this.innerTracker.destroy(),
              (this.innerTracker = new e.MouseTracker({
                element: this.element,
                dragHandler: e.delegate(this, i),
                clickHandler: e.delegate(this, t),
                releaseHandler: e.delegate(this, n),
                scrollHandler: e.delegate(this, o),
              })),
              this.addHandler('reset-size', function () {
                d.viewport && d.viewport.goHome(!0)
              }),
              u.world.addHandler('item-index-change', function (e) {
                window.setTimeout(function () {
                  var t = d.world.getItemAt(e.previousIndex)
                  d.world.setItemIndex(t, e.newIndex)
                }, 1)
              }),
              u.world.addHandler('remove-item', function (e) {
                var t = e.item,
                  i = d._getMatchingItem(t)
                i && d.world.removeItem(i)
              }),
              this.update(u.viewport)
          }),
            e.extend(
              e.Navigator.prototype,
              e.EventSource.prototype,
              e.Viewer.prototype,
              {
                updateSize: function () {
                  if (this.viewport) {
                    var t = new e.Point(
                      0 === this.container.clientWidth
                        ? 1
                        : this.container.clientWidth,
                      0 === this.container.clientHeight
                        ? 1
                        : this.container.clientHeight
                    )
                    t.equals(this.oldContainerSize) ||
                      (this.viewport.resize(t, !0),
                      this.viewport.goHome(!0),
                      (this.oldContainerSize = t),
                      this.drawer.clear(),
                      this.world.draw())
                  }
                },
                setWidth: function (e) {
                  ;(this.width = e),
                    (this.element.style.width =
                      'number' == typeof e ? e + 'px' : e),
                    (this._resizeWithViewer = !1)
                },
                setHeight: function (e) {
                  ;(this.height = e),
                    (this.element.style.height =
                      'number' == typeof e ? e + 'px' : e),
                    (this._resizeWithViewer = !1)
                },
                setFlip: function (e) {
                  return (
                    this.viewport.setFlip(e),
                    this.setDisplayTransform(
                      this.viewer.viewport.getFlip()
                        ? 'scale(-1,1)'
                        : 'scale(1,1)'
                    ),
                    this
                  )
                },
                setDisplayTransform: function (e) {
                  s(this.displayRegion, e),
                    s(this.canvas, e),
                    s(this.element, e)
                },
                update: function (t) {
                  var i, n, o, r, s, a
                  if (
                    ((i = e.getElementSize(this.viewer.element)),
                    this._resizeWithViewer &&
                      i.x &&
                      i.y &&
                      !i.equals(this.oldViewerSize) &&
                      ((this.oldViewerSize = i),
                      this.maintainSizeRatio || !this.elementArea
                        ? ((n = i.x * this.sizeRatio),
                          (o = i.y * this.sizeRatio))
                        : ((n = Math.sqrt(this.elementArea * (i.x / i.y))),
                          (o = this.elementArea / n)),
                      (this.element.style.width = Math.round(n) + 'px'),
                      (this.element.style.height = Math.round(o) + 'px'),
                      this.elementArea || (this.elementArea = n * o),
                      this.updateSize()),
                    t && this.viewport)
                  ) {
                    ;(r = t.getBoundsNoRotate(!0)),
                      (s = this.viewport.pixelFromPointNoRotate(
                        r.getTopLeft(),
                        !1
                      )),
                      (a = this.viewport
                        .pixelFromPointNoRotate(r.getBottomRight(), !1)
                        .minus(this.totalBorderWidths))
                    var l = this.displayRegion.style
                    ;(l.display = this.world.getItemCount() ? 'block' : 'none'),
                      (l.top = Math.round(s.y) + 'px'),
                      (l.left = Math.round(s.x) + 'px')
                    var c = Math.abs(s.x - a.x),
                      h = Math.abs(s.y - a.y)
                    ;(l.width = Math.round(Math.max(c, 0)) + 'px'),
                      (l.height = Math.round(Math.max(h, 0)) + 'px')
                  }
                },
                addTiledImage: function (t) {
                  var i = this,
                    n = t.originalTiledImage
                  delete t.original
                  var o = e.extend({}, t, {
                    success: function (e) {
                      var t = e.item
                      function o() {
                        i._matchBounds(t, n)
                      }
                      ;(t._originalForNavigator = n),
                        i._matchBounds(t, n, !0),
                        n.addHandler('bounds-change', o),
                        n.addHandler('clip-change', o),
                        n.addHandler('opacity-change', function () {
                          i._matchOpacity(t, n)
                        }),
                        n.addHandler('composite-operation-change', function () {
                          i._matchCompositeOperation(t, n)
                        })
                    },
                  })
                  return e.Viewer.prototype.addTiledImage.apply(this, [o])
                },
                _getMatchingItem: function (e) {
                  for (var t, i = this.world.getItemCount(), n = 0; n < i; n++)
                    if (
                      (t = this.world.getItemAt(n))._originalForNavigator === e
                    )
                      return t
                  return null
                },
                _matchBounds: function (e, t, i) {
                  var n = t.getBoundsNoRotate()
                  e.setPosition(n.getTopLeft(), i),
                    e.setWidth(n.width, i),
                    e.setRotation(t.getRotation(), i),
                    e.setClip(t.getClip())
                },
                _matchOpacity: function (e, t) {
                  e.setOpacity(t.opacity)
                },
                _matchCompositeOperation: function (e, t) {
                  e.setCompositeOperation(t.compositeOperation)
                },
              }
            )
        })(OpenSeadragon),
        (function (e) {
          var t = {
            Errors: {
              Dzc: "Sorry, we don't support Deep Zoom Collections!",
              Dzi: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
              Xml: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
              ImageFormat:
                "Sorry, we don't support {0}-based Deep Zoom Images.",
              Security:
                'It looks like a security restriction stopped us from loading this Deep Zoom Image.',
              Status: 'This space unintentionally left blank ({0} {1}).',
              OpenFailed: 'Unable to open {0}: {1}',
            },
            Tooltips: {
              FullPage: 'Toggle full page',
              Home: 'Go home',
              ZoomIn: 'Zoom in',
              ZoomOut: 'Zoom out',
              NextPage: 'Next page',
              PreviousPage: 'Previous page',
              RotateLeft: 'Rotate left',
              RotateRight: 'Rotate right',
              Flip: 'Flip Horizontally',
            },
          }
          e.extend(e, {
            getString: function (i) {
              var n,
                o = i.split('.'),
                r = null,
                s = arguments,
                a = t
              for (n = 0; n < o.length - 1; n++) a = a[o[n]] || {}
              return (
                'string' != typeof (r = a[o[n]]) &&
                  (e.console.log('Untranslated source string:', i), (r = '')),
                r.replace(/\{\d+\}/g, function (e) {
                  var t = parseInt(e.match(/\d+/), 10) + 1
                  return t < s.length ? s[t] : ''
                })
              )
            },
            setString: function (e, i) {
              var n,
                o = e.split('.'),
                r = t
              for (n = 0; n < o.length - 1; n++)
                r[o[n]] || (r[o[n]] = {}), (r = r[o[n]])
              r[o[n]] = i
            },
          })
        })(OpenSeadragon),
        (function (e) {
          ;(e.Point = function (e, t) {
            ;(this.x = 'number' == typeof e ? e : 0),
              (this.y = 'number' == typeof t ? t : 0)
          }),
            (e.Point.prototype = {
              clone: function () {
                return new e.Point(this.x, this.y)
              },
              plus: function (t) {
                return new e.Point(this.x + t.x, this.y + t.y)
              },
              minus: function (t) {
                return new e.Point(this.x - t.x, this.y - t.y)
              },
              times: function (t) {
                return new e.Point(this.x * t, this.y * t)
              },
              divide: function (t) {
                return new e.Point(this.x / t, this.y / t)
              },
              negate: function () {
                return new e.Point(-this.x, -this.y)
              },
              distanceTo: function (e) {
                return Math.sqrt(
                  Math.pow(this.x - e.x, 2) + Math.pow(this.y - e.y, 2)
                )
              },
              squaredDistanceTo: function (e) {
                return Math.pow(this.x - e.x, 2) + Math.pow(this.y - e.y, 2)
              },
              apply: function (t) {
                return new e.Point(t(this.x), t(this.y))
              },
              equals: function (t) {
                return t instanceof e.Point && this.x === t.x && this.y === t.y
              },
              rotate: function (t, i) {
                var n, o
                if (((i = i || new e.Point(0, 0)), t % 90 == 0)) {
                  switch (e.positiveModulo(t, 360)) {
                    case 0:
                      ;(n = 1), (o = 0)
                      break
                    case 90:
                      ;(n = 0), (o = 1)
                      break
                    case 180:
                      ;(n = -1), (o = 0)
                      break
                    case 270:
                      ;(n = 0), (o = -1)
                  }
                } else {
                  var r = (t * Math.PI) / 180
                  ;(n = Math.cos(r)), (o = Math.sin(r))
                }
                var s = n * (this.x - i.x) - o * (this.y - i.y) + i.x,
                  a = o * (this.x - i.x) + n * (this.y - i.y) + i.y
                return new e.Point(s, a)
              },
              toString: function () {
                return (
                  '(' +
                  Math.round(100 * this.x) / 100 +
                  ',' +
                  Math.round(100 * this.y) / 100 +
                  ')'
                )
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.TileSource = function (t, i, n, o, r, s) {
            var a,
              l,
              c = this,
              h = arguments
            if (
              ((a = e.isPlainObject(t)
                ? t
                : {
                    width: h[0],
                    height: h[1],
                    tileSize: h[2],
                    tileOverlap: h[3],
                    minLevel: h[4],
                    maxLevel: h[5],
                  }),
              e.EventSource.call(this),
              e.extend(!0, this, a),
              !this.success)
            )
              for (l = 0; l < arguments.length; l++)
                if (e.isFunction(arguments[l])) {
                  this.success = arguments[l]
                  break
                }
            this.success &&
              this.addHandler('ready', function (e) {
                c.success(e)
              }),
              'string' == e.type(arguments[0]) && (this.url = arguments[0]),
              this.url
                ? ((this.aspectRatio = 1),
                  (this.dimensions = new e.Point(10, 10)),
                  (this._tileWidth = 0),
                  (this._tileHeight = 0),
                  (this.tileOverlap = 0),
                  (this.minLevel = 0),
                  (this.maxLevel = 0),
                  (this.ready = !1),
                  this.getImageInfo(this.url))
                : ((this.ready = !0),
                  (this.aspectRatio =
                    a.width && a.height ? a.width / a.height : 1),
                  (this.dimensions = new e.Point(a.width, a.height)),
                  this.tileSize
                    ? ((this._tileWidth = this._tileHeight = this.tileSize),
                      delete this.tileSize)
                    : (this.tileWidth
                        ? ((this._tileWidth = this.tileWidth),
                          delete this.tileWidth)
                        : (this._tileWidth = 0),
                      this.tileHeight
                        ? ((this._tileHeight = this.tileHeight),
                          delete this.tileHeight)
                        : (this._tileHeight = 0)),
                  (this.tileOverlap = a.tileOverlap ? a.tileOverlap : 0),
                  (this.minLevel = a.minLevel ? a.minLevel : 0),
                  (this.maxLevel =
                    void 0 !== a.maxLevel && null !== a.maxLevel
                      ? a.maxLevel
                      : a.width && a.height
                      ? Math.ceil(
                          Math.log(Math.max(a.width, a.height)) / Math.log(2)
                        )
                      : 0),
                  this.success &&
                    e.isFunction(this.success) &&
                    this.success(this))
          }),
            (e.TileSource.prototype = {
              getTileSize: function (t) {
                return (
                  e.console.error(
                    '[TileSource.getTileSize] is deprecated. Use TileSource.getTileWidth() and TileSource.getTileHeight() instead'
                  ),
                  this._tileWidth
                )
              },
              getTileWidth: function (e) {
                return this._tileWidth ? this._tileWidth : this.getTileSize(e)
              },
              getTileHeight: function (e) {
                return this._tileHeight ? this._tileHeight : this.getTileSize(e)
              },
              getLevelScale: function (e) {
                var t,
                  i = {}
                for (t = 0; t <= this.maxLevel; t++)
                  i[t] = 1 / Math.pow(2, this.maxLevel - t)
                return (
                  (this.getLevelScale = function (e) {
                    return i[e]
                  }),
                  this.getLevelScale(e)
                )
              },
              getNumTiles: function (t) {
                var i = this.getLevelScale(t),
                  n = Math.ceil((i * this.dimensions.x) / this.getTileWidth(t)),
                  o = Math.ceil((i * this.dimensions.y) / this.getTileHeight(t))
                return new e.Point(n, o)
              },
              getPixelRatio: function (t) {
                var i = this.dimensions.times(this.getLevelScale(t)),
                  n = 1 / i.x,
                  o = 1 / i.y
                return new e.Point(n, o)
              },
              getClosestLevel: function () {
                var e, t
                for (
                  e = this.minLevel + 1;
                  e <= this.maxLevel &&
                  !((t = this.getNumTiles(e)).x > 1 || t.y > 1);
                  e++
                );
                return e - 1
              },
              getTileAtPoint: function (t, i) {
                var n =
                  i.x >= 0 &&
                  i.x <= 1 &&
                  i.y >= 0 &&
                  i.y <= 1 / this.aspectRatio
                e.console.assert(
                  n,
                  '[TileSource.getTileAtPoint] must be called with a valid point.'
                )
                var o = this.dimensions.x * this.getLevelScale(t),
                  r = i.x * o,
                  s = i.y * o,
                  a = Math.floor(r / this.getTileWidth(t)),
                  l = Math.floor(s / this.getTileHeight(t))
                i.x >= 1 && (a = this.getNumTiles(t).x - 1)
                return (
                  i.y >= 1 / this.aspectRatio - 1e-15 &&
                    (l = this.getNumTiles(t).y - 1),
                  new e.Point(a, l)
                )
              },
              getTileBounds: function (t, i, n, o) {
                var r = this.dimensions.times(this.getLevelScale(t)),
                  s = this.getTileWidth(t),
                  a = this.getTileHeight(t),
                  l = 0 === i ? 0 : s * i - this.tileOverlap,
                  c = 0 === n ? 0 : a * n - this.tileOverlap,
                  h = s + (0 === i ? 1 : 2) * this.tileOverlap,
                  u = a + (0 === n ? 1 : 2) * this.tileOverlap,
                  d = 1 / r.x
                return (
                  (h = Math.min(h, r.x - l)),
                  (u = Math.min(u, r.y - c)),
                  o
                    ? new e.Rect(0, 0, h, u)
                    : new e.Rect(l * d, c * d, h * d, u * d)
                )
              },
              getImageInfo: function (t) {
                var i,
                  n,
                  o,
                  r,
                  s,
                  a,
                  l,
                  c = this
                t &&
                  (l = (a = (s = t.split('/'))[s.length - 1]).lastIndexOf(
                    '.'
                  )) > -1 &&
                  (s[s.length - 1] = a.slice(0, l)),
                  (n = function (i) {
                    'string' == typeof i && (i = e.parseXml(i))
                    var n = e.TileSource.determineType(c, i, t)
                    n
                      ? (void 0 ===
                          (r = n.prototype.configure.apply(c, [i, t]))
                            .ajaxWithCredentials &&
                          (r.ajaxWithCredentials = c.ajaxWithCredentials),
                        (o = new n(r)),
                        (c.ready = !0),
                        c.raiseEvent('ready', { tileSource: o }))
                      : c.raiseEvent('open-failed', {
                          message: 'Unable to load TileSource',
                          source: t,
                        })
                  }),
                  t.match(/\.js$/)
                    ? ((i = t.split('/').pop().replace('.js', '')),
                      e.jsonp({
                        url: t,
                        async: !1,
                        callbackName: i,
                        callback: n,
                      }))
                    : e.makeAjaxRequest({
                        url: t,
                        withCredentials: this.ajaxWithCredentials,
                        headers: this.ajaxHeaders,
                        success: function (t) {
                          var i = (function (t) {
                            var i,
                              n,
                              o = t.responseText,
                              r = t.status
                            if (!t)
                              throw new Error(e.getString('Errors.Security'))
                            if (200 !== t.status && 0 !== t.status)
                              throw (
                                ((i =
                                  404 == (r = t.status)
                                    ? 'Not Found'
                                    : t.statusText),
                                new Error(e.getString('Errors.Status', r, i)))
                              )
                            if (o.match(/\s*<.*/))
                              try {
                                n =
                                  t.responseXML && t.responseXML.documentElement
                                    ? t.responseXML
                                    : e.parseXml(o)
                              } catch (e) {
                                n = t.responseText
                              }
                            else if (o.match(/\s*[\{\[].*/))
                              try {
                                n = e.parseJSON(o)
                              } catch (e) {
                                n = o
                              }
                            else n = o
                            return n
                          })(t)
                          n(i)
                        },
                        error: function (e, i) {
                          var n
                          try {
                            n =
                              'HTTP ' +
                              e.status +
                              ' attempting to load TileSource'
                          } catch (e) {
                            n =
                              (void 0 !== i && i.toString
                                ? i.toString()
                                : 'Unknown error') +
                              ' attempting to load TileSource'
                          }
                          c.raiseEvent('open-failed', { message: n, source: t })
                        },
                      })
              },
              supports: function (e, t) {
                return !1
              },
              configure: function (e, t) {
                throw new Error('Method not implemented.')
              },
              getTileUrl: function (e, t, i) {
                throw new Error('Method not implemented.')
              },
              getTileAjaxHeaders: function (e, t, i) {
                return {}
              },
              tileExists: function (e, t, i) {
                var n = this.getNumTiles(e)
                return (
                  e >= this.minLevel &&
                  e <= this.maxLevel &&
                  t >= 0 &&
                  i >= 0 &&
                  t < n.x &&
                  i < n.y
                )
              },
            }),
            e.extend(!0, e.TileSource.prototype, e.EventSource.prototype),
            (e.TileSource.determineType = function (t, i, n) {
              var o
              for (o in OpenSeadragon)
                if (
                  o.match(/.+TileSource$/) &&
                  e.isFunction(OpenSeadragon[o]) &&
                  e.isFunction(OpenSeadragon[o].prototype.supports) &&
                  OpenSeadragon[o].prototype.supports.call(t, i, n)
                )
                  return OpenSeadragon[o]
              e.console.error('No TileSource was able to open %s %s', n, i)
            })
        })(OpenSeadragon),
        (function (e) {
          function t(t, i) {
            var n,
              o,
              r = i.Image,
              s = r.Url,
              a = r.Format,
              l = r.Size,
              c = r.DisplayRect || [],
              h = parseInt(l.Width, 10),
              u = parseInt(l.Height, 10),
              d = parseInt(r.TileSize, 10),
              p = parseInt(r.Overlap, 10),
              g = []
            for (o = 0; o < c.length; o++)
              (n = c[o].Rect),
                g.push(
                  new e.DisplayRect(
                    parseInt(n.X, 10),
                    parseInt(n.Y, 10),
                    parseInt(n.Width, 10),
                    parseInt(n.Height, 10),
                    parseInt(n.MinLevel, 10),
                    parseInt(n.MaxLevel, 10)
                  )
                )
            return e.extend(
              !0,
              {
                width: h,
                height: u,
                tileSize: d,
                tileOverlap: p,
                minLevel: null,
                maxLevel: null,
                tilesUrl: s,
                fileFormat: a,
                displayRects: g,
              },
              i
            )
          }
          ;(e.DziTileSource = function (t, i, n, o, r, s, a, l, c) {
            var h, u, d, p
            if (
              ((p = e.isPlainObject(t)
                ? t
                : {
                    width: arguments[0],
                    height: arguments[1],
                    tileSize: arguments[2],
                    tileOverlap: arguments[3],
                    tilesUrl: arguments[4],
                    fileFormat: arguments[5],
                    displayRects: arguments[6],
                    minLevel: arguments[7],
                    maxLevel: arguments[8],
                  }),
              (this._levelRects = {}),
              (this.tilesUrl = p.tilesUrl),
              (this.fileFormat = p.fileFormat),
              (this.displayRects = p.displayRects),
              this.displayRects)
            )
              for (h = this.displayRects.length - 1; h >= 0; h--)
                for (
                  d = (u = this.displayRects[h]).minLevel;
                  d <= u.maxLevel;
                  d++
                )
                  this._levelRects[d] || (this._levelRects[d] = []),
                    this._levelRects[d].push(u)
            e.TileSource.apply(this, [p])
          }),
            e.extend(e.DziTileSource.prototype, e.TileSource.prototype, {
              supports: function (e, t) {
                var i
                return (
                  e.Image
                    ? (i = e.Image.xmlns)
                    : e.documentElement &&
                      (('Image' != e.documentElement.localName &&
                        'Image' != e.documentElement.tagName) ||
                        (i = e.documentElement.namespaceURI)),
                  -1 !==
                    (i = (i || '').toLowerCase()).indexOf(
                      'schemas.microsoft.com/deepzoom/2008'
                    ) || -1 !== i.indexOf('schemas.microsoft.com/deepzoom/2009')
                )
              },
              configure: function (i, n) {
                var o
                return (
                  (o = e.isPlainObject(i)
                    ? t(this, i)
                    : (function (i, n) {
                        if (!n || !n.documentElement)
                          throw new Error(e.getString('Errors.Xml'))
                        var o,
                          r,
                          s,
                          a,
                          l,
                          c = n.documentElement,
                          h = c.localName || c.tagName,
                          u = n.documentElement.namespaceURI,
                          d = null,
                          p = []
                        if ('Image' == h)
                          try {
                            if (
                              (void 0 ===
                                (a = c.getElementsByTagName('Size')[0]) &&
                                (a = c.getElementsByTagNameNS(u, 'Size')[0]),
                              (d = {
                                Image: {
                                  xmlns:
                                    'http://schemas.microsoft.com/deepzoom/2008',
                                  Url: c.getAttribute('Url'),
                                  Format: c.getAttribute('Format'),
                                  DisplayRect: null,
                                  Overlap: parseInt(
                                    c.getAttribute('Overlap'),
                                    10
                                  ),
                                  TileSize: parseInt(
                                    c.getAttribute('TileSize'),
                                    10
                                  ),
                                  Size: {
                                    Height: parseInt(
                                      a.getAttribute('Height'),
                                      10
                                    ),
                                    Width: parseInt(
                                      a.getAttribute('Width'),
                                      10
                                    ),
                                  },
                                },
                              }),
                              !e.imageFormatSupported(d.Image.Format))
                            )
                              throw new Error(
                                e.getString(
                                  'Errors.ImageFormat',
                                  d.Image.Format.toUpperCase()
                                )
                              )
                            for (
                              void 0 ===
                                (o = c.getElementsByTagName('DisplayRect')) &&
                                (o = c.getElementsByTagNameNS(
                                  u,
                                  'DisplayRect'
                                )[0]),
                                l = 0;
                              l < o.length;
                              l++
                            )
                              void 0 ===
                                (s = (r = o[l]).getElementsByTagName(
                                  'Rect'
                                )[0]) &&
                                (s = r.getElementsByTagNameNS(u, 'Rect')[0]),
                                p.push({
                                  Rect: {
                                    X: parseInt(s.getAttribute('X'), 10),
                                    Y: parseInt(s.getAttribute('Y'), 10),
                                    Width: parseInt(
                                      s.getAttribute('Width'),
                                      10
                                    ),
                                    Height: parseInt(
                                      s.getAttribute('Height'),
                                      10
                                    ),
                                    MinLevel: parseInt(
                                      r.getAttribute('MinLevel'),
                                      10
                                    ),
                                    MaxLevel: parseInt(
                                      r.getAttribute('MaxLevel'),
                                      10
                                    ),
                                  },
                                })
                            return (
                              p.length && (d.Image.DisplayRect = p), t(i, d)
                            )
                          } catch (t) {
                            throw t instanceof Error
                              ? t
                              : new Error(e.getString('Errors.Dzi'))
                          }
                        else {
                          if ('Collection' == h)
                            throw new Error(e.getString('Errors.Dzc'))
                          if ('Error' == h) {
                            var g = c.getElementsByTagName('Message')[0]
                              .firstChild.nodeValue
                            throw new Error(g)
                          }
                        }
                        throw new Error(e.getString('Errors.Dzi'))
                      })(this, i)),
                  n &&
                    !o.tilesUrl &&
                    ((o.tilesUrl = n.replace(
                      /([^\/]+?)(\.(dzi|xml|js)?(\?[^\/]*)?)?\/?$/,
                      '$1_files/'
                    )),
                    -1 != n.search(/\.(dzi|xml|js)\?/)
                      ? (o.queryParams = n.match(/\?.*/))
                      : (o.queryParams = '')),
                  o
                )
              },
              getTileUrl: function (e, t, i) {
                return [
                  this.tilesUrl,
                  e,
                  '/',
                  t,
                  '_',
                  i,
                  '.',
                  this.fileFormat,
                  this.queryParams,
                ].join('')
              },
              tileExists: function (e, t, i) {
                var n,
                  o,
                  r,
                  s,
                  a,
                  l,
                  c,
                  h = this._levelRects[e]
                if (
                  (this.minLevel && e < this.minLevel) ||
                  (this.maxLevel && e > this.maxLevel)
                )
                  return !1
                if (!h || !h.length) return !0
                for (c = h.length - 1; c >= 0; c--)
                  if (
                    !(e < (n = h[c]).minLevel || e > n.maxLevel) &&
                    ((o = this.getLevelScale(e)),
                    (r = n.x * o),
                    (s = n.y * o),
                    (a = r + n.width * o),
                    (l = s + n.height * o),
                    (r = Math.floor(r / this._tileWidth)),
                    (s = Math.floor(s / this._tileWidth)),
                    (a = Math.ceil(a / this._tileWidth)),
                    (l = Math.ceil(l / this._tileWidth)),
                    r <= t && t < a && s <= i && i < l)
                  )
                    return !0
                return !1
              },
            })
        })(OpenSeadragon),
        (function (e) {
          function t(e) {
            var t = Array.isArray(e.profile) ? e.profile[0] : e.profile,
              i =
                -1 !==
                [
                  'http://library.stanford.edu/iiif/image-api/compliance.html#level0',
                  'http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0',
                  'http://iiif.io/api/image/2/level0.json',
                  'level0',
                  'https://iiif.io/api/image/3/level0.json',
                ].indexOf(t),
              n = !1
            return (
              2 === e.version &&
                e.profile.length > 1 &&
                e.profile[1].supports &&
                (n = -1 !== e.profile[1].supports.indexOf('sizeByW')),
              3 === e.version &&
                e.extraFeatures &&
                (n = -1 !== e.extraFeatures.indexOf('sizeByWh')),
              !i || n
            )
          }
          function i(e) {
            for (var t = [], i = 0; i < e.sizes.length; i++)
              t.push({
                url:
                  e['@id'] +
                  '/full/' +
                  e.sizes[i].width +
                  ',' +
                  (3 === e.version ? e.sizes[i].height : '') +
                  '/0/default.' +
                  e.tileFormat,
                width: e.sizes[i].width,
                height: e.sizes[i].height,
              })
            return t.sort(function (e, t) {
              return e.width - t.width
            })
          }
          ;(e.IIIFTileSource = function (n) {
            if (
              (e.extend(!0, this, n),
              !(this.height && this.width && this['@id']))
            )
              throw new Error('IIIF required parameters not provided.')
            if (
              ((n.tileSizePerScaleFactor = {}),
              (this.tileFormat = this.tileFormat || 'jpg'),
              (this.version = n.version),
              this.tile_width && this.tile_height)
            )
              (n.tileWidth = this.tile_width), (n.tileHeight = this.tile_height)
            else if (this.tile_width) n.tileSize = this.tile_width
            else if (this.tile_height) n.tileSize = this.tile_height
            else if (this.tiles)
              if (1 == this.tiles.length)
                (n.tileWidth = this.tiles[0].width),
                  (n.tileHeight = this.tiles[0].height || this.tiles[0].width),
                  (this.scale_factors = this.tiles[0].scaleFactors)
              else {
                this.scale_factors = []
                for (var o = 0; o < this.tiles.length; o++)
                  for (var r = 0; r < this.tiles[o].scaleFactors.length; r++) {
                    var s = this.tiles[o].scaleFactors[r]
                    this.scale_factors.push(s),
                      (n.tileSizePerScaleFactor[s] = {
                        width: this.tiles[o].width,
                        height: this.tiles[o].height || this.tiles[o].width,
                      })
                  }
              }
            else if (t(n)) {
              for (
                var a = Math.min(this.height, this.width),
                  l = [256, 512, 1024],
                  c = [],
                  h = 0;
                h < l.length;
                h++
              )
                l[h] <= a && c.push(l[h])
              c.length > 0
                ? (n.tileSize = Math.max.apply(null, c))
                : (n.tileSize = a)
            } else
              this.sizes && this.sizes.length > 0
                ? ((this.emulateLegacyImagePyramid = !0),
                  (n.levels = i(this)),
                  e.extend(!0, n, {
                    width: n.levels[n.levels.length - 1].width,
                    height: n.levels[n.levels.length - 1].height,
                    tileSize: Math.max(n.height, n.width),
                    tileOverlap: 0,
                    minLevel: 0,
                    maxLevel: n.levels.length - 1,
                  }),
                  (this.levels = n.levels))
                : e.console.error(
                    'Nothing in the info.json to construct image pyramids from'
                  )
            if (!n.maxLevel && !this.emulateLegacyImagePyramid)
              if (this.scale_factors) {
                var u = Math.max.apply(null, this.scale_factors)
                n.maxLevel = Math.round(Math.log(u) * Math.LOG2E)
              } else
                n.maxLevel = Number(
                  Math.ceil(Math.log(Math.max(this.width, this.height), 2))
                )
            e.TileSource.apply(this, [n])
          }),
            e.extend(e.IIIFTileSource.prototype, e.TileSource.prototype, {
              supports: function (e, t) {
                return (
                  !(!e.protocol || 'http://iiif.io/api/image' != e.protocol) ||
                  !(
                    !e['@context'] ||
                    ('http://library.stanford.edu/iiif/image-api/1.1/context.json' !=
                      e['@context'] &&
                      'http://iiif.io/api/image/1/context.json' !=
                        e['@context'])
                  ) ||
                  !(
                    !e.profile ||
                    0 !==
                      e.profile.indexOf(
                        'http://library.stanford.edu/iiif/image-api/compliance.html'
                      )
                  ) ||
                  !!(e.identifier && e.width && e.height) ||
                  !(
                    !e.documentElement ||
                    'info' != e.documentElement.tagName ||
                    'http://library.stanford.edu/iiif/image-api/ns/' !=
                      e.documentElement.namespaceURI
                  )
                )
              },
              configure: function (t, i) {
                if (e.isPlainObject(t)) {
                  if (t['@context']) {
                    var n = t['@context']
                    if (Array.isArray(n))
                      for (var o = 0; o < n.length; o++)
                        if (
                          'string' == typeof n[o] &&
                          (/^http:\/\/iiif\.io\/api\/image\/[1-3]\/context\.json$/.test(
                            n[o]
                          ) ||
                            'http://library.stanford.edu/iiif/image-api/1.1/context.json' ===
                              n[o])
                        ) {
                          n = n[o]
                          break
                        }
                    switch (n) {
                      case 'http://iiif.io/api/image/1/context.json':
                      case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':
                        t.version = 1
                        break
                      case 'http://iiif.io/api/image/2/context.json':
                        t.version = 2
                        break
                      case 'http://iiif.io/api/image/3/context.json':
                        t.version = 3
                        break
                      default:
                        e.console.error(
                          'Data has a @context property which contains no known IIIF context URI.'
                        )
                    }
                  } else
                    (t['@context'] =
                      'http://iiif.io/api/image/1.0/context.json'),
                      (t['@id'] = i.replace('/info.json', '')),
                      (t.version = 1)
                  if (
                    (!t['@id'] && t.id && (t['@id'] = t.id), t.preferredFormats)
                  )
                    for (var r = 0; r < t.preferredFormats.length; r++)
                      if (
                        OpenSeadragon.imageFormatSupported(
                          t.preferredFormats[r]
                        )
                      ) {
                        t.tileFormat = t.preferredFormats[r]
                        break
                      }
                  return t
                }
                var s = (function (t) {
                  if (!t || !t.documentElement)
                    throw new Error(e.getString('Errors.Xml'))
                  var i = t.documentElement,
                    n = i.tagName,
                    o = null
                  if ('info' == n)
                    try {
                      return (
                        (function t(i, n, o) {
                          var r, s
                          if (3 == i.nodeType && o)
                            (s = i.nodeValue.trim()).match(/^\d*$/) &&
                              (s = Number(s)),
                              n[o]
                                ? (e.isArray(n[o]) || (n[o] = [n[o]]),
                                  n[o].push(s))
                                : (n[o] = s)
                          else if (1 == i.nodeType)
                            for (r = 0; r < i.childNodes.length; r++)
                              t(i.childNodes[r], n, i.nodeName)
                        })(i, (o = {})),
                        o
                      )
                    } catch (t) {
                      throw t instanceof Error
                        ? t
                        : new Error(e.getString('Errors.IIIF'))
                    }
                  throw new Error(e.getString('Errors.IIIF'))
                })(t)
                return (
                  (s['@context'] = 'http://iiif.io/api/image/1.0/context.json'),
                  (s['@id'] = i.replace('/info.xml', '')),
                  (s.version = 1),
                  s
                )
              },
              getTileWidth: function (t) {
                if (this.emulateLegacyImagePyramid)
                  return e.TileSource.prototype.getTileWidth.call(this, t)
                var i = Math.pow(2, this.maxLevel - t)
                return this.tileSizePerScaleFactor &&
                  this.tileSizePerScaleFactor[i]
                  ? this.tileSizePerScaleFactor[i].width
                  : this._tileWidth
              },
              getTileHeight: function (t) {
                if (this.emulateLegacyImagePyramid)
                  return e.TileSource.prototype.getTileHeight.call(this, t)
                var i = Math.pow(2, this.maxLevel - t)
                return this.tileSizePerScaleFactor &&
                  this.tileSizePerScaleFactor[i]
                  ? this.tileSizePerScaleFactor[i].height
                  : this._tileHeight
              },
              getLevelScale: function (t) {
                if (this.emulateLegacyImagePyramid) {
                  var i = NaN
                  return (
                    this.levels.length > 0 &&
                      t >= this.minLevel &&
                      t <= this.maxLevel &&
                      (i =
                        this.levels[t].width /
                        this.levels[this.maxLevel].width),
                    i
                  )
                }
                return e.TileSource.prototype.getLevelScale.call(this, t)
              },
              getNumTiles: function (t) {
                return this.emulateLegacyImagePyramid
                  ? this.getLevelScale(t)
                    ? new e.Point(1, 1)
                    : new e.Point(0, 0)
                  : e.TileSource.prototype.getNumTiles.call(this, t)
              },
              getTileAtPoint: function (t, i) {
                return this.emulateLegacyImagePyramid
                  ? new e.Point(0, 0)
                  : e.TileSource.prototype.getTileAtPoint.call(this, t, i)
              },
              getTileUrl: function (e, t, i) {
                if (this.emulateLegacyImagePyramid) {
                  var n = null
                  return (
                    this.levels.length > 0 &&
                      e >= this.minLevel &&
                      e <= this.maxLevel &&
                      (n = this.levels[e].url),
                    n
                  )
                }
                var o,
                  r,
                  s,
                  a,
                  l,
                  c,
                  h,
                  u,
                  d,
                  p,
                  g,
                  m,
                  v,
                  f = Math.pow(0.5, this.maxLevel - e),
                  y = Math.ceil(this.width * f),
                  w = Math.ceil(this.height * f)
                return (
                  (o = this.getTileWidth(e)),
                  (r = this.getTileHeight(e)),
                  (s = Math.ceil(o / f)),
                  (a = Math.ceil(r / f)),
                  (v =
                    1 === this.version
                      ? 'native.' + this.tileFormat
                      : 'default.' + this.tileFormat),
                  y < o && w < r
                    ? ((p =
                        (2 === this.version && y === this.width) ||
                        (3 === this.version &&
                          y === this.width &&
                          w === this.height)
                          ? 'max'
                          : 3 === this.version
                          ? y + ',' + w
                          : y + ','),
                      (l = 'full'))
                    : ((c = t * s),
                      (h = i * a),
                      (u = Math.min(s, this.width - c)),
                      (d = Math.min(a, this.height - h)),
                      (l =
                        0 === t &&
                        0 === i &&
                        u === this.width &&
                        d === this.height
                          ? 'full'
                          : [c, h, u, d].join(',')),
                      (g = Math.ceil(u * f)),
                      (m = Math.ceil(d * f)),
                      (p =
                        (2 === this.version && g === this.width) ||
                        (3 === this.version &&
                          g === this.width &&
                          m === this.height)
                          ? 'max'
                          : 3 === this.version
                          ? g + ',' + m
                          : g + ',')),
                  [this['@id'], l, p, '0', v].join('/')
                )
              },
              __testonly__: { canBeTiled: t, constructLevels: i },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.OsmTileSource = function (t, i, n, o, r) {
            var s
            ;((s = e.isPlainObject(t)
              ? t
              : {
                  width: arguments[0],
                  height: arguments[1],
                  tileSize: arguments[2],
                  tileOverlap: arguments[3],
                  tilesUrl: arguments[4],
                }).width &&
              s.height) ||
              ((s.width = 65572864), (s.height = 65572864)),
              s.tileSize || ((s.tileSize = 256), (s.tileOverlap = 0)),
              s.tilesUrl || (s.tilesUrl = 'http://tile.openstreetmap.org/'),
              (s.minLevel = 8),
              e.TileSource.apply(this, [s])
          }),
            e.extend(e.OsmTileSource.prototype, e.TileSource.prototype, {
              supports: function (e, t) {
                return e.type && 'openstreetmaps' == e.type
              },
              configure: function (e, t) {
                return e
              },
              getTileUrl: function (e, t, i) {
                return this.tilesUrl + (e - 8) + '/' + t + '/' + i + '.png'
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.TmsTileSource = function (t, i, n, o, r) {
            var s
            s = e.isPlainObject(t)
              ? t
              : {
                  width: arguments[0],
                  height: arguments[1],
                  tileSize: arguments[2],
                  tileOverlap: arguments[3],
                  tilesUrl: arguments[4],
                }
            var a,
              l = 256 * Math.ceil(s.width / 256),
              c = 256 * Math.ceil(s.height / 256)
            ;(a = l > c ? l / 256 : c / 256),
              (s.maxLevel = Math.ceil(Math.log(a) / Math.log(2)) - 1),
              (s.tileSize = 256),
              (s.width = l),
              (s.height = c),
              e.TileSource.apply(this, [s])
          }),
            e.extend(e.TmsTileSource.prototype, e.TileSource.prototype, {
              supports: function (e, t) {
                return e.type && 'tiledmapservice' == e.type
              },
              configure: function (e, t) {
                return e
              },
              getTileUrl: function (e, t, i) {
                var n = this.getNumTiles(e).y - 1
                return this.tilesUrl + e + '/' + t + '/' + (n - i) + '.png'
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.ZoomifyTileSource = function (e) {
            e.tileSize = 256
            var t = { x: e.width, y: e.height }
            for (
              e.imageSizes = [{ x: e.width, y: e.height }],
                e.gridSize = [this._getGridSize(e.width, e.height, e.tileSize)];
              parseInt(t.x, 10) > e.tileSize || parseInt(t.y, 10) > e.tileSize;

            )
              (t.x = Math.floor(t.x / 2)),
                (t.y = Math.floor(t.y / 2)),
                e.imageSizes.push({ x: t.x, y: t.y }),
                e.gridSize.push(this._getGridSize(t.x, t.y, e.tileSize))
            e.imageSizes.reverse(),
              e.gridSize.reverse(),
              (e.minLevel = 0),
              (e.maxLevel = e.gridSize.length - 1),
              OpenSeadragon.TileSource.apply(this, [e])
          }),
            e.extend(e.ZoomifyTileSource.prototype, e.TileSource.prototype, {
              _getGridSize: function (e, t, i) {
                return { x: Math.ceil(e / i), y: Math.ceil(t / i) }
              },
              _calculateAbsoluteTileNumber: function (e, t, i) {
                for (var n = 0, o = {}, r = 0; r < e; r++)
                  n += (o = this.gridSize[r]).x * o.y
                return (n += (o = this.gridSize[e]).x * i + t)
              },
              supports: function (e, t) {
                return e.type && 'zoomifytileservice' == e.type
              },
              configure: function (e, t) {
                return e
              },
              getTileUrl: function (e, t, i) {
                var n,
                  o = this._calculateAbsoluteTileNumber(e, t, i)
                return (
                  (n = Math.floor(o / 256)),
                  this.tilesUrl +
                    'TileGroup' +
                    n +
                    '/' +
                    e +
                    '-' +
                    t +
                    '-' +
                    i +
                    '.jpg'
                )
              },
            })
        })(OpenSeadragon),
        (function (e) {
          function t(e, t) {
            return t.levels
          }
          ;(e.LegacyTileSource = function (t) {
            var i, n, o
            e.isArray(t) && (i = { type: 'legacy-image-pyramid', levels: t }),
              (i.levels = (function (t) {
                var i,
                  n,
                  o = []
                for (n = 0; n < t.length; n++)
                  (i = t[n]).height && i.width && i.url
                    ? o.push({
                        url: i.url,
                        width: Number(i.width),
                        height: Number(i.height),
                      })
                    : e.console.error(
                        'Unsupported image format: %s',
                        i.url ? i.url : '<no URL>'
                      )
                return o.sort(function (e, t) {
                  return e.height - t.height
                })
              })(i.levels)),
              i.levels.length > 0
                ? ((n = i.levels[i.levels.length - 1].width),
                  (o = i.levels[i.levels.length - 1].height))
                : ((n = 0),
                  (o = 0),
                  e.console.error('No supported image formats found')),
              e.extend(!0, i, {
                width: n,
                height: o,
                tileSize: Math.max(o, n),
                tileOverlap: 0,
                minLevel: 0,
                maxLevel: i.levels.length > 0 ? i.levels.length - 1 : 0,
              }),
              e.TileSource.apply(this, [i]),
              (this.levels = i.levels)
          }),
            e.extend(e.LegacyTileSource.prototype, e.TileSource.prototype, {
              supports: function (e, t) {
                return (
                  (e.type && 'legacy-image-pyramid' == e.type) ||
                  (e.documentElement &&
                    'legacy-image-pyramid' ==
                      e.documentElement.getAttribute('type'))
                )
              },
              configure: function (i, n) {
                return e.isPlainObject(i)
                  ? t(this, i)
                  : (function (i, n) {
                      if (!n || !n.documentElement)
                        throw new Error(e.getString('Errors.Xml'))
                      var o,
                        r,
                        s = n.documentElement,
                        a = s.tagName,
                        l = null,
                        c = []
                      if ('image' == a)
                        try {
                          for (
                            l = { type: s.getAttribute('type'), levels: [] },
                              c = s.getElementsByTagName('level'),
                              r = 0;
                            r < c.length;
                            r++
                          )
                            (o = c[r]),
                              l.levels.push({
                                url: o.getAttribute('url'),
                                width: parseInt(o.getAttribute('width'), 10),
                                height: parseInt(o.getAttribute('height'), 10),
                              })
                          return t(i, l)
                        } catch (e) {
                          throw e instanceof Error
                            ? e
                            : new Error(
                                'Unknown error parsing Legacy Image Pyramid XML.'
                              )
                        }
                      else {
                        if ('collection' == a)
                          throw new Error(
                            'Legacy Image Pyramid Collections not yet supported.'
                          )
                        if ('error' == a) throw new Error('Error: ' + n)
                      }
                      throw new Error('Unknown element ' + a)
                    })(this, i)
              },
              getLevelScale: function (e) {
                var t = NaN
                return (
                  this.levels.length > 0 &&
                    e >= this.minLevel &&
                    e <= this.maxLevel &&
                    (t =
                      this.levels[e].width / this.levels[this.maxLevel].width),
                  t
                )
              },
              getNumTiles: function (t) {
                return this.getLevelScale(t)
                  ? new e.Point(1, 1)
                  : new e.Point(0, 0)
              },
              getTileUrl: function (e, t, i) {
                var n = null
                return (
                  this.levels.length > 0 &&
                    e >= this.minLevel &&
                    e <= this.maxLevel &&
                    (n = this.levels[e].url),
                  n
                )
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.ImageTileSource = function (t) {
            ;(t = e.extend(
              {
                buildPyramid: !0,
                crossOriginPolicy: !1,
                ajaxWithCredentials: !1,
                useCanvas: !0,
              },
              t
            )),
              e.TileSource.apply(this, [t])
          }),
            e.extend(e.ImageTileSource.prototype, e.TileSource.prototype, {
              supports: function (e, t) {
                return e.type && 'image' === e.type
              },
              configure: function (e, t) {
                return e
              },
              getImageInfo: function (t) {
                var i = (this._image = new Image()),
                  n = this
                this.crossOriginPolicy &&
                  (i.crossOrigin = this.crossOriginPolicy),
                  this.ajaxWithCredentials &&
                    (i.useCredentials = this.ajaxWithCredentials),
                  e.addEvent(i, 'load', function () {
                    ;(n.width = Object.prototype.hasOwnProperty.call(
                      i,
                      'naturalWidth'
                    )
                      ? i.naturalWidth
                      : i.width),
                      (n.height = Object.prototype.hasOwnProperty.call(
                        i,
                        'naturalHeight'
                      )
                        ? i.naturalHeight
                        : i.height),
                      (n.aspectRatio = n.width / n.height),
                      (n.dimensions = new e.Point(n.width, n.height)),
                      (n._tileWidth = n.width),
                      (n._tileHeight = n.height),
                      (n.tileOverlap = 0),
                      (n.minLevel = 0),
                      (n.levels = n._buildLevels()),
                      (n.maxLevel = n.levels.length - 1),
                      (n.ready = !0),
                      n.raiseEvent('ready', { tileSource: n })
                  }),
                  e.addEvent(i, 'error', function () {
                    n.raiseEvent('open-failed', {
                      message: 'Error loading image at ' + t,
                      source: t,
                    })
                  }),
                  (i.src = t)
              },
              getLevelScale: function (e) {
                var t = NaN
                return (
                  e >= this.minLevel &&
                    e <= this.maxLevel &&
                    (t =
                      this.levels[e].width / this.levels[this.maxLevel].width),
                  t
                )
              },
              getNumTiles: function (t) {
                return this.getLevelScale(t)
                  ? new e.Point(1, 1)
                  : new e.Point(0, 0)
              },
              getTileUrl: function (e, t, i) {
                var n = null
                return (
                  e >= this.minLevel &&
                    e <= this.maxLevel &&
                    (n = this.levels[e].url),
                  n
                )
              },
              getContext2D: function (e, t, i) {
                var n = null
                return (
                  e >= this.minLevel &&
                    e <= this.maxLevel &&
                    (n = this.levels[e].context2D),
                  n
                )
              },
              _buildLevels: function () {
                var t = [
                  {
                    url: this._image.src,
                    width: Object.prototype.hasOwnProperty.call(
                      this._image,
                      'naturalWidth'
                    )
                      ? this._image.naturalWidth
                      : this._image.width,
                    height: Object.prototype.hasOwnProperty.call(
                      this._image,
                      'naturalHeight'
                    )
                      ? this._image.naturalHeight
                      : this._image.height,
                  },
                ]
                if (!this.buildPyramid || !e.supportsCanvas || !this.useCanvas)
                  return delete this._image, t
                var i = Object.prototype.hasOwnProperty.call(
                    this._image,
                    'naturalWidth'
                  )
                    ? this._image.naturalWidth
                    : this._image.width,
                  n = Object.prototype.hasOwnProperty.call(
                    this._image,
                    'naturalHeight'
                  )
                    ? this._image.naturalHeight
                    : this._image.height,
                  o = document.createElement('canvas'),
                  r = o.getContext('2d')
                if (
                  ((o.width = i),
                  (o.height = n),
                  r.drawImage(this._image, 0, 0, i, n),
                  (t[0].context2D = r),
                  delete this._image,
                  e.isCanvasTainted(o))
                )
                  return t
                for (; i >= 2 && n >= 2; ) {
                  ;(i = Math.floor(i / 2)), (n = Math.floor(n / 2))
                  var s = document.createElement('canvas'),
                    a = s.getContext('2d')
                  ;(s.width = i),
                    (s.height = n),
                    a.drawImage(o, 0, 0, i, n),
                    t.splice(0, 0, { context2D: a, width: i, height: n }),
                    (o = s),
                    (r = a)
                }
                return t
              },
            })
        })(OpenSeadragon),
        (function (e) {
          e.TileSourceCollection = function (t, i, n, o) {
            e.console.error(
              'TileSourceCollection is deprecated; use World instead'
            )
          }
        })(OpenSeadragon),
        (function (e) {
          function t(i) {
            e.requestAnimationFrame(function () {
              !(function (i) {
                var n
                i.shouldFade &&
                  ((n = 1 - (e.now() - i.fadeBeginTime) / i.fadeLength),
                  (n = Math.min(1, n)),
                  (n = Math.max(0, n)),
                  i.imgGroup && e.setElementOpacity(i.imgGroup, n, !0),
                  n > 0 && t(i))
              })(i)
            })
          }
          function i(t, i) {
            t.element.disabled ||
              (i >= e.ButtonState.GROUP &&
                t.currentState == e.ButtonState.REST &&
                (!(function (t) {
                  ;(t.shouldFade = !1),
                    t.imgGroup && e.setElementOpacity(t.imgGroup, 1, !0)
                })(t),
                (t.currentState = e.ButtonState.GROUP)),
              i >= e.ButtonState.HOVER &&
                t.currentState == e.ButtonState.GROUP &&
                (t.imgHover && (t.imgHover.style.visibility = ''),
                (t.currentState = e.ButtonState.HOVER)),
              i >= e.ButtonState.DOWN &&
                t.currentState == e.ButtonState.HOVER &&
                (t.imgDown && (t.imgDown.style.visibility = ''),
                (t.currentState = e.ButtonState.DOWN)))
          }
          function n(i, n) {
            i.element.disabled ||
              (n <= e.ButtonState.HOVER &&
                i.currentState == e.ButtonState.DOWN &&
                (i.imgDown && (i.imgDown.style.visibility = 'hidden'),
                (i.currentState = e.ButtonState.HOVER)),
              n <= e.ButtonState.GROUP &&
                i.currentState == e.ButtonState.HOVER &&
                (i.imgHover && (i.imgHover.style.visibility = 'hidden'),
                (i.currentState = e.ButtonState.GROUP)),
              n <= e.ButtonState.REST &&
                i.currentState == e.ButtonState.GROUP &&
                (!(function (i) {
                  ;(i.shouldFade = !0),
                    (i.fadeBeginTime = e.now() + i.fadeDelay),
                    window.setTimeout(function () {
                      t(i)
                    }, i.fadeDelay)
                })(i),
                (i.currentState = e.ButtonState.REST)))
          }
          ;(e.ButtonState = { REST: 0, GROUP: 1, HOVER: 2, DOWN: 3 }),
            (e.Button = function (t) {
              var o = this
              e.EventSource.call(this),
                e.extend(
                  !0,
                  this,
                  {
                    tooltip: null,
                    srcRest: null,
                    srcGroup: null,
                    srcHover: null,
                    srcDown: null,
                    clickTimeThreshold: e.DEFAULT_SETTINGS.clickTimeThreshold,
                    clickDistThreshold: e.DEFAULT_SETTINGS.clickDistThreshold,
                    fadeDelay: 0,
                    fadeLength: 2e3,
                    onPress: null,
                    onRelease: null,
                    onClick: null,
                    onEnter: null,
                    onExit: null,
                    onFocus: null,
                    onBlur: null,
                  },
                  t
                ),
                (this.element = t.element || e.makeNeutralElement('div')),
                t.element ||
                  ((this.imgRest = e.makeTransparentImage(this.srcRest)),
                  (this.imgGroup = e.makeTransparentImage(this.srcGroup)),
                  (this.imgHover = e.makeTransparentImage(this.srcHover)),
                  (this.imgDown = e.makeTransparentImage(this.srcDown)),
                  (this.imgRest.alt = this.imgGroup.alt = this.imgHover.alt = this.imgDown.alt = this.tooltip),
                  (this.element.style.position = 'relative'),
                  e.setElementTouchActionNone(this.element),
                  (this.imgGroup.style.position = this.imgHover.style.position = this.imgDown.style.position =
                    'absolute'),
                  (this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top =
                    '0px'),
                  (this.imgGroup.style.left = this.imgHover.style.left = this.imgDown.style.left =
                    '0px'),
                  (this.imgHover.style.visibility = this.imgDown.style.visibility =
                    'hidden'),
                  e.Browser.vendor == e.BROWSERS.FIREFOX &&
                    e.Browser.version < 3 &&
                    (this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top =
                      ''),
                  this.element.appendChild(this.imgRest),
                  this.element.appendChild(this.imgGroup),
                  this.element.appendChild(this.imgHover),
                  this.element.appendChild(this.imgDown)),
                this.addHandler('press', this.onPress),
                this.addHandler('release', this.onRelease),
                this.addHandler('click', this.onClick),
                this.addHandler('enter', this.onEnter),
                this.addHandler('exit', this.onExit),
                this.addHandler('focus', this.onFocus),
                this.addHandler('blur', this.onBlur),
                (this.currentState = e.ButtonState.GROUP),
                (this.fadeBeginTime = null),
                (this.shouldFade = !1),
                (this.element.style.display = 'inline-block'),
                (this.element.style.position = 'relative'),
                (this.element.title = this.tooltip),
                (this.tracker = new e.MouseTracker({
                  element: this.element,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  enterHandler: function (t) {
                    t.insideElementPressed
                      ? (i(o, e.ButtonState.DOWN),
                        o.raiseEvent('enter', {
                          originalEvent: t.originalEvent,
                        }))
                      : t.buttonDownAny || i(o, e.ButtonState.HOVER)
                  },
                  focusHandler: function (e) {
                    this.enterHandler(e),
                      o.raiseEvent('focus', { originalEvent: e.originalEvent })
                  },
                  exitHandler: function (t) {
                    n(o, e.ButtonState.GROUP),
                      t.insideElementPressed &&
                        o.raiseEvent('exit', { originalEvent: t.originalEvent })
                  },
                  blurHandler: function (e) {
                    this.exitHandler(e),
                      o.raiseEvent('blur', { originalEvent: e.originalEvent })
                  },
                  pressHandler: function (t) {
                    i(o, e.ButtonState.DOWN),
                      o.raiseEvent('press', { originalEvent: t.originalEvent })
                  },
                  releaseHandler: function (t) {
                    t.insideElementPressed && t.insideElementReleased
                      ? (n(o, e.ButtonState.HOVER),
                        o.raiseEvent('release', {
                          originalEvent: t.originalEvent,
                        }))
                      : t.insideElementPressed
                      ? n(o, e.ButtonState.GROUP)
                      : i(o, e.ButtonState.HOVER)
                  },
                  clickHandler: function (e) {
                    e.quick &&
                      o.raiseEvent('click', { originalEvent: e.originalEvent })
                  },
                  keyHandler: function (e) {
                    return (
                      13 !== e.keyCode ||
                      (o.raiseEvent('click', {
                        originalEvent: e.originalEvent,
                      }),
                      o.raiseEvent('release', {
                        originalEvent: e.originalEvent,
                      }),
                      !1)
                    )
                  },
                })),
                n(this, e.ButtonState.REST)
            }),
            e.extend(e.Button.prototype, e.EventSource.prototype, {
              notifyGroupEnter: function () {
                i(this, e.ButtonState.GROUP)
              },
              notifyGroupExit: function () {
                n(this, e.ButtonState.REST)
              },
              disable: function () {
                this.notifyGroupExit(),
                  (this.element.disabled = !0),
                  e.setElementOpacity(this.element, 0.2, !0)
              },
              enable: function () {
                ;(this.element.disabled = !1),
                  e.setElementOpacity(this.element, 1, !0),
                  this.notifyGroupEnter()
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.ButtonGroup = function (t) {
            e.extend(
              !0,
              this,
              {
                buttons: [],
                clickTimeThreshold: e.DEFAULT_SETTINGS.clickTimeThreshold,
                clickDistThreshold: e.DEFAULT_SETTINGS.clickDistThreshold,
                labelText: '',
              },
              t
            )
            var i,
              n = this.buttons.concat([]),
              o = this
            if (
              ((this.element = t.element || e.makeNeutralElement('div')),
              !t.group)
            )
              for (
                this.element.style.display = 'inline-block', i = 0;
                i < n.length;
                i++
              )
                this.element.appendChild(n[i].element)
            e.setElementTouchActionNone(this.element),
              (this.tracker = new e.MouseTracker({
                element: this.element,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                enterHandler: function (e) {
                  var t
                  for (t = 0; t < o.buttons.length; t++)
                    o.buttons[t].notifyGroupEnter()
                },
                exitHandler: function (e) {
                  var t
                  if (!e.insideElementPressed)
                    for (t = 0; t < o.buttons.length; t++)
                      o.buttons[t].notifyGroupExit()
                },
              }))
          }),
            (e.ButtonGroup.prototype = {
              emulateEnter: function () {
                this.tracker.enterHandler({ eventSource: this.tracker })
              },
              emulateExit: function () {
                this.tracker.exitHandler({ eventSource: this.tracker })
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.Rect = function (t, i, n, o, r) {
            var s, a
            ;(this.x = 'number' == typeof t ? t : 0),
              (this.y = 'number' == typeof i ? i : 0),
              (this.width = 'number' == typeof n ? n : 0),
              (this.height = 'number' == typeof o ? o : 0),
              (this.degrees = 'number' == typeof r ? r : 0),
              (this.degrees = e.positiveModulo(this.degrees, 360)),
              this.degrees >= 270
                ? ((s = this.getTopRight()),
                  (this.x = s.x),
                  (this.y = s.y),
                  (a = this.height),
                  (this.height = this.width),
                  (this.width = a),
                  (this.degrees -= 270))
                : this.degrees >= 180
                ? ((s = this.getBottomRight()),
                  (this.x = s.x),
                  (this.y = s.y),
                  (this.degrees -= 180))
                : this.degrees >= 90 &&
                  ((s = this.getBottomLeft()),
                  (this.x = s.x),
                  (this.y = s.y),
                  (a = this.height),
                  (this.height = this.width),
                  (this.width = a),
                  (this.degrees -= 90))
          }),
            (e.Rect.fromSummits = function (t, i, n) {
              var o = t.distanceTo(i),
                r = t.distanceTo(n),
                s = i.minus(t),
                a = Math.atan(s.y / s.x)
              return (
                s.x < 0 ? (a += Math.PI) : s.y < 0 && (a += 2 * Math.PI),
                new e.Rect(t.x, t.y, o, r, (a / Math.PI) * 180)
              )
            }),
            (e.Rect.prototype = {
              clone: function () {
                return new e.Rect(
                  this.x,
                  this.y,
                  this.width,
                  this.height,
                  this.degrees
                )
              },
              getAspectRatio: function () {
                return this.width / this.height
              },
              getTopLeft: function () {
                return new e.Point(this.x, this.y)
              },
              getBottomRight: function () {
                return new e.Point(
                  this.x + this.width,
                  this.y + this.height
                ).rotate(this.degrees, this.getTopLeft())
              },
              getTopRight: function () {
                return new e.Point(this.x + this.width, this.y).rotate(
                  this.degrees,
                  this.getTopLeft()
                )
              },
              getBottomLeft: function () {
                return new e.Point(this.x, this.y + this.height).rotate(
                  this.degrees,
                  this.getTopLeft()
                )
              },
              getCenter: function () {
                return new e.Point(
                  this.x + this.width / 2,
                  this.y + this.height / 2
                ).rotate(this.degrees, this.getTopLeft())
              },
              getSize: function () {
                return new e.Point(this.width, this.height)
              },
              equals: function (t) {
                return (
                  t instanceof e.Rect &&
                  this.x === t.x &&
                  this.y === t.y &&
                  this.width === t.width &&
                  this.height === t.height &&
                  this.degrees === t.degrees
                )
              },
              times: function (t) {
                return new e.Rect(
                  this.x * t,
                  this.y * t,
                  this.width * t,
                  this.height * t,
                  this.degrees
                )
              },
              translate: function (t) {
                return new e.Rect(
                  this.x + t.x,
                  this.y + t.y,
                  this.width,
                  this.height,
                  this.degrees
                )
              },
              union: function (t) {
                var i = this.getBoundingBox(),
                  n = t.getBoundingBox(),
                  o = Math.min(i.x, n.x),
                  r = Math.min(i.y, n.y),
                  s = Math.max(i.x + i.width, n.x + n.width),
                  a = Math.max(i.y + i.height, n.y + n.height)
                return new e.Rect(o, r, s - o, a - r)
              },
              intersection: function (t) {
                var i = 1e-10,
                  n = [],
                  o = this.getTopLeft()
                t.containsPoint(o, i) && n.push(o)
                var r = this.getTopRight()
                t.containsPoint(r, i) && n.push(r)
                var s = this.getBottomLeft()
                t.containsPoint(s, i) && n.push(s)
                var a = this.getBottomRight()
                t.containsPoint(a, i) && n.push(a)
                var l = t.getTopLeft()
                this.containsPoint(l, i) && n.push(l)
                var c = t.getTopRight()
                this.containsPoint(c, i) && n.push(c)
                var h = t.getBottomLeft()
                this.containsPoint(h, i) && n.push(h)
                var u = t.getBottomRight()
                this.containsPoint(u, i) && n.push(u)
                for (
                  var d = this._getSegments(), p = t._getSegments(), g = 0;
                  g < d.length;
                  g++
                )
                  for (var m = d[g], v = 0; v < p.length; v++) {
                    var f = p[v],
                      y = w(m[0], m[1], f[0], f[1])
                    y && n.push(y)
                  }
                function w(t, n, o, r) {
                  var s = n.minus(t),
                    a = r.minus(o),
                    l = -a.x * s.y + s.x * a.y
                  if (0 === l) return null
                  var c = (s.x * (t.y - o.y) - s.y * (t.x - o.x)) / l,
                    h = (a.x * (t.y - o.y) - a.y * (t.x - o.x)) / l
                  return -1e-10 <= c && c <= 1 - i && -1e-10 <= h && h <= 1 - i
                    ? new e.Point(t.x + h * s.x, t.y + h * s.y)
                    : null
                }
                if (0 === n.length) return null
                for (
                  var T = n[0].x, x = n[0].x, _ = n[0].y, S = n[0].y, E = 1;
                  E < n.length;
                  E++
                ) {
                  var P = n[E]
                  P.x < T && (T = P.x),
                    P.x > x && (x = P.x),
                    P.y < _ && (_ = P.y),
                    P.y > S && (S = P.y)
                }
                return new e.Rect(T, _, x - T, S - _)
              },
              _getSegments: function () {
                var e = this.getTopLeft(),
                  t = this.getTopRight(),
                  i = this.getBottomLeft(),
                  n = this.getBottomRight()
                return [
                  [e, t],
                  [t, n],
                  [n, i],
                  [i, e],
                ]
              },
              rotate: function (t, i) {
                if (0 === (t = e.positiveModulo(t, 360))) return this.clone()
                i = i || this.getCenter()
                var n = this.getTopLeft().rotate(t, i),
                  o = this.getTopRight().rotate(t, i).minus(n)
                o = o.apply(function (e) {
                  return Math.abs(e) < 1e-15 ? 0 : e
                })
                var r = Math.atan(o.y / o.x)
                return (
                  o.x < 0 ? (r += Math.PI) : o.y < 0 && (r += 2 * Math.PI),
                  new e.Rect(
                    n.x,
                    n.y,
                    this.width,
                    this.height,
                    (r / Math.PI) * 180
                  )
                )
              },
              getBoundingBox: function () {
                if (0 === this.degrees) return this.clone()
                var t = this.getTopLeft(),
                  i = this.getTopRight(),
                  n = this.getBottomLeft(),
                  o = this.getBottomRight(),
                  r = Math.min(t.x, i.x, n.x, o.x),
                  s = Math.max(t.x, i.x, n.x, o.x),
                  a = Math.min(t.y, i.y, n.y, o.y),
                  l = Math.max(t.y, i.y, n.y, o.y)
                return new e.Rect(r, a, s - r, l - a)
              },
              getIntegerBoundingBox: function () {
                var t = this.getBoundingBox(),
                  i = Math.floor(t.x),
                  n = Math.floor(t.y),
                  o = Math.ceil(t.width + t.x - i),
                  r = Math.ceil(t.height + t.y - n)
                return new e.Rect(i, n, o, r)
              },
              containsPoint: function (e, t) {
                t = t || 0
                var i = this.getTopLeft(),
                  n = this.getTopRight(),
                  o = this.getBottomLeft(),
                  r = n.minus(i),
                  s = o.minus(i)
                return (
                  (e.x - i.x) * r.x + (e.y - i.y) * r.y >= -t &&
                  (e.x - n.x) * r.x + (e.y - n.y) * r.y <= t &&
                  (e.x - i.x) * s.x + (e.y - i.y) * s.y >= -t &&
                  (e.x - o.x) * s.x + (e.y - o.y) * s.y <= t
                )
              },
              toString: function () {
                return (
                  '[' +
                  Math.round(100 * this.x) / 100 +
                  ', ' +
                  Math.round(100 * this.y) / 100 +
                  ', ' +
                  Math.round(100 * this.width) / 100 +
                  'x' +
                  Math.round(100 * this.height) / 100 +
                  ', ' +
                  Math.round(100 * this.degrees) / 100 +
                  'deg]'
                )
              },
            })
        })(OpenSeadragon),
        (function (e) {
          var t = {}
          function i(t) {
            var i = Number(this.element.style.marginLeft.replace('px', '')),
              n = Number(this.element.style.marginTop.replace('px', '')),
              r = Number(this.element.style.width.replace('px', '')),
              s = Number(this.element.style.height.replace('px', '')),
              a = e.getElementSize(this.viewer.canvas)
            return (
              (this.dragging = !0),
              this.element &&
                ('horizontal' == this.scroll
                  ? -t.delta.x > 0
                    ? i > -(r - a.x) &&
                      ((this.element.style.marginLeft =
                        i + 2 * t.delta.x + 'px'),
                      o(this, a.x, i + 2 * t.delta.x))
                    : -t.delta.x < 0 &&
                      i < 0 &&
                      ((this.element.style.marginLeft =
                        i + 2 * t.delta.x + 'px'),
                      o(this, a.x, i + 2 * t.delta.x))
                  : -t.delta.y > 0
                  ? n > -(s - a.y) &&
                    ((this.element.style.marginTop = n + 2 * t.delta.y + 'px'),
                    o(this, a.y, n + 2 * t.delta.y))
                  : -t.delta.y < 0 &&
                    n < 0 &&
                    ((this.element.style.marginTop = n + 2 * t.delta.y + 'px'),
                    o(this, a.y, n + 2 * t.delta.y))),
              !1
            )
          }
          function n(t) {
            var i = Number(this.element.style.marginLeft.replace('px', '')),
              n = Number(this.element.style.marginTop.replace('px', '')),
              r = Number(this.element.style.width.replace('px', '')),
              s = Number(this.element.style.height.replace('px', '')),
              a = e.getElementSize(this.viewer.canvas)
            return (
              this.element &&
                ('horizontal' == this.scroll
                  ? t.scroll > 0
                    ? i > -(r - a.x) &&
                      ((this.element.style.marginLeft =
                        i - 60 * t.scroll + 'px'),
                      o(this, a.x, i - 60 * t.scroll))
                    : t.scroll < 0 &&
                      i < 0 &&
                      ((this.element.style.marginLeft =
                        i - 60 * t.scroll + 'px'),
                      o(this, a.x, i - 60 * t.scroll))
                  : t.scroll < 0
                  ? n > a.y - s &&
                    ((this.element.style.marginTop = n + 60 * t.scroll + 'px'),
                    o(this, a.y, n + 60 * t.scroll))
                  : t.scroll > 0 &&
                    n < 0 &&
                    ((this.element.style.marginTop = n + 60 * t.scroll + 'px'),
                    o(this, a.y, n + 60 * t.scroll))),
              !1
            )
          }
          function o(t, i, n) {
            var o, r, s, a, l, c, h
            for (
              o = 'horizontal' == t.scroll ? t.panelWidth : t.panelHeight,
                r = Math.ceil(i / o) + 5,
                c = r =
                  (r = (s = Math.ceil((Math.abs(n) + i) / o) + 1) - r) < 0
                    ? 0
                    : r;
              c < s && c < t.panels.length;
              c++
            )
              if (!(h = t.panels[c]).activePanel) {
                var u,
                  d = t.viewer.tileSources[c]
                ;(u = d.referenceStripThumbnailUrl
                  ? { type: 'image', url: d.referenceStripThumbnailUrl }
                  : d),
                  ((a = new e.Viewer({
                    id: h.id,
                    tileSources: [u],
                    element: h,
                    navigatorSizeRatio: t.sizeRatio,
                    showNavigator: !1,
                    mouseNavEnabled: !1,
                    showNavigationControl: !1,
                    showSequenceControl: !1,
                    immediateRender: !0,
                    blendTime: 0,
                    animationTime: 0,
                    loadTilesWithAjax: t.viewer.loadTilesWithAjax,
                    ajaxHeaders: t.viewer.ajaxHeaders,
                    useCanvas: t.useCanvas,
                  })).displayRegion = e.makeNeutralElement('div')),
                  (a.displayRegion.id = h.id + '-displayregion'),
                  (a.displayRegion.className = 'displayregion'),
                  ((l = a.displayRegion.style).position = 'relative'),
                  (l.top = '0px'),
                  (l.left = '0px'),
                  (l.fontSize = '0px'),
                  (l.overflow = 'hidden'),
                  (l.float = 'left'),
                  (l.cssFloat = 'left'),
                  (l.styleFloat = 'left'),
                  (l.zIndex = 999999999),
                  (l.cursor = 'default'),
                  (l.width = t.panelWidth - 4 + 'px'),
                  (l.height = t.panelHeight - 4 + 'px'),
                  (a.displayRegion.innerTracker = new e.MouseTracker({
                    element: a.displayRegion,
                    startDisabled: !0,
                  })),
                  h.getElementsByTagName('div')[0].appendChild(a.displayRegion),
                  (t.miniViewers[h.id] = a),
                  (h.activePanel = !0)
              }
          }
          function r(e) {
            var t = e.eventSource.element
            return (
              'horizontal' == this.scroll
                ? (t.style.marginBottom = '0px')
                : (t.style.marginLeft = '0px'),
              !1
            )
          }
          function s(t) {
            var i = t.eventSource.element
            return (
              'horizontal' == this.scroll
                ? (i.style.marginBottom =
                    '-' + e.getElementSize(i).y / 2 + 'px')
                : (i.style.marginLeft = '-' + e.getElementSize(i).x / 2 + 'px'),
              !1
            )
          }
          function a(e) {
            if (e.preventDefaultAction || e.ctrl || e.alt || e.meta) return !0
            switch (e.keyCode) {
              case 38:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: 1,
                    shift: null,
                  }),
                  !1
                )
              case 40:
              case 37:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: -1,
                    shift: null,
                  }),
                  !1
                )
              case 39:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: 1,
                    shift: null,
                  }),
                  !1
                )
              default:
                return !0
            }
          }
          function l(e) {
            if (e.preventDefaultAction || e.ctrl || e.alt || e.meta) return !0
            switch (e.keyCode) {
              case 61:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: 1,
                    shift: null,
                  }),
                  !1
                )
              case 45:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: -1,
                    shift: null,
                  }),
                  !1
                )
              case 48:
              case 119:
              case 87:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: 1,
                    shift: null,
                  }),
                  !1
                )
              case 115:
              case 83:
              case 97:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: -1,
                    shift: null,
                  }),
                  !1
                )
              case 100:
                return (
                  n.call(this, {
                    eventSource: this.tracker,
                    position: null,
                    scroll: 1,
                    shift: null,
                  }),
                  !1
                )
              default:
                return !0
            }
          }
          ;(e.ReferenceStrip = function (c) {
            var h,
              u,
              d,
              p = c.viewer,
              g = e.getElementSize(p.element)
            for (
              c.id ||
                ((c.id = 'referencestrip-' + e.now()),
                (this.element = e.makeNeutralElement('div')),
                (this.element.id = c.id),
                (this.element.className = 'referencestrip')),
                c = e.extend(
                  !0,
                  {
                    sizeRatio: e.DEFAULT_SETTINGS.referenceStripSizeRatio,
                    position: e.DEFAULT_SETTINGS.referenceStripPosition,
                    scroll: e.DEFAULT_SETTINGS.referenceStripScroll,
                    clickTimeThreshold: e.DEFAULT_SETTINGS.clickTimeThreshold,
                  },
                  c,
                  {
                    element: this.element,
                    showNavigator: !1,
                    mouseNavEnabled: !1,
                    showNavigationControl: !1,
                    showSequenceControl: !1,
                  }
                ),
                e.extend(this, c),
                t[this.id] = { animating: !1 },
                this.minPixelRatio = this.viewer.minPixelRatio,
                (u = this.element.style).marginTop = '0px',
                u.marginRight = '0px',
                u.marginBottom = '0px',
                u.marginLeft = '0px',
                u.left = '0px',
                u.bottom = '0px',
                u.border = '0px',
                u.background = '#000',
                u.position = 'relative',
                e.setElementTouchActionNone(this.element),
                e.setElementOpacity(this.element, 0.8),
                this.viewer = p,
                this.innerTracker = new e.MouseTracker({
                  element: this.element,
                  dragHandler: e.delegate(this, i),
                  scrollHandler: e.delegate(this, n),
                  enterHandler: e.delegate(this, r),
                  exitHandler: e.delegate(this, s),
                  keyDownHandler: e.delegate(this, a),
                  keyHandler: e.delegate(this, l),
                }),
                c.width && c.height
                  ? ((this.element.style.width = c.width + 'px'),
                    (this.element.style.height = c.height + 'px'),
                    p.addControl(this.element, {
                      anchor: e.ControlAnchor.BOTTOM_LEFT,
                    }))
                  : 'horizontal' == c.scroll
                  ? ((this.element.style.width =
                      g.x * c.sizeRatio * p.tileSources.length +
                      12 * p.tileSources.length +
                      'px'),
                    (this.element.style.height = g.y * c.sizeRatio + 'px'),
                    p.addControl(this.element, {
                      anchor: e.ControlAnchor.BOTTOM_LEFT,
                    }))
                  : ((this.element.style.height =
                      g.y * c.sizeRatio * p.tileSources.length +
                      12 * p.tileSources.length +
                      'px'),
                    (this.element.style.width = g.x * c.sizeRatio + 'px'),
                    p.addControl(this.element, {
                      anchor: e.ControlAnchor.TOP_LEFT,
                    })),
                this.panelWidth = g.x * this.sizeRatio + 8,
                this.panelHeight = g.y * this.sizeRatio + 8,
                this.panels = [],
                this.miniViewers = {},
                d = 0;
              d < p.tileSources.length;
              d++
            )
              ((h = e.makeNeutralElement('div')).id =
                this.element.id + '-' + d),
                (h.style.width = this.panelWidth + 'px'),
                (h.style.height = this.panelHeight + 'px'),
                (h.style.display = 'inline'),
                (h.style.float = 'left'),
                (h.style.cssFloat = 'left'),
                (h.style.styleFloat = 'left'),
                (h.style.padding = '2px'),
                e.setElementTouchActionNone(h),
                (h.innerTracker = new e.MouseTracker({
                  element: h,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  pressHandler: function (t) {
                    t.eventSource.dragging = e.now()
                  },
                  releaseHandler: function (t) {
                    var i = t.eventSource,
                      n = i.element.id,
                      o = Number(n.split('-')[2]),
                      r = e.now()
                    t.insideElementPressed &&
                      t.insideElementReleased &&
                      i.dragging &&
                      r - i.dragging < i.clickTimeThreshold &&
                      ((i.dragging = null), p.goToPage(o))
                  },
                })),
                this.element.appendChild(h),
                (h.activePanel = !1),
                this.panels.push(h)
            o(this, 'vertical' == this.scroll ? g.y : g.x, 0), this.setFocus(0)
          }),
            e.extend(
              e.ReferenceStrip.prototype,
              e.EventSource.prototype,
              e.Viewer.prototype,
              {
                setFocus: function (t) {
                  var i,
                    n = this.element.querySelector(
                      '#' + this.element.id + '-' + t
                    ),
                    s = e.getElementSize(this.viewer.canvas),
                    a = Number(this.element.style.width.replace('px', '')),
                    l = Number(this.element.style.height.replace('px', '')),
                    c = -Number(
                      this.element.style.marginLeft.replace('px', '')
                    ),
                    h = -Number(this.element.style.marginTop.replace('px', ''))
                  this.currentSelected !== n &&
                    (this.currentSelected &&
                      (this.currentSelected.style.background = '#000'),
                    (this.currentSelected = n),
                    (this.currentSelected.style.background = '#999'),
                    'horizontal' == this.scroll
                      ? (i = Number(t) * (this.panelWidth + 3)) >
                        c + s.x - this.panelWidth
                        ? ((i = Math.min(i, a - s.x)),
                          (this.element.style.marginLeft = -i + 'px'),
                          o(this, s.x, -i))
                        : i < c &&
                          ((i = Math.max(0, i - s.x / 2)),
                          (this.element.style.marginLeft = -i + 'px'),
                          o(this, s.x, -i))
                      : (i = Number(t) * (this.panelHeight + 3)) >
                        h + s.y - this.panelHeight
                      ? ((i = Math.min(i, l - s.y)),
                        (this.element.style.marginTop = -i + 'px'),
                        o(this, s.y, -i))
                      : i < h &&
                        ((i = Math.max(0, i - s.y / 2)),
                        (this.element.style.marginTop = -i + 'px'),
                        o(this, s.y, -i)),
                    (this.currentPage = t),
                    r.call(this, { eventSource: this.innerTracker }))
                },
                update: function () {
                  return (
                    !!t[this.id].animating &&
                    (e.console.log('image reference strip update'), !0)
                  )
                },
                destroy: function () {
                  if (this.miniViewers)
                    for (var e in this.miniViewers)
                      this.miniViewers[e].destroy()
                  this.element &&
                    this.element.parentNode.removeChild(this.element)
                },
              }
            )
        })(OpenSeadragon),
        (function (e) {
          ;(e.DisplayRect = function (t, i, n, o, r, s) {
            e.Rect.apply(this, [t, i, n, o]),
              (this.minLevel = r),
              (this.maxLevel = s)
          }),
            e.extend(e.DisplayRect.prototype, e.Rect.prototype)
        })(OpenSeadragon),
        (function (e) {
          ;(e.Spring = function (t) {
            var i = arguments
            'object' != typeof t &&
              (t = {
                initial: i.length && 'number' == typeof i[0] ? i[0] : void 0,
                springStiffness: i.length > 1 ? i[1].springStiffness : 5,
                animationTime: i.length > 1 ? i[1].animationTime : 1.5,
              }),
              e.console.assert(
                'number' == typeof t.springStiffness && 0 !== t.springStiffness,
                '[OpenSeadragon.Spring] options.springStiffness must be a non-zero number'
              ),
              e.console.assert(
                'number' == typeof t.animationTime && t.animationTime >= 0,
                '[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0'
              ),
              t.exponential && ((this._exponential = !0), delete t.exponential),
              e.extend(!0, this, t),
              (this.current = {
                value:
                  'number' == typeof this.initial
                    ? this.initial
                    : this._exponential
                    ? 0
                    : 1,
                time: e.now(),
              }),
              e.console.assert(
                !this._exponential || 0 !== this.current.value,
                '[OpenSeadragon.Spring] value must be non-zero for exponential springs'
              ),
              (this.start = {
                value: this.current.value,
                time: this.current.time,
              }),
              (this.target = {
                value: this.current.value,
                time: this.current.time,
              }),
              this._exponential &&
                ((this.start._logValue = Math.log(this.start.value)),
                (this.target._logValue = Math.log(this.target.value)),
                (this.current._logValue = Math.log(this.current.value)))
          }),
            (e.Spring.prototype = {
              resetTo: function (t) {
                e.console.assert(
                  !this._exponential || 0 !== t,
                  '[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs'
                ),
                  (this.start.value = this.target.value = this.current.value = t),
                  (this.start.time = this.target.time = this.current.time = e.now()),
                  this._exponential &&
                    ((this.start._logValue = Math.log(this.start.value)),
                    (this.target._logValue = Math.log(this.target.value)),
                    (this.current._logValue = Math.log(this.current.value)))
              },
              springTo: function (t) {
                e.console.assert(
                  !this._exponential || 0 !== t,
                  '[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs'
                ),
                  (this.start.value = this.current.value),
                  (this.start.time = this.current.time),
                  (this.target.value = t),
                  (this.target.time =
                    this.start.time + 1e3 * this.animationTime),
                  this._exponential &&
                    ((this.start._logValue = Math.log(this.start.value)),
                    (this.target._logValue = Math.log(this.target.value)))
              },
              shiftBy: function (t) {
                ;(this.start.value += t),
                  (this.target.value += t),
                  this._exponential &&
                    (e.console.assert(
                      0 !== this.target.value && 0 !== this.start.value,
                      '[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs'
                    ),
                    (this.start._logValue = Math.log(this.start.value)),
                    (this.target._logValue = Math.log(this.target.value)))
              },
              setExponential: function (t) {
                ;(this._exponential = t),
                  this._exponential &&
                    (e.console.assert(
                      0 !== this.current.value &&
                        0 !== this.target.value &&
                        0 !== this.start.value,
                      '[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs'
                    ),
                    (this.start._logValue = Math.log(this.start.value)),
                    (this.target._logValue = Math.log(this.target.value)),
                    (this.current._logValue = Math.log(this.current.value)))
              },
              update: function () {
                var t, i
                ;(this.current.time = e.now()),
                  this._exponential
                    ? ((t = this.start._logValue), (i = this.target._logValue))
                    : ((t = this.start.value), (i = this.target.value))
                var n,
                  o,
                  r =
                    this.current.time >= this.target.time
                      ? i
                      : t +
                        (i - t) *
                          ((n = this.springStiffness),
                          (o =
                            (this.current.time - this.start.time) /
                            (this.target.time - this.start.time)),
                          (1 - Math.exp(n * -o)) / (1 - Math.exp(-n))),
                  s = this.current.value
                return (
                  this._exponential
                    ? (this.current.value = Math.exp(r))
                    : (this.current.value = r),
                  s != this.current.value
                )
              },
              isAtTargetValue: function () {
                return this.current.value === this.target.value
              },
            })
        })(OpenSeadragon),
        (function (e) {
          function t(t) {
            e.extend(
              !0,
              this,
              { timeout: e.DEFAULT_SETTINGS.timeout, jobId: null },
              t
            ),
              (this.image = null)
          }
          ;(t.prototype = {
            errorMsg: null,
            start: function () {
              var t = this,
                i = this.abort
              ;(this.image = new Image()),
                (this.image.onload = function () {
                  t.finish(!0)
                }),
                (this.image.onabort = this.image.onerror = function () {
                  ;(t.errorMsg = 'Image load aborted'), t.finish(!1)
                }),
                (this.jobId = window.setTimeout(function () {
                  ;(t.errorMsg =
                    'Image load exceeded timeout (' + t.timeout + ' ms)'),
                    t.finish(!1)
                }, this.timeout)),
                this.loadWithAjax
                  ? ((this.request = e.makeAjaxRequest({
                      url: this.src,
                      withCredentials: this.ajaxWithCredentials,
                      headers: this.ajaxHeaders,
                      responseType: 'arraybuffer',
                      success: function (e) {
                        var i
                        try {
                          i = new window.Blob([e.response])
                        } catch (t) {
                          var n =
                            window.BlobBuilder ||
                            window.WebKitBlobBuilder ||
                            window.MozBlobBuilder ||
                            window.MSBlobBuilder
                          if ('TypeError' === t.name && n) {
                            var o = new n()
                            o.append(e.response), (i = o.getBlob())
                          }
                        }
                        0 === i.size &&
                          ((t.errorMsg = 'Empty image response.'), t.finish(!1))
                        var r = (
                          window.URL || window.webkitURL
                        ).createObjectURL(i)
                        t.image.src = r
                      },
                      error: function (e) {
                        ;(t.errorMsg = 'Image load aborted - XHR error'),
                          t.finish(!1)
                      },
                    })),
                    (this.abort = function () {
                      t.request.abort(), 'function' == typeof i && i()
                    }))
                  : (!1 !== this.crossOriginPolicy &&
                      (this.image.crossOrigin = this.crossOriginPolicy),
                    (this.image.src = this.src))
            },
            finish: function (e) {
              ;(this.image.onload = this.image.onerror = this.image.onabort = null),
                e || (this.image = null),
                this.jobId && window.clearTimeout(this.jobId),
                this.callback(this)
            },
          }),
            (e.ImageLoader = function (t) {
              e.extend(
                !0,
                this,
                {
                  jobLimit: e.DEFAULT_SETTINGS.imageLoaderLimit,
                  timeout: e.DEFAULT_SETTINGS.timeout,
                  jobQueue: [],
                  jobsInProgress: 0,
                },
                t
              )
            }),
            (e.ImageLoader.prototype = {
              addJob: function (e) {
                var i = this,
                  n = new t({
                    src: e.src,
                    loadWithAjax: e.loadWithAjax,
                    ajaxHeaders: e.loadWithAjax ? e.ajaxHeaders : null,
                    crossOriginPolicy: e.crossOriginPolicy,
                    ajaxWithCredentials: e.ajaxWithCredentials,
                    callback: function (t) {
                      !(function (e, t, i) {
                        e.jobsInProgress--,
                          (!e.jobLimit || e.jobsInProgress < e.jobLimit) &&
                            e.jobQueue.length > 0 &&
                            (e.jobQueue.shift().start(), e.jobsInProgress++)
                        i(t.image, t.errorMsg, t.request)
                      })(i, t, e.callback)
                    },
                    abort: e.abort,
                    timeout: this.timeout,
                  })
                !this.jobLimit || this.jobsInProgress < this.jobLimit
                  ? (n.start(), this.jobsInProgress++)
                  : this.jobQueue.push(n)
              },
              clear: function () {
                for (var e = 0; e < this.jobQueue.length; e++) {
                  var t = this.jobQueue[e]
                  'function' == typeof t.abort && t.abort()
                }
                this.jobQueue = []
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.Tile = function (e, t, i, n, o, r, s, a, l, c) {
            ;(this.level = e),
              (this.x = t),
              (this.y = i),
              (this.bounds = n),
              (this.sourceBounds = c),
              (this.exists = o),
              (this.url = r),
              (this.context2D = s),
              (this.loadWithAjax = a),
              (this.ajaxHeaders = l),
              this.ajaxHeaders
                ? (this.cacheKey =
                    this.url + '+' + JSON.stringify(this.ajaxHeaders))
                : (this.cacheKey = this.url),
              (this.loaded = !1),
              (this.loading = !1),
              (this.element = null),
              (this.imgElement = null),
              (this.image = null),
              (this.style = null),
              (this.position = null),
              (this.size = null),
              (this.blendStart = null),
              (this.opacity = null),
              (this.squaredDistance = null),
              (this.visibility = null),
              (this.beingDrawn = !1),
              (this.lastTouchTime = 0),
              (this.isRightMost = !1),
              (this.isBottomMost = !1)
          }),
            (e.Tile.prototype = {
              toString: function () {
                return this.level + '/' + this.x + '_' + this.y
              },
              _hasTransparencyChannel: function () {
                return !!this.context2D || this.url.match('.png')
              },
              drawHTML: function (t) {
                this.cacheImageRecord
                  ? this.loaded
                    ? (this.element ||
                        ((this.element = e.makeNeutralElement('div')),
                        (this.imgElement = this.cacheImageRecord
                          .getImage()
                          .cloneNode()),
                        (this.imgElement.style.msInterpolationMode =
                          'nearest-neighbor'),
                        (this.imgElement.style.width = '100%'),
                        (this.imgElement.style.height = '100%'),
                        (this.style = this.element.style),
                        (this.style.position = 'absolute')),
                      this.element.parentNode != t &&
                        t.appendChild(this.element),
                      this.imgElement.parentNode != this.element &&
                        this.element.appendChild(this.imgElement),
                      (this.style.top = this.position.y + 'px'),
                      (this.style.left = this.position.x + 'px'),
                      (this.style.height = this.size.y + 'px'),
                      (this.style.width = this.size.x + 'px'),
                      e.setElementOpacity(this.element, this.opacity))
                    : e.console.warn(
                        "Attempting to draw tile %s when it's not yet loaded.",
                        this.toString()
                      )
                  : e.console.warn(
                      "[Tile.drawHTML] attempting to draw tile %s when it's not cached",
                      this.toString()
                    )
              },
              drawCanvas: function (t, i, n, o) {
                var r,
                  s,
                  a,
                  l = this.position.times(e.pixelDensityRatio),
                  c = this.size.times(e.pixelDensityRatio)
                this.context2D || this.cacheImageRecord
                  ? ((r =
                      this.context2D ||
                      this.cacheImageRecord.getRenderedContext()),
                    this.loaded && r
                      ? (t.save(),
                        (t.globalAlpha = this.opacity),
                        'number' == typeof n &&
                          1 !== n &&
                          ((l = l.times(n)), (c = c.times(n))),
                        o instanceof e.Point && (l = l.plus(o)),
                        1 === t.globalAlpha &&
                          this._hasTransparencyChannel() &&
                          t.clearRect(l.x, l.y, c.x, c.y),
                        i({ context: t, tile: this, rendered: r }),
                        this.sourceBounds
                          ? ((s = Math.min(
                              this.sourceBounds.width,
                              r.canvas.width
                            )),
                            (a = Math.min(
                              this.sourceBounds.height,
                              r.canvas.height
                            )))
                          : ((s = r.canvas.width), (a = r.canvas.height)),
                        t.drawImage(r.canvas, 0, 0, s, a, l.x, l.y, c.x, c.y),
                        t.restore())
                      : e.console.warn(
                          "Attempting to draw tile %s when it's not yet loaded.",
                          this.toString()
                        ))
                  : e.console.warn(
                      "[Tile.drawCanvas] attempting to draw tile %s when it's not cached",
                      this.toString()
                    )
              },
              getScaleForEdgeSmoothing: function () {
                var t
                if (this.cacheImageRecord)
                  t = this.cacheImageRecord.getRenderedContext()
                else {
                  if (!this.context2D)
                    return (
                      e.console.warn(
                        "[Tile.drawCanvas] attempting to get tile scale %s when tile's not cached",
                        this.toString()
                      ),
                      1
                    )
                  t = this.context2D
                }
                return t.canvas.width / (this.size.x * e.pixelDensityRatio)
              },
              getTranslationForEdgeSmoothing: function (t, i, n) {
                var o = Math.max(1, Math.ceil((n.x - i.x) / 2)),
                  r = Math.max(1, Math.ceil((n.y - i.y) / 2))
                return new e.Point(o, r).minus(
                  this.position
                    .times(e.pixelDensityRatio)
                    .times(t || 1)
                    .apply(function (e) {
                      return e % 1
                    })
                )
              },
              unload: function () {
                this.imgElement &&
                  this.imgElement.parentNode &&
                  this.imgElement.parentNode.removeChild(this.imgElement),
                  this.element &&
                    this.element.parentNode &&
                    this.element.parentNode.removeChild(this.element),
                  (this.element = null),
                  (this.imgElement = null),
                  (this.loaded = !1),
                  (this.loading = !1)
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.OverlayPlacement = e.Placement),
            (e.OverlayRotationMode = e.freezeObject({
              NO_ROTATION: 1,
              EXACT: 2,
              BOUNDING_BOX: 3,
            })),
            (e.Overlay = function (t, i, n) {
              var o
              ;(o = e.isPlainObject(t)
                ? t
                : { element: t, location: i, placement: n }),
                (this.element = o.element),
                (this.style = o.element.style),
                this._init(o)
            }),
            (e.Overlay.prototype = {
              _init: function (t) {
                ;(this.location = t.location),
                  (this.placement =
                    void 0 === t.placement
                      ? e.Placement.TOP_LEFT
                      : t.placement),
                  (this.onDraw = t.onDraw),
                  (this.checkResize =
                    void 0 === t.checkResize || t.checkResize),
                  (this.width = void 0 === t.width ? null : t.width),
                  (this.height = void 0 === t.height ? null : t.height),
                  (this.rotationMode =
                    t.rotationMode || e.OverlayRotationMode.EXACT),
                  this.location instanceof e.Rect &&
                    ((this.width = this.location.width),
                    (this.height = this.location.height),
                    (this.location = this.location.getTopLeft()),
                    (this.placement = e.Placement.TOP_LEFT)),
                  (this.scales = null !== this.width && null !== this.height),
                  (this.bounds = new e.Rect(
                    this.location.x,
                    this.location.y,
                    this.width,
                    this.height
                  )),
                  (this.position = this.location)
              },
              adjust: function (t, i) {
                var n = e.Placement.properties[this.placement]
                n &&
                  (n.isHorizontallyCentered
                    ? (t.x -= i.x / 2)
                    : n.isRight && (t.x -= i.x),
                  n.isVerticallyCentered
                    ? (t.y -= i.y / 2)
                    : n.isBottom && (t.y -= i.y))
              },
              destroy: function () {
                var t = this.element,
                  i = this.style
                t.parentNode &&
                  (t.parentNode.removeChild(t),
                  t.prevElementParent &&
                    ((i.display = 'none'), document.body.appendChild(t))),
                  (this.onDraw = null),
                  (i.top = ''),
                  (i.left = ''),
                  (i.position = ''),
                  null !== this.width && (i.width = ''),
                  null !== this.height && (i.height = '')
                var n = e.getCssPropertyWithVendorPrefix('transformOrigin'),
                  o = e.getCssPropertyWithVendorPrefix('transform')
                n && o && ((i[n] = ''), (i[o] = ''))
              },
              drawHTML: function (t, i) {
                var n = this.element
                n.parentNode !== t &&
                  ((n.prevElementParent = n.parentNode),
                  (n.prevNextSibling = n.nextSibling),
                  t.appendChild(n),
                  (this.style.position = 'absolute'),
                  (this.size = e.getElementSize(n)))
                var o = this._getOverlayPositionAndSize(i),
                  r = o.position,
                  s = (this.size = o.size),
                  a = o.rotate
                if (this.onDraw) this.onDraw(r, s, this.element)
                else {
                  var l = this.style
                  ;(l.left = r.x + 'px'),
                    (l.top = r.y + 'px'),
                    null !== this.width && (l.width = s.x + 'px'),
                    null !== this.height && (l.height = s.y + 'px')
                  var c = e.getCssPropertyWithVendorPrefix('transformOrigin'),
                    h = e.getCssPropertyWithVendorPrefix('transform')
                  c &&
                    h &&
                    (a
                      ? ((l[c] = this._getTransformOrigin()),
                        (l[h] = 'rotate(' + a + 'deg)'))
                      : ((l[c] = ''), (l[h] = ''))),
                    'none' !== l.display && (l.display = 'block')
                }
              },
              _getOverlayPositionAndSize: function (t) {
                var i = t.pixelFromPoint(this.location, !0),
                  n = this._getSizeInPixels(t)
                this.adjust(i, n)
                var o = 0
                if (
                  t.degrees &&
                  this.rotationMode !== e.OverlayRotationMode.NO_ROTATION
                )
                  if (
                    this.rotationMode === e.OverlayRotationMode.BOUNDING_BOX &&
                    null !== this.width &&
                    null !== this.height
                  ) {
                    var r = new e.Rect(i.x, i.y, n.x, n.y),
                      s = this._getBoundingBox(r, t.degrees)
                    ;(i = s.getTopLeft()), (n = s.getSize())
                  } else o = t.degrees
                return { position: i, size: n, rotate: o }
              },
              _getSizeInPixels: function (t) {
                var i = this.size.x,
                  n = this.size.y
                if (null !== this.width || null !== this.height) {
                  var o = t.deltaPixelsFromPointsNoRotate(
                    new e.Point(this.width || 0, this.height || 0),
                    !0
                  )
                  null !== this.width && (i = o.x),
                    null !== this.height && (n = o.y)
                }
                if (
                  this.checkResize &&
                  (null === this.width || null === this.height)
                ) {
                  var r = (this.size = e.getElementSize(this.element))
                  null === this.width && (i = r.x),
                    null === this.height && (n = r.y)
                }
                return new e.Point(i, n)
              },
              _getBoundingBox: function (e, t) {
                var i = this._getPlacementPoint(e)
                return e.rotate(t, i).getBoundingBox()
              },
              _getPlacementPoint: function (t) {
                var i = new e.Point(t.x, t.y),
                  n = e.Placement.properties[this.placement]
                return (
                  n &&
                    (n.isHorizontallyCentered
                      ? (i.x += t.width / 2)
                      : n.isRight && (i.x += t.width),
                    n.isVerticallyCentered
                      ? (i.y += t.height / 2)
                      : n.isBottom && (i.y += t.height)),
                  i
                )
              },
              _getTransformOrigin: function () {
                var t = '',
                  i = e.Placement.properties[this.placement]
                return i
                  ? (i.isLeft ? (t = 'left') : i.isRight && (t = 'right'),
                    i.isTop ? (t += ' top') : i.isBottom && (t += ' bottom'),
                    t)
                  : t
              },
              update: function (t, i) {
                var n = e.isPlainObject(t) ? t : { location: t, placement: i }
                this._init({
                  location: n.location || this.location,
                  placement:
                    void 0 !== n.placement ? n.placement : this.placement,
                  onDraw: n.onDraw || this.onDraw,
                  checkResize: n.checkResize || this.checkResize,
                  width: void 0 !== n.width ? n.width : this.width,
                  height: void 0 !== n.height ? n.height : this.height,
                  rotationMode: n.rotationMode || this.rotationMode,
                })
              },
              getBounds: function (t) {
                e.console.assert(
                  t,
                  'A viewport must now be passed to Overlay.getBounds.'
                )
                var i = this.width,
                  n = this.height
                if (null === i || null === n) {
                  var o = t.deltaPointsFromPixelsNoRotate(this.size, !0)
                  null === i && (i = o.x), null === n && (n = o.y)
                }
                var r = this.location.clone()
                return (
                  this.adjust(r, new e.Point(i, n)),
                  this._adjustBoundsForRotation(t, new e.Rect(r.x, r.y, i, n))
                )
              },
              _adjustBoundsForRotation: function (t, i) {
                if (
                  !t ||
                  0 === t.degrees ||
                  this.rotationMode === e.OverlayRotationMode.EXACT
                )
                  return i
                if (this.rotationMode === e.OverlayRotationMode.BOUNDING_BOX) {
                  if (null === this.width || null === this.height) return i
                  var n = this._getOverlayPositionAndSize(t)
                  return t.viewerElementToViewportRectangle(
                    new e.Rect(n.position.x, n.position.y, n.size.x, n.size.y)
                  )
                }
                return i.rotate(-t.degrees, this._getPlacementPoint(i))
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.Drawer = function (t) {
            e.console.assert(t.viewer, '[Drawer] options.viewer is required')
            var i = arguments
            if (
              (e.isPlainObject(t) ||
                (t = { source: i[0], viewport: i[1], element: i[2] }),
              e.console.assert(
                t.viewport,
                '[Drawer] options.viewport is required'
              ),
              e.console.assert(
                t.element,
                '[Drawer] options.element is required'
              ),
              t.source &&
                e.console.error(
                  '[Drawer] options.source is no longer accepted; use TiledImage instead'
                ),
              (this.viewer = t.viewer),
              (this.viewport = t.viewport),
              (this.debugGridColor =
                'string' == typeof t.debugGridColor
                  ? [t.debugGridColor]
                  : t.debugGridColor || e.DEFAULT_SETTINGS.debugGridColor),
              t.opacity &&
                e.console.error(
                  '[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead'
                ),
              (this.useCanvas =
                e.supportsCanvas && (!this.viewer || this.viewer.useCanvas)),
              (this.container = e.getElement(t.element)),
              (this.canvas = e.makeNeutralElement(
                this.useCanvas ? 'canvas' : 'div'
              )),
              (this.context = this.useCanvas
                ? this.canvas.getContext('2d')
                : null),
              (this.sketchCanvas = null),
              (this.sketchContext = null),
              (this.element = this.container),
              (this.container.dir = 'ltr'),
              this.useCanvas)
            ) {
              var n = this._calculateCanvasSize()
              ;(this.canvas.width = n.x), (this.canvas.height = n.y)
            }
            ;(this.canvas.style.width = '100%'),
              (this.canvas.style.height = '100%'),
              (this.canvas.style.position = 'absolute'),
              e.setElementOpacity(this.canvas, this.opacity, !0),
              (this.container.style.textAlign = 'left'),
              this.container.appendChild(this.canvas),
              (this._imageSmoothingEnabled = !0)
          }),
            (e.Drawer.prototype = {
              addOverlay: function (t, i, n, o) {
                return (
                  e.console.error(
                    'drawer.addOverlay is deprecated. Use viewer.addOverlay instead.'
                  ),
                  this.viewer.addOverlay(t, i, n, o),
                  this
                )
              },
              updateOverlay: function (t, i, n) {
                return (
                  e.console.error(
                    'drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.'
                  ),
                  this.viewer.updateOverlay(t, i, n),
                  this
                )
              },
              removeOverlay: function (t) {
                return (
                  e.console.error(
                    'drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.'
                  ),
                  this.viewer.removeOverlay(t),
                  this
                )
              },
              clearOverlays: function () {
                return (
                  e.console.error(
                    'drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.'
                  ),
                  this.viewer.clearOverlays(),
                  this
                )
              },
              viewportCoordToDrawerCoord: function (t) {
                var i = this.viewport.pixelFromPointNoRotate(t, !0)
                return new e.Point(
                  i.x * e.pixelDensityRatio,
                  i.y * e.pixelDensityRatio
                )
              },
              clipWithPolygons: function (e, t) {
                if (this.useCanvas) {
                  var i = this._getContext(t)
                  i.beginPath(),
                    e.forEach(function (e) {
                      e.forEach(function (e, t) {
                        i[0 === t ? 'moveTo' : 'lineTo'](e.x, e.y)
                      })
                    }),
                    i.clip()
                }
              },
              setOpacity: function (t) {
                e.console.error(
                  'drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.'
                )
                for (
                  var i = this.viewer.world, n = 0;
                  n < i.getItemCount();
                  n++
                )
                  i.getItemAt(n).setOpacity(t)
                return this
              },
              getOpacity: function () {
                e.console.error(
                  'drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.'
                )
                for (
                  var t = this.viewer.world, i = 0, n = 0;
                  n < t.getItemCount();
                  n++
                ) {
                  var o = t.getItemAt(n).getOpacity()
                  o > i && (i = o)
                }
                return i
              },
              needsUpdate: function () {
                return (
                  e.console.error(
                    '[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead.'
                  ),
                  this.viewer.world.needsDraw()
                )
              },
              numTilesLoaded: function () {
                return (
                  e.console.error(
                    '[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead.'
                  ),
                  this.viewer.tileCache.numTilesLoaded()
                )
              },
              reset: function () {
                return (
                  e.console.error(
                    '[Drawer.reset] this function is deprecated. Use World.resetItems instead.'
                  ),
                  this.viewer.world.resetItems(),
                  this
                )
              },
              update: function () {
                return (
                  e.console.error(
                    '[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead.'
                  ),
                  this.clear(),
                  this.viewer.world.draw(),
                  this
                )
              },
              canRotate: function () {
                return this.useCanvas
              },
              destroy: function () {
                ;(this.canvas.width = 1),
                  (this.canvas.height = 1),
                  (this.sketchCanvas = null),
                  (this.sketchContext = null)
              },
              clear: function () {
                if (((this.canvas.innerHTML = ''), this.useCanvas)) {
                  var e = this._calculateCanvasSize()
                  if (
                    (this.canvas.width != e.x || this.canvas.height != e.y) &&
                    ((this.canvas.width = e.x),
                    (this.canvas.height = e.y),
                    this._updateImageSmoothingEnabled(this.context),
                    null !== this.sketchCanvas)
                  ) {
                    var t = this._calculateSketchCanvasSize()
                    ;(this.sketchCanvas.width = t.x),
                      (this.sketchCanvas.height = t.y),
                      this._updateImageSmoothingEnabled(this.sketchContext)
                  }
                  this._clear()
                }
              },
              _clear: function (e, t) {
                if (this.useCanvas) {
                  var i = this._getContext(e)
                  if (t) i.clearRect(t.x, t.y, t.width, t.height)
                  else {
                    var n = i.canvas
                    i.clearRect(0, 0, n.width, n.height)
                  }
                }
              },
              viewportToDrawerRectangle: function (t) {
                var i = this.viewport.pixelFromPointNoRotate(
                    t.getTopLeft(),
                    !0
                  ),
                  n = this.viewport.deltaPixelsFromPointsNoRotate(
                    t.getSize(),
                    !0
                  )
                return new e.Rect(
                  i.x * e.pixelDensityRatio,
                  i.y * e.pixelDensityRatio,
                  n.x * e.pixelDensityRatio,
                  n.y * e.pixelDensityRatio
                )
              },
              drawTile: function (t, i, n, o, r) {
                if (
                  (e.console.assert(t, '[Drawer.drawTile] tile is required'),
                  e.console.assert(
                    i,
                    '[Drawer.drawTile] drawingHandler is required'
                  ),
                  this.useCanvas)
                ) {
                  var s = this._getContext(n)
                  ;(o = o || 1), t.drawCanvas(s, i, o, r)
                } else t.drawHTML(this.canvas)
              },
              _getContext: function (e) {
                var t = this.context
                if (e) {
                  if (null === this.sketchCanvas) {
                    this.sketchCanvas = document.createElement('canvas')
                    var i = this._calculateSketchCanvasSize()
                    if (
                      ((this.sketchCanvas.width = i.x),
                      (this.sketchCanvas.height = i.y),
                      (this.sketchContext = this.sketchCanvas.getContext('2d')),
                      0 === this.viewport.getRotation())
                    ) {
                      var n = this
                      this.viewer.addHandler('rotate', function e() {
                        if (0 !== n.viewport.getRotation()) {
                          n.viewer.removeHandler('rotate', e)
                          var t = n._calculateSketchCanvasSize()
                          ;(n.sketchCanvas.width = t.x),
                            (n.sketchCanvas.height = t.y)
                        }
                      })
                    }
                    this._updateImageSmoothingEnabled(this.sketchContext)
                  }
                  t = this.sketchContext
                }
                return t
              },
              saveContext: function (e) {
                this.useCanvas && this._getContext(e).save()
              },
              restoreContext: function (e) {
                this.useCanvas && this._getContext(e).restore()
              },
              setClip: function (e, t) {
                if (this.useCanvas) {
                  var i = this._getContext(t)
                  i.beginPath(), i.rect(e.x, e.y, e.width, e.height), i.clip()
                }
              },
              drawRectangle: function (e, t, i) {
                if (this.useCanvas) {
                  var n = this._getContext(i)
                  n.save(),
                    (n.fillStyle = t),
                    n.fillRect(e.x, e.y, e.width, e.height),
                    n.restore()
                }
              },
              blendSketch: function (t, i, n, o) {
                var r = t
                if (
                  (e.isPlainObject(r) ||
                    (r = {
                      opacity: t,
                      scale: i,
                      translate: n,
                      compositeOperation: o,
                    }),
                  this.useCanvas && this.sketchCanvas)
                ) {
                  ;(t = r.opacity), (o = r.compositeOperation)
                  var s = r.bounds
                  if (
                    (this.context.save(),
                    (this.context.globalAlpha = t),
                    o && (this.context.globalCompositeOperation = o),
                    s)
                  )
                    s.x < 0 && ((s.width += s.x), (s.x = 0)),
                      s.x + s.width > this.canvas.width &&
                        (s.width = this.canvas.width - s.x),
                      s.y < 0 && ((s.height += s.y), (s.y = 0)),
                      s.y + s.height > this.canvas.height &&
                        (s.height = this.canvas.height - s.y),
                      this.context.drawImage(
                        this.sketchCanvas,
                        s.x,
                        s.y,
                        s.width,
                        s.height,
                        s.x,
                        s.y,
                        s.width,
                        s.height
                      )
                  else {
                    i = r.scale || 1
                    var a =
                        (n = r.translate) instanceof e.Point
                          ? n
                          : new e.Point(0, 0),
                      l = 0,
                      c = 0
                    if (n) {
                      var h = this.sketchCanvas.width - this.canvas.width,
                        u = this.sketchCanvas.height - this.canvas.height
                      ;(l = Math.round(h / 2)), (c = Math.round(u / 2))
                    }
                    this.context.drawImage(
                      this.sketchCanvas,
                      a.x - l * i,
                      a.y - c * i,
                      (this.canvas.width + 2 * l) * i,
                      (this.canvas.height + 2 * c) * i,
                      -l,
                      -c,
                      this.canvas.width + 2 * l,
                      this.canvas.height + 2 * c
                    )
                  }
                  this.context.restore()
                }
              },
              drawDebugInfo: function (t, i, n, o) {
                if (this.useCanvas) {
                  var r =
                      this.viewer.world.getIndexOfItem(o) %
                      this.debugGridColor.length,
                    s = this.context
                  s.save(),
                    (s.lineWidth = 2 * e.pixelDensityRatio),
                    (s.font =
                      'small-caps bold ' +
                      13 * e.pixelDensityRatio +
                      'px arial'),
                    (s.strokeStyle = this.debugGridColor[r]),
                    (s.fillStyle = this.debugGridColor[r]),
                    0 !== this.viewport.degrees &&
                      this._offsetForRotation({
                        degrees: this.viewport.degrees,
                      }),
                    o.getRotation(!0) % 360 != 0 &&
                      this._offsetForRotation({
                        degrees: o.getRotation(!0),
                        point: o.viewport.pixelFromPointNoRotate(
                          o._getRotationPoint(!0),
                          !0
                        ),
                      }),
                    0 === o.viewport.degrees &&
                      o.getRotation(!0) % 360 == 0 &&
                      o._drawer.viewer.viewport.getFlip() &&
                      o._drawer._flip(),
                    s.strokeRect(
                      t.position.x * e.pixelDensityRatio,
                      t.position.y * e.pixelDensityRatio,
                      t.size.x * e.pixelDensityRatio,
                      t.size.y * e.pixelDensityRatio
                    )
                  var a = (t.position.x + t.size.x / 2) * e.pixelDensityRatio,
                    l = (t.position.y + t.size.y / 2) * e.pixelDensityRatio
                  s.translate(a, l),
                    s.rotate((Math.PI / 180) * -this.viewport.degrees),
                    s.translate(-a, -l),
                    0 === t.x &&
                      0 === t.y &&
                      (s.fillText(
                        'Zoom: ' + this.viewport.getZoom(),
                        t.position.x * e.pixelDensityRatio,
                        (t.position.y - 30) * e.pixelDensityRatio
                      ),
                      s.fillText(
                        'Pan: ' + this.viewport.getBounds().toString(),
                        t.position.x * e.pixelDensityRatio,
                        (t.position.y - 20) * e.pixelDensityRatio
                      )),
                    s.fillText(
                      'Level: ' + t.level,
                      (t.position.x + 10) * e.pixelDensityRatio,
                      (t.position.y + 20) * e.pixelDensityRatio
                    ),
                    s.fillText(
                      'Column: ' + t.x,
                      (t.position.x + 10) * e.pixelDensityRatio,
                      (t.position.y + 30) * e.pixelDensityRatio
                    ),
                    s.fillText(
                      'Row: ' + t.y,
                      (t.position.x + 10) * e.pixelDensityRatio,
                      (t.position.y + 40) * e.pixelDensityRatio
                    ),
                    s.fillText(
                      'Order: ' + n + ' of ' + i,
                      (t.position.x + 10) * e.pixelDensityRatio,
                      (t.position.y + 50) * e.pixelDensityRatio
                    ),
                    s.fillText(
                      'Size: ' + t.size.toString(),
                      (t.position.x + 10) * e.pixelDensityRatio,
                      (t.position.y + 60) * e.pixelDensityRatio
                    ),
                    s.fillText(
                      'Position: ' + t.position.toString(),
                      (t.position.x + 10) * e.pixelDensityRatio,
                      (t.position.y + 70) * e.pixelDensityRatio
                    ),
                    0 !== this.viewport.degrees &&
                      this._restoreRotationChanges(),
                    o.getRotation(!0) % 360 != 0 &&
                      this._restoreRotationChanges(),
                    0 === o.viewport.degrees &&
                      o.getRotation(!0) % 360 == 0 &&
                      o._drawer.viewer.viewport.getFlip() &&
                      o._drawer._flip(),
                    s.restore()
                }
              },
              debugRect: function (t) {
                if (this.useCanvas) {
                  var i = this.context
                  i.save(),
                    (i.lineWidth = 2 * e.pixelDensityRatio),
                    (i.strokeStyle = this.debugGridColor[0]),
                    (i.fillStyle = this.debugGridColor[0]),
                    i.strokeRect(
                      t.x * e.pixelDensityRatio,
                      t.y * e.pixelDensityRatio,
                      t.width * e.pixelDensityRatio,
                      t.height * e.pixelDensityRatio
                    ),
                    i.restore()
                }
              },
              setImageSmoothingEnabled: function (e) {
                this.useCanvas &&
                  ((this._imageSmoothingEnabled = e),
                  this._updateImageSmoothingEnabled(this.context),
                  this.viewer.forceRedraw())
              },
              _updateImageSmoothingEnabled: function (e) {
                ;(e.msImageSmoothingEnabled = this._imageSmoothingEnabled),
                  (e.imageSmoothingEnabled = this._imageSmoothingEnabled)
              },
              getCanvasSize: function (t) {
                var i = this._getContext(t).canvas
                return new e.Point(i.width, i.height)
              },
              getCanvasCenter: function () {
                return new e.Point(
                  this.canvas.width / 2,
                  this.canvas.height / 2
                )
              },
              _offsetForRotation: function (t) {
                var i = t.point
                    ? t.point.times(e.pixelDensityRatio)
                    : this.getCanvasCenter(),
                  n = this._getContext(t.useSketch)
                n.save(),
                  n.translate(i.x, i.y),
                  this.viewer.viewport.flipped
                    ? (n.rotate((Math.PI / 180) * -t.degrees), n.scale(-1, 1))
                    : n.rotate((Math.PI / 180) * t.degrees),
                  n.translate(-i.x, -i.y)
              },
              _flip: function (t) {
                var i = (t = t || {}).point
                    ? t.point.times(e.pixelDensityRatio)
                    : this.getCanvasCenter(),
                  n = this._getContext(t.useSketch)
                n.translate(i.x, 0), n.scale(-1, 1), n.translate(-i.x, 0)
              },
              _restoreRotationChanges: function (e) {
                this._getContext(e).restore()
              },
              _calculateCanvasSize: function () {
                var t = e.pixelDensityRatio,
                  i = this.viewport.getContainerSize()
                return { x: Math.round(i.x * t), y: Math.round(i.y * t) }
              },
              _calculateSketchCanvasSize: function () {
                var e = this._calculateCanvasSize()
                if (0 === this.viewport.getRotation()) return e
                var t = Math.ceil(Math.sqrt(e.x * e.x + e.y * e.y))
                return { x: t, y: t }
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.Viewport = function (t) {
            var i = arguments
            i.length &&
              i[0] instanceof e.Point &&
              (t = { containerSize: i[0], contentSize: i[1], config: i[2] }),
              t.config && (e.extend(!0, t, t.config), delete t.config),
              (this._margins = e.extend(
                { left: 0, top: 0, right: 0, bottom: 0 },
                t.margins || {}
              )),
              delete t.margins,
              e.extend(
                !0,
                this,
                {
                  containerSize: null,
                  contentSize: null,
                  zoomPoint: null,
                  viewer: null,
                  springStiffness: e.DEFAULT_SETTINGS.springStiffness,
                  animationTime: e.DEFAULT_SETTINGS.animationTime,
                  minZoomImageRatio: e.DEFAULT_SETTINGS.minZoomImageRatio,
                  maxZoomPixelRatio: e.DEFAULT_SETTINGS.maxZoomPixelRatio,
                  visibilityRatio: e.DEFAULT_SETTINGS.visibilityRatio,
                  wrapHorizontal: e.DEFAULT_SETTINGS.wrapHorizontal,
                  wrapVertical: e.DEFAULT_SETTINGS.wrapVertical,
                  defaultZoomLevel: e.DEFAULT_SETTINGS.defaultZoomLevel,
                  minZoomLevel: e.DEFAULT_SETTINGS.minZoomLevel,
                  maxZoomLevel: e.DEFAULT_SETTINGS.maxZoomLevel,
                  degrees: e.DEFAULT_SETTINGS.degrees,
                  flipped: e.DEFAULT_SETTINGS.flipped,
                  homeFillsViewer: e.DEFAULT_SETTINGS.homeFillsViewer,
                },
                t
              ),
              this._updateContainerInnerSize(),
              (this.centerSpringX = new e.Spring({
                initial: 0,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
              })),
              (this.centerSpringY = new e.Spring({
                initial: 0,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
              })),
              (this.zoomSpring = new e.Spring({
                exponential: !0,
                initial: 1,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
              })),
              (this._oldCenterX = this.centerSpringX.current.value),
              (this._oldCenterY = this.centerSpringY.current.value),
              (this._oldZoom = this.zoomSpring.current.value),
              this._setContentBounds(new e.Rect(0, 0, 1, 1), 1),
              this.goHome(!0),
              this.update()
          }),
            (e.Viewport.prototype = {
              resetContentSize: function (t) {
                return (
                  e.console.assert(
                    t,
                    '[Viewport.resetContentSize] contentSize is required'
                  ),
                  e.console.assert(
                    t instanceof e.Point,
                    '[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point'
                  ),
                  e.console.assert(
                    t.x > 0,
                    '[Viewport.resetContentSize] contentSize.x must be greater than 0'
                  ),
                  e.console.assert(
                    t.y > 0,
                    '[Viewport.resetContentSize] contentSize.y must be greater than 0'
                  ),
                  this._setContentBounds(new e.Rect(0, 0, 1, t.y / t.x), t.x),
                  this
                )
              },
              setHomeBounds: function (t, i) {
                e.console.error(
                  '[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.'
                ),
                  this._setContentBounds(t, i)
              },
              _setContentBounds: function (t, i) {
                e.console.assert(
                  t,
                  '[Viewport._setContentBounds] bounds is required'
                ),
                  e.console.assert(
                    t instanceof e.Rect,
                    '[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect'
                  ),
                  e.console.assert(
                    t.width > 0,
                    '[Viewport._setContentBounds] bounds.width must be greater than 0'
                  ),
                  e.console.assert(
                    t.height > 0,
                    '[Viewport._setContentBounds] bounds.height must be greater than 0'
                  ),
                  (this._contentBoundsNoRotate = t.clone()),
                  (this._contentSizeNoRotate = this._contentBoundsNoRotate
                    .getSize()
                    .times(i)),
                  (this._contentBounds = t
                    .rotate(this.degrees)
                    .getBoundingBox()),
                  (this._contentSize = this._contentBounds.getSize().times(i)),
                  (this._contentAspectRatio =
                    this._contentSize.x / this._contentSize.y),
                  this.viewer &&
                    this.viewer.raiseEvent('reset-size', {
                      contentSize: this._contentSizeNoRotate.clone(),
                      contentFactor: i,
                      homeBounds: this._contentBoundsNoRotate.clone(),
                      contentBounds: this._contentBounds.clone(),
                    })
              },
              getHomeZoom: function () {
                if (this.defaultZoomLevel) return this.defaultZoomLevel
                var e = this._contentAspectRatio / this.getAspectRatio()
                return (
                  (this.homeFillsViewer ? (e >= 1 ? e : 1) : e >= 1 ? 1 : e) /
                  this._contentBounds.width
                )
              },
              getHomeBounds: function () {
                return this.getHomeBoundsNoRotate().rotate(-this.getRotation())
              },
              getHomeBoundsNoRotate: function () {
                var t = this._contentBounds.getCenter(),
                  i = 1 / this.getHomeZoom(),
                  n = i / this.getAspectRatio()
                return new e.Rect(t.x - i / 2, t.y - n / 2, i, n)
              },
              goHome: function (e) {
                return (
                  this.viewer &&
                    this.viewer.raiseEvent('home', { immediately: e }),
                  this.fitBounds(this.getHomeBounds(), e)
                )
              },
              getMinZoom: function () {
                var e = this.getHomeZoom()
                return this.minZoomLevel
                  ? this.minZoomLevel
                  : this.minZoomImageRatio * e
              },
              getMaxZoom: function () {
                var e = this.maxZoomLevel
                return (
                  e ||
                    ((e =
                      (this._contentSize.x * this.maxZoomPixelRatio) /
                      this._containerInnerSize.x),
                    (e /= this._contentBounds.width)),
                  Math.max(e, this.getHomeZoom())
                )
              },
              getAspectRatio: function () {
                return this._containerInnerSize.x / this._containerInnerSize.y
              },
              getContainerSize: function () {
                return new e.Point(this.containerSize.x, this.containerSize.y)
              },
              getMargins: function () {
                return e.extend({}, this._margins)
              },
              setMargins: function (t) {
                e.console.assert(
                  'object' === e.type(t),
                  '[Viewport.setMargins] margins must be an object'
                ),
                  (this._margins = e.extend(
                    { left: 0, top: 0, right: 0, bottom: 0 },
                    t
                  )),
                  this._updateContainerInnerSize(),
                  this.viewer && this.viewer.forceRedraw()
              },
              getBounds: function (e) {
                return this.getBoundsNoRotate(e).rotate(-this.getRotation())
              },
              getBoundsNoRotate: function (t) {
                var i = this.getCenter(t),
                  n = 1 / this.getZoom(t),
                  o = n / this.getAspectRatio()
                return new e.Rect(i.x - n / 2, i.y - o / 2, n, o)
              },
              getBoundsWithMargins: function (e) {
                return this.getBoundsNoRotateWithMargins(e).rotate(
                  -this.getRotation(),
                  this.getCenter(e)
                )
              },
              getBoundsNoRotateWithMargins: function (e) {
                var t = this.getBoundsNoRotate(e),
                  i = this._containerInnerSize.x * this.getZoom(e)
                return (
                  (t.x -= this._margins.left / i),
                  (t.y -= this._margins.top / i),
                  (t.width += (this._margins.left + this._margins.right) / i),
                  (t.height += (this._margins.top + this._margins.bottom) / i),
                  t
                )
              },
              getCenter: function (t) {
                var i,
                  n,
                  o,
                  r,
                  s,
                  a,
                  l = new e.Point(
                    this.centerSpringX.current.value,
                    this.centerSpringY.current.value
                  ),
                  c = new e.Point(
                    this.centerSpringX.target.value,
                    this.centerSpringY.target.value
                  )
                return t
                  ? l
                  : this.zoomPoint
                  ? ((i = this.pixelFromPoint(this.zoomPoint, !0)),
                    (r =
                      (o = 1 / (n = this.getZoom())) / this.getAspectRatio()),
                    (s = new e.Rect(l.x - o / 2, l.y - r / 2, o, r)),
                    (a = this._pixelFromPoint(this.zoomPoint, s)
                      .minus(i)
                      .divide(this._containerInnerSize.x * n)),
                    c.plus(a))
                  : c
              },
              getZoom: function (e) {
                return e
                  ? this.zoomSpring.current.value
                  : this.zoomSpring.target.value
              },
              _applyZoomConstraints: function (e) {
                return Math.max(
                  Math.min(e, this.getMaxZoom()),
                  this.getMinZoom()
                )
              },
              _applyBoundaryConstraints: function (t) {
                var i = new e.Rect(t.x, t.y, t.width, t.height)
                if (this.wrapHorizontal);
                else {
                  var n = this.visibilityRatio * i.width,
                    o = i.x + i.width,
                    r =
                      this._contentBoundsNoRotate.x +
                      this._contentBoundsNoRotate.width,
                    s = this._contentBoundsNoRotate.x - o + n,
                    a = r - i.x - n
                  n > this._contentBoundsNoRotate.width
                    ? (i.x += (s + a) / 2)
                    : a < 0
                    ? (i.x += a)
                    : s > 0 && (i.x += s)
                }
                if (this.wrapVertical);
                else {
                  var l = this.visibilityRatio * i.height,
                    c = i.y + i.height,
                    h =
                      this._contentBoundsNoRotate.y +
                      this._contentBoundsNoRotate.height,
                    u = this._contentBoundsNoRotate.y - c + l,
                    d = h - i.y - l
                  l > this._contentBoundsNoRotate.height
                    ? (i.y += (u + d) / 2)
                    : d < 0
                    ? (i.y += d)
                    : u > 0 && (i.y += u)
                }
                return i
              },
              _raiseConstraintsEvent: function (e) {
                this.viewer &&
                  this.viewer.raiseEvent('constrain', { immediately: e })
              },
              applyConstraints: function (e) {
                var t = this.getZoom(),
                  i = this._applyZoomConstraints(t)
                t !== i && this.zoomTo(i, this.zoomPoint, e)
                var n = this.getBoundsNoRotate(),
                  o = this._applyBoundaryConstraints(n)
                return (
                  this._raiseConstraintsEvent(e),
                  (n.x !== o.x || n.y !== o.y || e) &&
                    this.fitBounds(o.rotate(-this.getRotation()), e),
                  this
                )
              },
              ensureVisible: function (e) {
                return this.applyConstraints(e)
              },
              _fitBounds: function (t, i) {
                var n = (i = i || {}).immediately || !1,
                  o = i.constraints || !1,
                  r = this.getAspectRatio(),
                  s = t.getCenter(),
                  a = new e.Rect(
                    t.x,
                    t.y,
                    t.width,
                    t.height,
                    t.degrees + this.getRotation()
                  ).getBoundingBox()
                a.getAspectRatio() >= r
                  ? (a.height = a.width / r)
                  : (a.width = a.height * r),
                  (a.x = s.x - a.width / 2),
                  (a.y = s.y - a.height / 2)
                var l = 1 / a.width
                if (o) {
                  var c = a.getAspectRatio(),
                    h = this._applyZoomConstraints(l)
                  l !== h &&
                    ((l = h),
                    (a.width = 1 / l),
                    (a.x = s.x - a.width / 2),
                    (a.height = a.width / c),
                    (a.y = s.y - a.height / 2)),
                    (s = (a = this._applyBoundaryConstraints(a)).getCenter()),
                    this._raiseConstraintsEvent(n)
                }
                if (n) return this.panTo(s, !0), this.zoomTo(l, null, !0)
                this.panTo(this.getCenter(!0), !0),
                  this.zoomTo(this.getZoom(!0), null, !0)
                var u = this.getBounds(),
                  d = this.getZoom()
                if (0 === d || Math.abs(l / d - 1) < 1e-8)
                  return this.zoomTo(l, !0), this.panTo(s, n)
                var p = (a = a.rotate(-this.getRotation()))
                  .getTopLeft()
                  .times(l)
                  .minus(u.getTopLeft().times(d))
                  .divide(l - d)
                return this.zoomTo(l, p, n)
              },
              fitBounds: function (e, t) {
                return this._fitBounds(e, { immediately: t, constraints: !1 })
              },
              fitBoundsWithConstraints: function (e, t) {
                return this._fitBounds(e, { immediately: t, constraints: !0 })
              },
              fitVertically: function (t) {
                var i = new e.Rect(
                  this._contentBounds.x + this._contentBounds.width / 2,
                  this._contentBounds.y,
                  0,
                  this._contentBounds.height
                )
                return this.fitBounds(i, t)
              },
              fitHorizontally: function (t) {
                var i = new e.Rect(
                  this._contentBounds.x,
                  this._contentBounds.y + this._contentBounds.height / 2,
                  this._contentBounds.width,
                  0
                )
                return this.fitBounds(i, t)
              },
              getConstrainedBounds: function (e) {
                var t
                return (
                  (t = this.getBounds(e)), this._applyBoundaryConstraints(t)
                )
              },
              panBy: function (t, i) {
                var n = new e.Point(
                  this.centerSpringX.target.value,
                  this.centerSpringY.target.value
                )
                return this.panTo(n.plus(t), i)
              },
              panTo: function (e, t) {
                return (
                  t
                    ? (this.centerSpringX.resetTo(e.x),
                      this.centerSpringY.resetTo(e.y))
                    : (this.centerSpringX.springTo(e.x),
                      this.centerSpringY.springTo(e.y)),
                  this.viewer &&
                    this.viewer.raiseEvent('pan', {
                      center: e,
                      immediately: t,
                    }),
                  this
                )
              },
              zoomBy: function (e, t, i) {
                return this.zoomTo(this.zoomSpring.target.value * e, t, i)
              },
              zoomTo: function (t, i, n) {
                var o = this
                return (
                  (this.zoomPoint =
                    i instanceof e.Point && !isNaN(i.x) && !isNaN(i.y)
                      ? i
                      : null),
                  n
                    ? this._adjustCenterSpringsForZoomPoint(function () {
                        o.zoomSpring.resetTo(t)
                      })
                    : this.zoomSpring.springTo(t),
                  this.viewer &&
                    this.viewer.raiseEvent('zoom', {
                      zoom: t,
                      refPoint: i,
                      immediately: n,
                    }),
                  this
                )
              },
              setRotation: function (t) {
                return this.viewer && this.viewer.drawer.canRotate()
                  ? ((this.degrees = e.positiveModulo(t, 360)),
                    this._setContentBounds(
                      this.viewer.world.getHomeBounds(),
                      this.viewer.world.getContentFactor()
                    ),
                    this.viewer.forceRedraw(),
                    this.viewer.raiseEvent('rotate', { degrees: t }),
                    this)
                  : this
              },
              getRotation: function () {
                return this.degrees
              },
              resize: function (e, t) {
                var i,
                  n = this.getBoundsNoRotate(),
                  o = n
                return (
                  (this.containerSize.x = e.x),
                  (this.containerSize.y = e.y),
                  this._updateContainerInnerSize(),
                  t &&
                    ((i = e.x / this.containerSize.x),
                    (o.width = n.width * i),
                    (o.height = o.width / this.getAspectRatio())),
                  this.viewer &&
                    this.viewer.raiseEvent('resize', {
                      newContainerSize: e,
                      maintain: t,
                    }),
                  this.fitBounds(o, !0)
                )
              },
              _updateContainerInnerSize: function () {
                this._containerInnerSize = new e.Point(
                  Math.max(
                    1,
                    this.containerSize.x -
                      (this._margins.left + this._margins.right)
                  ),
                  Math.max(
                    1,
                    this.containerSize.y -
                      (this._margins.top + this._margins.bottom)
                  )
                )
              },
              update: function () {
                var e = this
                this._adjustCenterSpringsForZoomPoint(function () {
                  e.zoomSpring.update()
                }),
                  this.centerSpringX.update(),
                  this.centerSpringY.update()
                var t =
                  this.centerSpringX.current.value !== this._oldCenterX ||
                  this.centerSpringY.current.value !== this._oldCenterY ||
                  this.zoomSpring.current.value !== this._oldZoom
                return (
                  (this._oldCenterX = this.centerSpringX.current.value),
                  (this._oldCenterY = this.centerSpringY.current.value),
                  (this._oldZoom = this.zoomSpring.current.value),
                  t
                )
              },
              _adjustCenterSpringsForZoomPoint: function (e) {
                if (this.zoomPoint) {
                  var t = this.pixelFromPoint(this.zoomPoint, !0)
                  e()
                  var i = this.pixelFromPoint(this.zoomPoint, !0).minus(t),
                    n = this.deltaPointsFromPixels(i, !0)
                  this.centerSpringX.shiftBy(n.x),
                    this.centerSpringY.shiftBy(n.y),
                    this.zoomSpring.isAtTargetValue() && (this.zoomPoint = null)
                } else e()
              },
              deltaPixelsFromPointsNoRotate: function (e, t) {
                return e.times(this._containerInnerSize.x * this.getZoom(t))
              },
              deltaPixelsFromPoints: function (e, t) {
                return this.deltaPixelsFromPointsNoRotate(
                  e.rotate(this.getRotation()),
                  t
                )
              },
              deltaPointsFromPixelsNoRotate: function (e, t) {
                return e.divide(this._containerInnerSize.x * this.getZoom(t))
              },
              deltaPointsFromPixels: function (e, t) {
                return this.deltaPointsFromPixelsNoRotate(e, t).rotate(
                  -this.getRotation()
                )
              },
              pixelFromPointNoRotate: function (e, t) {
                return this._pixelFromPointNoRotate(
                  e,
                  this.getBoundsNoRotate(t)
                )
              },
              pixelFromPoint: function (e, t) {
                return this._pixelFromPoint(e, this.getBoundsNoRotate(t))
              },
              _pixelFromPointNoRotate: function (t, i) {
                return t
                  .minus(i.getTopLeft())
                  .times(this._containerInnerSize.x / i.width)
                  .plus(new e.Point(this._margins.left, this._margins.top))
              },
              _pixelFromPoint: function (e, t) {
                return this._pixelFromPointNoRotate(
                  e.rotate(this.getRotation(), this.getCenter(!0)),
                  t
                )
              },
              pointFromPixelNoRotate: function (t, i) {
                var n = this.getBoundsNoRotate(i)
                return t
                  .minus(new e.Point(this._margins.left, this._margins.top))
                  .divide(this._containerInnerSize.x / n.width)
                  .plus(n.getTopLeft())
              },
              pointFromPixel: function (e, t) {
                return this.pointFromPixelNoRotate(e, t).rotate(
                  -this.getRotation(),
                  this.getCenter(!0)
                )
              },
              _viewportToImageDelta: function (t, i) {
                var n = this._contentBoundsNoRotate.width
                return new e.Point(
                  (t * this._contentSizeNoRotate.x) / n,
                  (i * this._contentSizeNoRotate.x) / n
                )
              },
              viewportToImageCoordinates: function (t, i) {
                if (t instanceof e.Point)
                  return this.viewportToImageCoordinates(t.x, t.y)
                if (this.viewer) {
                  var n = this.viewer.world.getItemCount()
                  if (n > 1)
                    e.console.error(
                      '[Viewport.viewportToImageCoordinates] is not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.'
                    )
                  else if (1 === n) {
                    return this.viewer.world
                      .getItemAt(0)
                      .viewportToImageCoordinates(t, i, !0)
                  }
                }
                return this._viewportToImageDelta(
                  t - this._contentBoundsNoRotate.x,
                  i - this._contentBoundsNoRotate.y
                )
              },
              _imageToViewportDelta: function (t, i) {
                var n = this._contentBoundsNoRotate.width
                return new e.Point(
                  (t / this._contentSizeNoRotate.x) * n,
                  (i / this._contentSizeNoRotate.x) * n
                )
              },
              imageToViewportCoordinates: function (t, i) {
                if (t instanceof e.Point)
                  return this.imageToViewportCoordinates(t.x, t.y)
                if (this.viewer) {
                  var n = this.viewer.world.getItemCount()
                  if (n > 1)
                    e.console.error(
                      '[Viewport.imageToViewportCoordinates] is not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.'
                    )
                  else if (1 === n) {
                    return this.viewer.world
                      .getItemAt(0)
                      .imageToViewportCoordinates(t, i, !0)
                  }
                }
                var o = this._imageToViewportDelta(t, i)
                return (
                  (o.x += this._contentBoundsNoRotate.x),
                  (o.y += this._contentBoundsNoRotate.y),
                  o
                )
              },
              imageToViewportRectangle: function (t, i, n, o) {
                var r = t
                if (
                  (r instanceof e.Rect || (r = new e.Rect(t, i, n, o)),
                  this.viewer)
                ) {
                  var s = this.viewer.world.getItemCount()
                  if (s > 1)
                    e.console.error(
                      '[Viewport.imageToViewportRectangle] is not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.'
                    )
                  else if (1 === s) {
                    return this.viewer.world
                      .getItemAt(0)
                      .imageToViewportRectangle(t, i, n, o, !0)
                  }
                }
                var a = this.imageToViewportCoordinates(r.x, r.y),
                  l = this._imageToViewportDelta(r.width, r.height)
                return new e.Rect(a.x, a.y, l.x, l.y, r.degrees)
              },
              viewportToImageRectangle: function (t, i, n, o) {
                var r = t
                if (
                  (r instanceof e.Rect || (r = new e.Rect(t, i, n, o)),
                  this.viewer)
                ) {
                  var s = this.viewer.world.getItemCount()
                  if (s > 1)
                    e.console.error(
                      '[Viewport.viewportToImageRectangle] is not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.'
                    )
                  else if (1 === s) {
                    return this.viewer.world
                      .getItemAt(0)
                      .viewportToImageRectangle(t, i, n, o, !0)
                  }
                }
                var a = this.viewportToImageCoordinates(r.x, r.y),
                  l = this._viewportToImageDelta(r.width, r.height)
                return new e.Rect(a.x, a.y, l.x, l.y, r.degrees)
              },
              viewerElementToImageCoordinates: function (e) {
                var t = this.pointFromPixel(e, !0)
                return this.viewportToImageCoordinates(t)
              },
              imageToViewerElementCoordinates: function (e) {
                var t = this.imageToViewportCoordinates(e)
                return this.pixelFromPoint(t, !0)
              },
              windowToImageCoordinates: function (t) {
                e.console.assert(
                  this.viewer,
                  '[Viewport.windowToImageCoordinates] the viewport must have a viewer.'
                )
                var i = t.minus(e.getElementPosition(this.viewer.element))
                return this.viewerElementToImageCoordinates(i)
              },
              imageToWindowCoordinates: function (t) {
                return (
                  e.console.assert(
                    this.viewer,
                    '[Viewport.imageToWindowCoordinates] the viewport must have a viewer.'
                  ),
                  this.imageToViewerElementCoordinates(t).plus(
                    e.getElementPosition(this.viewer.element)
                  )
                )
              },
              viewerElementToViewportCoordinates: function (e) {
                return this.pointFromPixel(e, !0)
              },
              viewportToViewerElementCoordinates: function (e) {
                return this.pixelFromPoint(e, !0)
              },
              viewerElementToViewportRectangle: function (t) {
                return e.Rect.fromSummits(
                  this.pointFromPixel(t.getTopLeft(), !0),
                  this.pointFromPixel(t.getTopRight(), !0),
                  this.pointFromPixel(t.getBottomLeft(), !0)
                )
              },
              viewportToViewerElementRectangle: function (t) {
                return e.Rect.fromSummits(
                  this.pixelFromPoint(t.getTopLeft(), !0),
                  this.pixelFromPoint(t.getTopRight(), !0),
                  this.pixelFromPoint(t.getBottomLeft(), !0)
                )
              },
              windowToViewportCoordinates: function (t) {
                e.console.assert(
                  this.viewer,
                  '[Viewport.windowToViewportCoordinates] the viewport must have a viewer.'
                )
                var i = t.minus(e.getElementPosition(this.viewer.element))
                return this.viewerElementToViewportCoordinates(i)
              },
              viewportToWindowCoordinates: function (t) {
                return (
                  e.console.assert(
                    this.viewer,
                    '[Viewport.viewportToWindowCoordinates] the viewport must have a viewer.'
                  ),
                  this.viewportToViewerElementCoordinates(t).plus(
                    e.getElementPosition(this.viewer.element)
                  )
                )
              },
              viewportToImageZoom: function (t) {
                if (this.viewer) {
                  var i = this.viewer.world.getItemCount()
                  if (i > 1)
                    e.console.error(
                      '[Viewport.viewportToImageZoom] is not accurate with multi-image.'
                    )
                  else if (1 === i) {
                    return this.viewer.world.getItemAt(0).viewportToImageZoom(t)
                  }
                }
                var n = this._contentSizeNoRotate.x
                return (
                  t *
                  ((this._containerInnerSize.x / n) *
                    this._contentBoundsNoRotate.width)
                )
              },
              imageToViewportZoom: function (t) {
                if (this.viewer) {
                  var i = this.viewer.world.getItemCount()
                  if (i > 1)
                    e.console.error(
                      '[Viewport.imageToViewportZoom] is not accurate with multi-image.'
                    )
                  else if (1 === i) {
                    return this.viewer.world.getItemAt(0).imageToViewportZoom(t)
                  }
                }
                return (
                  t *
                  (this._contentSizeNoRotate.x /
                    this._containerInnerSize.x /
                    this._contentBoundsNoRotate.width)
                )
              },
              toggleFlip: function () {
                return this.setFlip(!this.getFlip()), this
              },
              getFlip: function () {
                return this.flipped
              },
              setFlip: function (e) {
                return (
                  this.flipped === e ||
                    ((this.flipped = e),
                    this.viewer.navigator &&
                      this.viewer.navigator.setFlip(this.getFlip()),
                    this.viewer.forceRedraw(),
                    this.viewer.raiseEvent('flip', { flipped: e })),
                  this
                )
              },
            })
        })(OpenSeadragon),
        (function (e) {
          function t(e, t, n, o, r, s, l, c, h) {
            var u = l.getBoundingBox().getTopLeft(),
              d = l.getBoundingBox().getBottomRight()
            e.viewer &&
              e.viewer.raiseEvent('update-level', {
                tiledImage: e,
                havedrawn: t,
                level: o,
                opacity: r,
                visibility: s,
                drawArea: l,
                topleft: u,
                bottomright: d,
                currenttime: c,
                best: h,
              }),
              a(e.coverage, o),
              a(e.loadingCoverage, o)
            for (
              var p = e._getCornerTiles(o, u, d),
                g = p.topLeft,
                m = p.bottomRight,
                v = e.source.getNumTiles(o),
                f = e.viewport.pixelFromPoint(e.viewport.getCenter()),
                y = g.x;
              y <= m.x;
              y++
            )
              for (var w = g.y; w <= m.y; w++) {
                if (!e.wrapHorizontal && !e.wrapVertical) {
                  var T = e.source.getTileBounds(o, y, w)
                  if (null === l.intersection(T)) continue
                }
                h = i(e, n, t, y, w, o, r, s, f, v, c, h)
              }
            return h
          }
          function i(t, i, o, a, l, c, h, u, d, p, g, m) {
            var v = (function (t, i, n, o, r, s, a, l, c, h) {
                var u, d, p, g, m, v, f, y, w
                s[n] || (s[n] = {})
                s[n][t] || (s[n][t] = {})
                s[n][t][i] ||
                  ((u = (l.x + (t % l.x)) % l.x),
                  (d = (l.y + (i % l.y)) % l.y),
                  (p = r.getTileBounds(n, u, d)),
                  (g = r.getTileBounds(n, u, d, !0)),
                  (m = r.tileExists(n, u, d)),
                  (v = r.getTileUrl(n, u, d)),
                  o.loadTilesWithAjax
                    ? ((f = r.getTileAjaxHeaders(n, u, d)),
                      e.isPlainObject(o.ajaxHeaders) &&
                        (f = e.extend({}, o.ajaxHeaders, f)))
                    : (f = null),
                  (y = r.getContext2D ? r.getContext2D(n, u, d) : void 0),
                  (p.x += (t - u) / l.x),
                  (p.y += (h / c) * ((i - d) / l.y)),
                  (w = new e.Tile(
                    n,
                    t,
                    i,
                    p,
                    m,
                    v,
                    y,
                    o.loadTilesWithAjax,
                    f,
                    g
                  )),
                  u === l.x - 1 && (w.isRightMost = !0),
                  d === l.y - 1 && (w.isBottomMost = !0),
                  (s[n][t][i] = w))
                return ((w = s[n][t][i]).lastTouchTime = a), w
              })(
                a,
                l,
                c,
                t,
                t.source,
                t.tilesMatrix,
                g,
                p,
                t._worldWidthCurrent,
                t._worldHeightCurrent
              ),
              f = o
            t.viewer &&
              t.viewer.raiseEvent('update-tile', { tiledImage: t, tile: v }),
              s(t.coverage, c, a, l, !1)
            var y = v.loaded || v.loading || r(t.loadingCoverage, c, a, l)
            if ((s(t.loadingCoverage, c, a, l, y), !v.exists)) return m
            if (
              (i &&
                !f &&
                (r(t.coverage, c, a, l)
                  ? s(t.coverage, c, a, l, !0)
                  : (f = !0)),
              !f)
            )
              return m
            if (
              ((function (t, i, n, o, r, s) {
                var a = t.bounds.getTopLeft()
                ;(a.x *= s._scaleSpring.current.value),
                  (a.y *= s._scaleSpring.current.value),
                  (a.x += s._xSpring.current.value),
                  (a.y += s._ySpring.current.value)
                var l = t.bounds.getSize()
                ;(l.x *= s._scaleSpring.current.value),
                  (l.y *= s._scaleSpring.current.value)
                var c = n.pixelFromPointNoRotate(a, !0),
                  h = n.pixelFromPointNoRotate(a, !1),
                  u = n.deltaPixelsFromPointsNoRotate(l, !0),
                  d = n.deltaPixelsFromPointsNoRotate(l, !1),
                  p = h.plus(d.divide(2)),
                  g = o.squaredDistanceTo(p)
                i || (u = u.plus(new e.Point(1, 1)))
                t.isRightMost && s.wrapHorizontal && (u.x += 0.75)
                t.isBottomMost && s.wrapVertical && (u.y += 0.75)
                ;(t.position = c),
                  (t.size = u),
                  (t.squaredDistance = g),
                  (t.visibility = r)
              })(v, t.source.tileOverlap, t.viewport, d, u, t),
              !v.loaded)
            )
              if (v.context2D) n(t, v)
              else {
                var w = t._tileCache.getImageRecord(v.cacheKey)
                if (w) n(t, v, w.getImage())
              }
            v.loaded
              ? (function (e, t, i, n, o, r, a) {
                  var l,
                    c,
                    h = 1e3 * e.blendTime
                  t.blendStart || (t.blendStart = a)
                  ;(l = a - t.blendStart),
                    (c = h ? Math.min(1, l / h) : 1),
                    e.alwaysBlend && (c *= r)
                  if (((t.opacity = c), e.lastDrawn.push(t), 1 === c))
                    s(e.coverage, o, i, n, !0), (e._hasOpaqueTile = !0)
                  else if (l < h) return !0
                  return !1
                })(t, v, a, l, c, h, g) && (t._needsDraw = !0)
              : v.loading
              ? t._tilesLoading++
              : y ||
                (m = (function (e, t) {
                  if (!e) return t
                  if (t.visibility > e.visibility) return t
                  if (
                    t.visibility == e.visibility &&
                    t.squaredDistance < e.squaredDistance
                  )
                    return t
                  return e
                })(m, v))
            return m
          }
          function n(e, t, i, n, o) {
            var r = 0
            function s() {
              return r++, a
            }
            function a() {
              0 === --r &&
                ((t.loading = !1),
                (t.loaded = !0),
                t.context2D ||
                  e._tileCache.cacheTile({
                    image: i,
                    tile: t,
                    cutoff: n,
                    tiledImage: e,
                  }),
                (e._needsDraw = !0))
            }
            e.viewer.raiseEvent('tile-loaded', {
              tile: t,
              tiledImage: e,
              tileRequest: o,
              image: i,
              getCompletionCallback: s,
            }),
              s()()
          }
          function o(e, t, i, n) {
            var o, r, s, a
            if (!e[t]) return !1
            if (void 0 === i || void 0 === n) {
              for (s in (o = e[t]))
                if (Object.prototype.hasOwnProperty.call(o, s))
                  for (a in (r = o[s]))
                    if (Object.prototype.hasOwnProperty.call(r, a) && !r[a])
                      return !1
              return !0
            }
            return (
              void 0 === e[t][i] || void 0 === e[t][i][n] || !0 === e[t][i][n]
            )
          }
          function r(e, t, i, n) {
            return void 0 === i || void 0 === n
              ? o(e, t + 1)
              : o(e, t + 1, 2 * i, 2 * n) &&
                  o(e, t + 1, 2 * i, 2 * n + 1) &&
                  o(e, t + 1, 2 * i + 1, 2 * n) &&
                  o(e, t + 1, 2 * i + 1, 2 * n + 1)
          }
          function s(t, i, n, o, r) {
            t[i]
              ? (t[i][n] || (t[i][n] = {}), (t[i][n][o] = r))
              : e.console.warn(
                  "Setting coverage for a tile before its level's coverage has been reset: %s",
                  i
                )
          }
          function a(e, t) {
            e[t] = {}
          }
          ;(e.TiledImage = function (t) {
            var i = this
            e.console.assert(
              t.tileCache,
              '[TiledImage] options.tileCache is required'
            ),
              e.console.assert(
                t.drawer,
                '[TiledImage] options.drawer is required'
              ),
              e.console.assert(
                t.viewer,
                '[TiledImage] options.viewer is required'
              ),
              e.console.assert(
                t.imageLoader,
                '[TiledImage] options.imageLoader is required'
              ),
              e.console.assert(
                t.source,
                '[TiledImage] options.source is required'
              ),
              e.console.assert(
                !t.clip || t.clip instanceof e.Rect,
                '[TiledImage] options.clip must be an OpenSeadragon.Rect if present'
              ),
              e.EventSource.call(this),
              (this._tileCache = t.tileCache),
              delete t.tileCache,
              (this._drawer = t.drawer),
              delete t.drawer,
              (this._imageLoader = t.imageLoader),
              delete t.imageLoader,
              t.clip instanceof e.Rect && (this._clip = t.clip.clone()),
              delete t.clip
            var n = t.x || 0
            delete t.x
            var o = t.y || 0
            delete t.y,
              (this.normHeight = t.source.dimensions.y / t.source.dimensions.x),
              (this.contentAspectX =
                t.source.dimensions.x / t.source.dimensions.y)
            var r = 1
            t.width
              ? ((r = t.width),
                delete t.width,
                t.height &&
                  (e.console.error(
                    'specifying both width and height to a tiledImage is not supported'
                  ),
                  delete t.height))
              : t.height && ((r = t.height / this.normHeight), delete t.height)
            var s = t.fitBounds
            delete t.fitBounds
            var a = t.fitBoundsPlacement || OpenSeadragon.Placement.CENTER
            delete t.fitBoundsPlacement
            var l = t.degrees || 0
            delete t.degrees,
              e.extend(
                !0,
                this,
                {
                  viewer: null,
                  tilesMatrix: {},
                  coverage: {},
                  loadingCoverage: {},
                  lastDrawn: [],
                  lastResetTime: 0,
                  _midDraw: !1,
                  _needsDraw: !0,
                  _hasOpaqueTile: !1,
                  _tilesLoading: 0,
                  springStiffness: e.DEFAULT_SETTINGS.springStiffness,
                  animationTime: e.DEFAULT_SETTINGS.animationTime,
                  minZoomImageRatio: e.DEFAULT_SETTINGS.minZoomImageRatio,
                  wrapHorizontal: e.DEFAULT_SETTINGS.wrapHorizontal,
                  wrapVertical: e.DEFAULT_SETTINGS.wrapVertical,
                  immediateRender: e.DEFAULT_SETTINGS.immediateRender,
                  blendTime: e.DEFAULT_SETTINGS.blendTime,
                  alwaysBlend: e.DEFAULT_SETTINGS.alwaysBlend,
                  minPixelRatio: e.DEFAULT_SETTINGS.minPixelRatio,
                  smoothTileEdgesMinZoom:
                    e.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,
                  iOSDevice: e.DEFAULT_SETTINGS.iOSDevice,
                  debugMode: e.DEFAULT_SETTINGS.debugMode,
                  crossOriginPolicy: e.DEFAULT_SETTINGS.crossOriginPolicy,
                  ajaxWithCredentials: e.DEFAULT_SETTINGS.ajaxWithCredentials,
                  placeholderFillStyle: e.DEFAULT_SETTINGS.placeholderFillStyle,
                  opacity: e.DEFAULT_SETTINGS.opacity,
                  preload: e.DEFAULT_SETTINGS.preload,
                  compositeOperation: e.DEFAULT_SETTINGS.compositeOperation,
                },
                t
              ),
              (this._preload = this.preload),
              delete this.preload,
              (this._fullyLoaded = !1),
              (this._xSpring = new e.Spring({
                initial: n,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
              })),
              (this._ySpring = new e.Spring({
                initial: o,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
              })),
              (this._scaleSpring = new e.Spring({
                initial: r,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
              })),
              (this._degreesSpring = new e.Spring({
                initial: l,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
              })),
              this._updateForScale(),
              s && this.fitBounds(s, a, !0),
              (this._drawingHandler = function (t) {
                i.viewer.raiseEvent(
                  'tile-drawing',
                  e.extend({ tiledImage: i }, t)
                )
              })
          }),
            e.extend(e.TiledImage.prototype, e.EventSource.prototype, {
              needsDraw: function () {
                return this._needsDraw
              },
              getFullyLoaded: function () {
                return this._fullyLoaded
              },
              _setFullyLoaded: function (e) {
                e !== this._fullyLoaded &&
                  ((this._fullyLoaded = e),
                  this.raiseEvent('fully-loaded-change', {
                    fullyLoaded: this._fullyLoaded,
                  }))
              },
              reset: function () {
                this._tileCache.clearTilesFor(this),
                  (this.lastResetTime = e.now()),
                  (this._needsDraw = !0)
              },
              update: function () {
                var e = this._xSpring.update(),
                  t = this._ySpring.update(),
                  i = this._scaleSpring.update(),
                  n = this._degreesSpring.update()
                return (
                  !!(e || t || i || n) &&
                  (this._updateForScale(), (this._needsDraw = !0), !0)
                )
              },
              draw: function () {
                0 !== this.opacity || this._preload
                  ? ((this._midDraw = !0),
                    this._updateViewport(),
                    (this._midDraw = !1))
                  : (this._needsDraw = !1)
              },
              destroy: function () {
                this.reset()
              },
              getBounds: function (e) {
                return this.getBoundsNoRotate(e).rotate(
                  this.getRotation(e),
                  this._getRotationPoint(e)
                )
              },
              getBoundsNoRotate: function (t) {
                return t
                  ? new e.Rect(
                      this._xSpring.current.value,
                      this._ySpring.current.value,
                      this._worldWidthCurrent,
                      this._worldHeightCurrent
                    )
                  : new e.Rect(
                      this._xSpring.target.value,
                      this._ySpring.target.value,
                      this._worldWidthTarget,
                      this._worldHeightTarget
                    )
              },
              getWorldBounds: function () {
                return (
                  e.console.error(
                    '[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead'
                  ),
                  this.getBounds()
                )
              },
              getClippedBounds: function (t) {
                var i = this.getBoundsNoRotate(t)
                if (this._clip) {
                  var n =
                      (t ? this._worldWidthCurrent : this._worldWidthTarget) /
                      this.source.dimensions.x,
                    o = this._clip.times(n)
                  i = new e.Rect(i.x + o.x, i.y + o.y, o.width, o.height)
                }
                return i.rotate(this.getRotation(t), this._getRotationPoint(t))
              },
              getContentSize: function () {
                return new e.Point(
                  this.source.dimensions.x,
                  this.source.dimensions.y
                )
              },
              _viewportToImageDelta: function (t, i, n) {
                var o = n
                  ? this._scaleSpring.current.value
                  : this._scaleSpring.target.value
                return new e.Point(
                  t * (this.source.dimensions.x / o),
                  i * ((this.source.dimensions.y * this.contentAspectX) / o)
                )
              },
              viewportToImageCoordinates: function (t, i, n) {
                var o
                return (
                  t instanceof e.Point
                    ? ((n = i), (o = t))
                    : (o = new e.Point(t, i)),
                  (o = o.rotate(
                    -this.getRotation(n),
                    this._getRotationPoint(n)
                  )),
                  n
                    ? this._viewportToImageDelta(
                        o.x - this._xSpring.current.value,
                        o.y - this._ySpring.current.value
                      )
                    : this._viewportToImageDelta(
                        o.x - this._xSpring.target.value,
                        o.y - this._ySpring.target.value
                      )
                )
              },
              _imageToViewportDelta: function (t, i, n) {
                var o = n
                  ? this._scaleSpring.current.value
                  : this._scaleSpring.target.value
                return new e.Point(
                  (t / this.source.dimensions.x) * o,
                  (i / this.source.dimensions.y / this.contentAspectX) * o
                )
              },
              imageToViewportCoordinates: function (t, i, n) {
                t instanceof e.Point && ((n = i), (i = t.y), (t = t.x))
                var o = this._imageToViewportDelta(t, i)
                return (
                  n
                    ? ((o.x += this._xSpring.current.value),
                      (o.y += this._ySpring.current.value))
                    : ((o.x += this._xSpring.target.value),
                      (o.y += this._ySpring.target.value)),
                  o.rotate(this.getRotation(n), this._getRotationPoint(n))
                )
              },
              imageToViewportRectangle: function (t, i, n, o, r) {
                var s = t
                s instanceof e.Rect ? (r = i) : (s = new e.Rect(t, i, n, o))
                var a = this.imageToViewportCoordinates(s.getTopLeft(), r),
                  l = this._imageToViewportDelta(s.width, s.height, r)
                return new e.Rect(
                  a.x,
                  a.y,
                  l.x,
                  l.y,
                  s.degrees + this.getRotation(r)
                )
              },
              viewportToImageRectangle: function (t, i, n, o, r) {
                var s = t
                t instanceof e.Rect ? (r = i) : (s = new e.Rect(t, i, n, o))
                var a = this.viewportToImageCoordinates(s.getTopLeft(), r),
                  l = this._viewportToImageDelta(s.width, s.height, r)
                return new e.Rect(
                  a.x,
                  a.y,
                  l.x,
                  l.y,
                  s.degrees - this.getRotation(r)
                )
              },
              viewerElementToImageCoordinates: function (e) {
                var t = this.viewport.pointFromPixel(e, !0)
                return this.viewportToImageCoordinates(t)
              },
              imageToViewerElementCoordinates: function (e) {
                var t = this.imageToViewportCoordinates(e)
                return this.viewport.pixelFromPoint(t, !0)
              },
              windowToImageCoordinates: function (e) {
                var t = e.minus(
                  OpenSeadragon.getElementPosition(this.viewer.element)
                )
                return this.viewerElementToImageCoordinates(t)
              },
              imageToWindowCoordinates: function (e) {
                return this.imageToViewerElementCoordinates(e).plus(
                  OpenSeadragon.getElementPosition(this.viewer.element)
                )
              },
              _viewportToTiledImageRectangle: function (t) {
                var i = this._scaleSpring.current.value
                return (
                  (t = t.rotate(
                    -this.getRotation(!0),
                    this._getRotationPoint(!0)
                  )),
                  new e.Rect(
                    (t.x - this._xSpring.current.value) / i,
                    (t.y - this._ySpring.current.value) / i,
                    t.width / i,
                    t.height / i,
                    t.degrees
                  )
                )
              },
              viewportToImageZoom: function (e) {
                return (
                  ((this._scaleSpring.current.value *
                    this.viewport._containerInnerSize.x) /
                    this.source.dimensions.x) *
                  e
                )
              },
              imageToViewportZoom: function (e) {
                return (
                  e /
                  ((this._scaleSpring.current.value *
                    this.viewport._containerInnerSize.x) /
                    this.source.dimensions.x)
                )
              },
              setPosition: function (e, t) {
                var i =
                  this._xSpring.target.value === e.x &&
                  this._ySpring.target.value === e.y
                if (t) {
                  if (
                    i &&
                    this._xSpring.current.value === e.x &&
                    this._ySpring.current.value === e.y
                  )
                    return
                  this._xSpring.resetTo(e.x),
                    this._ySpring.resetTo(e.y),
                    (this._needsDraw = !0)
                } else {
                  if (i) return
                  this._xSpring.springTo(e.x),
                    this._ySpring.springTo(e.y),
                    (this._needsDraw = !0)
                }
                i || this._raiseBoundsChange()
              },
              setWidth: function (e, t) {
                this._setScale(e, t)
              },
              setHeight: function (e, t) {
                this._setScale(e / this.normHeight, t)
              },
              setCroppingPolygons: function (t) {
                var i = function (t) {
                  return t.map(function (t) {
                    try {
                      if (
                        (function (t) {
                          return (
                            t instanceof e.Point ||
                            ('number' == typeof t.x && 'number' == typeof t.y)
                          )
                        })(t)
                      )
                        return { x: t.x, y: t.y }
                      throw new Error()
                    } catch (e) {
                      throw new Error(
                        'A Provided cropping polygon point is not supported'
                      )
                    }
                  })
                }
                try {
                  if (!e.isArray(t))
                    throw new Error('Provided cropping polygon is not an array')
                  this._croppingPolygons = t.map(function (e) {
                    return i(e)
                  })
                } catch (t) {
                  e.console.error(
                    '[TiledImage.setCroppingPolygons] Cropping polygon format not supported'
                  ),
                    e.console.error(t),
                    (this._croppingPolygons = null)
                }
              },
              resetCroppingPolygons: function () {
                this._croppingPolygons = null
              },
              fitBounds: function (t, i, n) {
                i = i || e.Placement.CENTER
                var o = e.Placement.properties[i],
                  r = this.contentAspectX,
                  s = 0,
                  a = 0,
                  l = 1,
                  c = 1
                if (
                  (this._clip &&
                    ((r = this._clip.getAspectRatio()),
                    (l = this._clip.width / this.source.dimensions.x),
                    (c = this._clip.height / this.source.dimensions.y),
                    t.getAspectRatio() > r
                      ? ((s = (this._clip.x / this._clip.height) * t.height),
                        (a = (this._clip.y / this._clip.height) * t.height))
                      : ((s = (this._clip.x / this._clip.width) * t.width),
                        (a = (this._clip.y / this._clip.width) * t.width))),
                  t.getAspectRatio() > r)
                ) {
                  var h = t.height / c,
                    u = 0
                  o.isHorizontallyCentered
                    ? (u = (t.width - t.height * r) / 2)
                    : o.isRight && (u = t.width - t.height * r),
                    this.setPosition(new e.Point(t.x - s + u, t.y - a), n),
                    this.setHeight(h, n)
                } else {
                  var d = t.width / l,
                    p = 0
                  o.isVerticallyCentered
                    ? (p = (t.height - t.width / r) / 2)
                    : o.isBottom && (p = t.height - t.width / r),
                    this.setPosition(new e.Point(t.x - s, t.y - a + p), n),
                    this.setWidth(d, n)
                }
              },
              getClip: function () {
                return this._clip ? this._clip.clone() : null
              },
              setClip: function (t) {
                e.console.assert(
                  !t || t instanceof e.Rect,
                  '[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null'
                ),
                  t instanceof e.Rect
                    ? (this._clip = t.clone())
                    : (this._clip = null),
                  (this._needsDraw = !0),
                  this.raiseEvent('clip-change')
              },
              getOpacity: function () {
                return this.opacity
              },
              setOpacity: function (e) {
                e !== this.opacity &&
                  ((this.opacity = e),
                  (this._needsDraw = !0),
                  this.raiseEvent('opacity-change', { opacity: this.opacity }))
              },
              getPreload: function () {
                return this._preload
              },
              setPreload: function (e) {
                ;(this._preload = !!e), (this._needsDraw = !0)
              },
              getRotation: function (e) {
                return e
                  ? this._degreesSpring.current.value
                  : this._degreesSpring.target.value
              },
              setRotation: function (e, t) {
                ;(this._degreesSpring.target.value === e &&
                  this._degreesSpring.isAtTargetValue()) ||
                  (t
                    ? this._degreesSpring.resetTo(e)
                    : this._degreesSpring.springTo(e),
                  (this._needsDraw = !0),
                  this._raiseBoundsChange())
              },
              _getRotationPoint: function (e) {
                return this.getBoundsNoRotate(e).getCenter()
              },
              getCompositeOperation: function () {
                return this.compositeOperation
              },
              setCompositeOperation: function (e) {
                e !== this.compositeOperation &&
                  ((this.compositeOperation = e),
                  (this._needsDraw = !0),
                  this.raiseEvent('composite-operation-change', {
                    compositeOperation: this.compositeOperation,
                  }))
              },
              _setScale: function (e, t) {
                var i = this._scaleSpring.target.value === e
                if (t) {
                  if (i && this._scaleSpring.current.value === e) return
                  this._scaleSpring.resetTo(e),
                    this._updateForScale(),
                    (this._needsDraw = !0)
                } else {
                  if (i) return
                  this._scaleSpring.springTo(e),
                    this._updateForScale(),
                    (this._needsDraw = !0)
                }
                i || this._raiseBoundsChange()
              },
              _updateForScale: function () {
                ;(this._worldWidthTarget = this._scaleSpring.target.value),
                  (this._worldHeightTarget =
                    this.normHeight * this._scaleSpring.target.value),
                  (this._worldWidthCurrent = this._scaleSpring.current.value),
                  (this._worldHeightCurrent =
                    this.normHeight * this._scaleSpring.current.value)
              },
              _raiseBoundsChange: function () {
                this.raiseEvent('bounds-change')
              },
              _isBottomItem: function () {
                return this.viewer.world.getItemAt(0) === this
              },
              _getLevelsInterval: function () {
                var e = Math.max(
                    this.source.minLevel,
                    Math.floor(Math.log(this.minZoomImageRatio) / Math.log(2))
                  ),
                  t =
                    this.viewport.deltaPixelsFromPointsNoRotate(
                      this.source.getPixelRatio(0),
                      !0
                    ).x * this._scaleSpring.current.value,
                  i = Math.min(
                    Math.abs(this.source.maxLevel),
                    Math.abs(
                      Math.floor(Math.log(t / this.minPixelRatio) / Math.log(2))
                    )
                  )
                return (
                  (i = Math.max(i, this.source.minLevel || 0)),
                  { lowestLevel: (e = Math.min(e, i)), highestLevel: i }
                )
              },
              _updateViewport: function () {
                for (
                  this._needsDraw = !1,
                    this._tilesLoading = 0,
                    this.loadingCoverage = {};
                  this.lastDrawn.length > 0;

                ) {
                  this.lastDrawn.pop().beingDrawn = !1
                }
                var i = this.viewport,
                  r = this._viewportToTiledImageRectangle(
                    i.getBoundsWithMargins(!0)
                  )
                if (!this.wrapHorizontal && !this.wrapVertical) {
                  var s = this._viewportToTiledImageRectangle(
                    this.getClippedBounds(!0)
                  )
                  if (null === (r = r.intersection(s))) return
                }
                for (
                  var a = this._getLevelsInterval(),
                    l = a.lowestLevel,
                    c = a.highestLevel,
                    h = null,
                    u = !1,
                    d = e.now(),
                    p = c;
                  p >= l;
                  p--
                ) {
                  var g = !1,
                    m =
                      i.deltaPixelsFromPointsNoRotate(
                        this.source.getPixelRatio(p),
                        !0
                      ).x * this._scaleSpring.current.value
                  if (p === l || (!u && m >= this.minPixelRatio))
                    (g = !0), (u = !0)
                  else if (!u) continue
                  var v =
                      i.deltaPixelsFromPointsNoRotate(
                        this.source.getPixelRatio(p),
                        !1
                      ).x * this._scaleSpring.current.value,
                    f =
                      i.deltaPixelsFromPointsNoRotate(
                        this.source.getPixelRatio(
                          Math.max(this.source.getClosestLevel(), 0)
                        ),
                        !1
                      ).x * this._scaleSpring.current.value,
                    y = this.immediateRender ? 1 : f
                  if (
                    ((h = t(
                      this,
                      u,
                      g,
                      p,
                      Math.min(1, (m - 0.5) / 0.5),
                      y / Math.abs(y - v),
                      r,
                      d,
                      h
                    )),
                    o(this.coverage, p))
                  )
                    break
                }
                !(function (t, i) {
                  if (
                    0 === t.opacity ||
                    (0 === i.length && !t.placeholderFillStyle)
                  )
                    return
                  var n,
                    o,
                    r,
                    s = i[0]
                  s &&
                    (n =
                      t.opacity < 1 ||
                      (t.compositeOperation &&
                        'source-over' !== t.compositeOperation) ||
                      (!t._isBottomItem() && s._hasTransparencyChannel()))
                  var a,
                    l = t.viewport.getZoom(!0),
                    c = t.viewportToImageZoom(l)
                  i.length > 1 &&
                    c > t.smoothTileEdgesMinZoom &&
                    !t.iOSDevice &&
                    t.getRotation(!0) % 360 == 0 &&
                    e.supportsCanvas &&
                    ((n = !0),
                    (o = s.getScaleForEdgeSmoothing()),
                    (r = s.getTranslationForEdgeSmoothing(
                      o,
                      t._drawer.getCanvasSize(!1),
                      t._drawer.getCanvasSize(!0)
                    )))
                  n &&
                    (o ||
                      ((a = t.viewport
                        .viewportToViewerElementRectangle(
                          t.getClippedBounds(!0)
                        )
                        .getIntegerBoundingBox()),
                      t._drawer.viewer.viewport.getFlip() &&
                        ((0 === t.viewport.degrees &&
                          t.getRotation(!0) % 360 == 0) ||
                          (a.x =
                            t._drawer.viewer.container.clientWidth -
                            (a.x + a.width))),
                      (a = a.times(e.pixelDensityRatio))),
                    t._drawer._clear(!0, a))
                  o ||
                    (0 !== t.viewport.degrees &&
                      t._drawer._offsetForRotation({
                        degrees: t.viewport.degrees,
                        useSketch: n,
                      }),
                    t.getRotation(!0) % 360 != 0 &&
                      t._drawer._offsetForRotation({
                        degrees: t.getRotation(!0),
                        point: t.viewport.pixelFromPointNoRotate(
                          t._getRotationPoint(!0),
                          !0
                        ),
                        useSketch: n,
                      }),
                    0 === t.viewport.degrees &&
                      t.getRotation(!0) % 360 == 0 &&
                      t._drawer.viewer.viewport.getFlip() &&
                      t._drawer._flip())
                  var h = !1
                  if (t._clip) {
                    t._drawer.saveContext(n)
                    var u = t.imageToViewportRectangle(t._clip, !0)
                    u = u.rotate(-t.getRotation(!0), t._getRotationPoint(!0))
                    var d = t._drawer.viewportToDrawerRectangle(u)
                    o && (d = d.times(o)),
                      r && (d = d.translate(r)),
                      t._drawer.setClip(d, n),
                      (h = !0)
                  }
                  if (t._croppingPolygons) {
                    t._drawer.saveContext(n)
                    try {
                      var p = t._croppingPolygons.map(function (e) {
                        return e.map(function (e) {
                          var i = t
                              .imageToViewportCoordinates(e.x, e.y, !0)
                              .rotate(
                                -t.getRotation(!0),
                                t._getRotationPoint(!0)
                              ),
                            n = t._drawer.viewportCoordToDrawerCoord(i)
                          return o && (n = n.times(o)), n
                        })
                      })
                      t._drawer.clipWithPolygons(p, n)
                    } catch (t) {
                      e.console.error(t)
                    }
                    h = !0
                  }
                  if (t.placeholderFillStyle && !1 === t._hasOpaqueTile) {
                    var g = t._drawer.viewportToDrawerRectangle(t.getBounds(!0))
                    o && (g = g.times(o)), r && (g = g.translate(r))
                    var m = null
                    ;(m =
                      'function' == typeof t.placeholderFillStyle
                        ? t.placeholderFillStyle(t, t._drawer.context)
                        : t.placeholderFillStyle),
                      t._drawer.drawRectangle(g, m, n)
                  }
                  for (var v = i.length - 1; v >= 0; v--)
                    (s = i[v]),
                      t._drawer.drawTile(s, t._drawingHandler, n, o, r),
                      (s.beingDrawn = !0),
                      t.viewer &&
                        t.viewer.raiseEvent('tile-drawn', {
                          tiledImage: t,
                          tile: s,
                        })
                  h && t._drawer.restoreContext(n)
                  o ||
                    (t.getRotation(!0) % 360 != 0 &&
                      t._drawer._restoreRotationChanges(n),
                    0 !== t.viewport.degrees &&
                      t._drawer._restoreRotationChanges(n))
                  n &&
                    (o &&
                      (0 !== t.viewport.degrees &&
                        t._drawer._offsetForRotation({
                          degrees: t.viewport.degrees,
                          useSketch: !1,
                        }),
                      t.getRotation(!0) % 360 != 0 &&
                        t._drawer._offsetForRotation({
                          degrees: t.getRotation(!0),
                          point: t.viewport.pixelFromPointNoRotate(
                            t._getRotationPoint(!0),
                            !0
                          ),
                          useSketch: !1,
                        })),
                    t._drawer.blendSketch({
                      opacity: t.opacity,
                      scale: o,
                      translate: r,
                      compositeOperation: t.compositeOperation,
                      bounds: a,
                    }),
                    o &&
                      (t.getRotation(!0) % 360 != 0 &&
                        t._drawer._restoreRotationChanges(!1),
                      0 !== t.viewport.degrees &&
                        t._drawer._restoreRotationChanges(!1)))
                  o ||
                    (0 === t.viewport.degrees &&
                      t.getRotation(!0) % 360 == 0 &&
                      t._drawer.viewer.viewport.getFlip() &&
                      t._drawer._flip())
                  !(function (t, i) {
                    if (t.debugMode)
                      for (var n = i.length - 1; n >= 0; n--) {
                        var o = i[n]
                        try {
                          t._drawer.drawDebugInfo(o, i.length, n, t)
                        } catch (t) {
                          e.console.error(t)
                        }
                      }
                  })(t, i)
                })(this, this.lastDrawn),
                  h && !h.context2D
                    ? (!(function (t, i, o) {
                        ;(i.loading = !0),
                          t._imageLoader.addJob({
                            src: i.url,
                            loadWithAjax: i.loadWithAjax,
                            ajaxHeaders: i.ajaxHeaders,
                            crossOriginPolicy: t.crossOriginPolicy,
                            ajaxWithCredentials: t.ajaxWithCredentials,
                            callback: function (r, s, a) {
                              !(function (t, i, o, r, s, a) {
                                if (!r)
                                  return (
                                    e.console.log(
                                      'Tile %s failed to load: %s - error: %s',
                                      i,
                                      i.url,
                                      s
                                    ),
                                    t.viewer.raiseEvent('tile-load-failed', {
                                      tile: i,
                                      tiledImage: t,
                                      time: o,
                                      message: s,
                                      tileRequest: a,
                                    }),
                                    (i.loading = !1),
                                    void (i.exists = !1)
                                  )
                                if (o < t.lastResetTime)
                                  return (
                                    e.console.log(
                                      'Ignoring tile %s loaded before reset: %s',
                                      i,
                                      i.url
                                    ),
                                    void (i.loading = !1)
                                  )
                                var l = function () {
                                  var e = t.source.getClosestLevel()
                                  n(t, i, r, e, a)
                                }
                                t._midDraw ? window.setTimeout(l, 1) : l()
                              })(t, i, o, r, s, a)
                            },
                            abort: function () {
                              i.loading = !1
                            },
                          })
                      })(this, h, d),
                      (this._needsDraw = !0),
                      this._setFullyLoaded(!1))
                    : this._setFullyLoaded(0 === this._tilesLoading)
              },
              _getCornerTiles: function (t, i, n) {
                var o, r, s, a
                this.wrapHorizontal
                  ? ((o = e.positiveModulo(i.x, 1)),
                    (r = e.positiveModulo(n.x, 1)))
                  : ((o = Math.max(0, i.x)), (r = Math.min(1, n.x)))
                var l = 1 / this.source.aspectRatio
                this.wrapVertical
                  ? ((s = e.positiveModulo(i.y, l)),
                    (a = e.positiveModulo(n.y, l)))
                  : ((s = Math.max(0, i.y)), (a = Math.min(l, n.y)))
                var c = this.source.getTileAtPoint(t, new e.Point(o, s)),
                  h = this.source.getTileAtPoint(t, new e.Point(r, a)),
                  u = this.source.getNumTiles(t)
                return (
                  this.wrapHorizontal &&
                    ((c.x += u.x * Math.floor(i.x)),
                    (h.x += u.x * Math.floor(n.x))),
                  this.wrapVertical &&
                    ((c.y += u.y * Math.floor(i.y / l)),
                    (h.y += u.y * Math.floor(n.y / l))),
                  { topLeft: c, bottomRight: h }
                )
              },
            })
        })(OpenSeadragon),
        (function (e) {
          var t = function (t) {
              e.console.assert(t, '[TileCache.cacheTile] options is required'),
                e.console.assert(
                  t.tile,
                  '[TileCache.cacheTile] options.tile is required'
                ),
                e.console.assert(
                  t.tiledImage,
                  '[TileCache.cacheTile] options.tiledImage is required'
                ),
                (this.tile = t.tile),
                (this.tiledImage = t.tiledImage)
            },
            i = function (t) {
              e.console.assert(t, '[ImageRecord] options is required'),
                e.console.assert(
                  t.image,
                  '[ImageRecord] options.image is required'
                ),
                (this._image = t.image),
                (this._tiles = [])
            }
          ;(i.prototype = {
            destroy: function () {
              ;(this._image = null),
                (this._renderedContext = null),
                (this._tiles = null)
            },
            getImage: function () {
              return this._image
            },
            getRenderedContext: function () {
              if (!this._renderedContext) {
                var e = document.createElement('canvas')
                ;(e.width = this._image.width),
                  (e.height = this._image.height),
                  (this._renderedContext = e.getContext('2d')),
                  this._renderedContext.drawImage(this._image, 0, 0),
                  (this._image = null)
              }
              return this._renderedContext
            },
            setRenderedContext: function (t) {
              e.console.error(
                'ImageRecord.setRenderedContext is deprecated. The rendered context should be created by the ImageRecord itself when calling ImageRecord.getRenderedContext.'
              ),
                (this._renderedContext = t)
            },
            addTile: function (t) {
              e.console.assert(t, '[ImageRecord.addTile] tile is required'),
                this._tiles.push(t)
            },
            removeTile: function (t) {
              for (var i = 0; i < this._tiles.length; i++)
                if (this._tiles[i] === t) return void this._tiles.splice(i, 1)
              e.console.warn(
                '[ImageRecord.removeTile] trying to remove unknown tile',
                t
              )
            },
            getTileCount: function () {
              return this._tiles.length
            },
          }),
            (e.TileCache = function (t) {
              ;(t = t || {}),
                (this._maxImageCacheCount =
                  t.maxImageCacheCount ||
                  e.DEFAULT_SETTINGS.maxImageCacheCount),
                (this._tilesLoaded = []),
                (this._imagesLoaded = []),
                (this._imagesLoadedCount = 0)
            }),
            (e.TileCache.prototype = {
              numTilesLoaded: function () {
                return this._tilesLoaded.length
              },
              cacheTile: function (n) {
                e.console.assert(
                  n,
                  '[TileCache.cacheTile] options is required'
                ),
                  e.console.assert(
                    n.tile,
                    '[TileCache.cacheTile] options.tile is required'
                  ),
                  e.console.assert(
                    n.tile.cacheKey,
                    '[TileCache.cacheTile] options.tile.cacheKey is required'
                  ),
                  e.console.assert(
                    n.tiledImage,
                    '[TileCache.cacheTile] options.tiledImage is required'
                  )
                var o = n.cutoff || 0,
                  r = this._tilesLoaded.length,
                  s = this._imagesLoaded[n.tile.cacheKey]
                if (
                  (s ||
                    (e.console.assert(
                      n.image,
                      '[TileCache.cacheTile] options.image is required to create an ImageRecord'
                    ),
                    (s = this._imagesLoaded[n.tile.cacheKey] = new i({
                      image: n.image,
                    })),
                    this._imagesLoadedCount++),
                  s.addTile(n.tile),
                  (n.tile.cacheImageRecord = s),
                  this._imagesLoadedCount > this._maxImageCacheCount)
                ) {
                  for (
                    var a,
                      l,
                      c,
                      h,
                      u,
                      d,
                      p = null,
                      g = -1,
                      m = null,
                      v = this._tilesLoaded.length - 1;
                    v >= 0;
                    v--
                  )
                    (a = (d = this._tilesLoaded[v]).tile).level <= o ||
                      a.beingDrawn ||
                      (p
                        ? ((h = a.lastTouchTime),
                          (l = p.lastTouchTime),
                          (u = a.level),
                          (c = p.level),
                          (h < l || (h == l && u > c)) &&
                            ((p = a), (g = v), (m = d)))
                        : ((p = a), (g = v), (m = d)))
                  p && g >= 0 && (this._unloadTile(m), (r = g))
                }
                this._tilesLoaded[r] = new t({
                  tile: n.tile,
                  tiledImage: n.tiledImage,
                })
              },
              clearTilesFor: function (t) {
                var i
                e.console.assert(
                  t,
                  '[TileCache.clearTilesFor] tiledImage is required'
                )
                for (var n = 0; n < this._tilesLoaded.length; ++n)
                  (i = this._tilesLoaded[n]).tiledImage === t &&
                    (this._unloadTile(i), this._tilesLoaded.splice(n, 1), n--)
              },
              getImageRecord: function (t) {
                return (
                  e.console.assert(
                    t,
                    '[TileCache.getImageRecord] cacheKey is required'
                  ),
                  this._imagesLoaded[t]
                )
              },
              _unloadTile: function (t) {
                e.console.assert(
                  t,
                  '[TileCache._unloadTile] tileRecord is required'
                )
                var i = t.tile,
                  n = t.tiledImage
                i.unload(), (i.cacheImageRecord = null)
                var o = this._imagesLoaded[i.cacheKey]
                o.removeTile(i),
                  o.getTileCount() ||
                    (o.destroy(),
                    delete this._imagesLoaded[i.cacheKey],
                    this._imagesLoadedCount--),
                  n.viewer.raiseEvent('tile-unloaded', {
                    tile: i,
                    tiledImage: n,
                  })
              },
            })
        })(OpenSeadragon),
        (function (e) {
          ;(e.World = function (t) {
            var i = this
            e.console.assert(t.viewer, '[World] options.viewer is required'),
              e.EventSource.call(this),
              (this.viewer = t.viewer),
              (this._items = []),
              (this._needsDraw = !1),
              (this._autoRefigureSizes = !0),
              (this._needsSizesFigured = !1),
              (this._delegatedFigureSizes = function (e) {
                i._autoRefigureSizes
                  ? i._figureSizes()
                  : (i._needsSizesFigured = !0)
              }),
              this._figureSizes()
          }),
            e.extend(e.World.prototype, e.EventSource.prototype, {
              addItem: function (t, i) {
                if (
                  (e.console.assert(t, '[World.addItem] item is required'),
                  e.console.assert(
                    t instanceof e.TiledImage,
                    '[World.addItem] only TiledImages supported at this time'
                  ),
                  void 0 !== (i = i || {}).index)
                ) {
                  var n = Math.max(0, Math.min(this._items.length, i.index))
                  this._items.splice(n, 0, t)
                } else this._items.push(t)
                this._autoRefigureSizes
                  ? this._figureSizes()
                  : (this._needsSizesFigured = !0),
                  (this._needsDraw = !0),
                  t.addHandler('bounds-change', this._delegatedFigureSizes),
                  t.addHandler('clip-change', this._delegatedFigureSizes),
                  this.raiseEvent('add-item', { item: t })
              },
              getItemAt: function (t) {
                return (
                  e.console.assert(
                    void 0 !== t,
                    '[World.getItemAt] index is required'
                  ),
                  this._items[t]
                )
              },
              getIndexOfItem: function (t) {
                return (
                  e.console.assert(
                    t,
                    '[World.getIndexOfItem] item is required'
                  ),
                  e.indexOf(this._items, t)
                )
              },
              getItemCount: function () {
                return this._items.length
              },
              setItemIndex: function (t, i) {
                e.console.assert(t, '[World.setItemIndex] item is required'),
                  e.console.assert(
                    void 0 !== i,
                    '[World.setItemIndex] index is required'
                  )
                var n = this.getIndexOfItem(t)
                if (i >= this._items.length)
                  throw new Error('Index bigger than number of layers.')
                i !== n &&
                  -1 !== n &&
                  (this._items.splice(n, 1),
                  this._items.splice(i, 0, t),
                  (this._needsDraw = !0),
                  this.raiseEvent('item-index-change', {
                    item: t,
                    previousIndex: n,
                    newIndex: i,
                  }))
              },
              removeItem: function (t) {
                e.console.assert(t, '[World.removeItem] item is required')
                var i = e.indexOf(this._items, t)
                ;-1 !== i &&
                  (t.removeHandler('bounds-change', this._delegatedFigureSizes),
                  t.removeHandler('clip-change', this._delegatedFigureSizes),
                  t.destroy(),
                  this._items.splice(i, 1),
                  this._figureSizes(),
                  (this._needsDraw = !0),
                  this._raiseRemoveItem(t))
              },
              removeAll: function () {
                var e, t
                for (
                  this.viewer._cancelPendingImages(), t = 0;
                  t < this._items.length;
                  t++
                )
                  (e = this._items[t]).removeHandler(
                    'bounds-change',
                    this._delegatedFigureSizes
                  ),
                    e.removeHandler('clip-change', this._delegatedFigureSizes),
                    e.destroy()
                var i = this._items
                for (
                  this._items = [],
                    this._figureSizes(),
                    this._needsDraw = !0,
                    t = 0;
                  t < i.length;
                  t++
                )
                  (e = i[t]), this._raiseRemoveItem(e)
              },
              resetItems: function () {
                for (var e = 0; e < this._items.length; e++)
                  this._items[e].reset()
              },
              update: function () {
                for (var e = !1, t = 0; t < this._items.length; t++)
                  e = this._items[t].update() || e
                return e
              },
              draw: function () {
                for (var e = 0; e < this._items.length; e++)
                  this._items[e].draw()
                this._needsDraw = !1
              },
              needsDraw: function () {
                for (var e = 0; e < this._items.length; e++)
                  if (this._items[e].needsDraw()) return !0
                return this._needsDraw
              },
              getHomeBounds: function () {
                return this._homeBounds.clone()
              },
              getContentFactor: function () {
                return this._contentFactor
              },
              setAutoRefigureSizes: function (e) {
                ;(this._autoRefigureSizes = e),
                  e & this._needsSizesFigured &&
                    (this._figureSizes(), (this._needsSizesFigured = !1))
              },
              arrange: function (t) {
                var i,
                  n = (t = t || {}).immediately || !1,
                  o = t.layout || e.DEFAULT_SETTINGS.collectionLayout,
                  r = t.rows || e.DEFAULT_SETTINGS.collectionRows,
                  s = t.columns || e.DEFAULT_SETTINGS.collectionColumns,
                  a = t.tileSize || e.DEFAULT_SETTINGS.collectionTileSize,
                  l =
                    a +
                    (t.tileMargin || e.DEFAULT_SETTINGS.collectionTileMargin)
                i = !t.rows && s ? s : Math.ceil(this._items.length / r)
                var c,
                  h,
                  u,
                  d,
                  p,
                  g = 0,
                  m = 0
                this.setAutoRefigureSizes(!1)
                for (var v = 0; v < this._items.length; v++)
                  v &&
                    v % i == 0 &&
                    ('horizontal' === o
                      ? ((m += l), (g = 0))
                      : ((g += l), (m = 0))),
                    (d =
                      (u =
                        (h = (c = this._items[v]).getBounds()).width > h.height
                          ? a
                          : a * (h.width / h.height)) *
                      (h.height / h.width)),
                    (p = new e.Point(g + (a - u) / 2, m + (a - d) / 2)),
                    c.setPosition(p, n),
                    c.setWidth(u, n),
                    'horizontal' === o ? (g += l) : (m += l)
                this.setAutoRefigureSizes(!0)
              },
              _figureSizes: function () {
                var t = this._homeBounds ? this._homeBounds.clone() : null,
                  i = this._contentSize ? this._contentSize.clone() : null,
                  n = this._contentFactor || 0
                if (this._items.length) {
                  var o = this._items[0],
                    r = o.getBounds()
                  this._contentFactor = o.getContentSize().x / r.width
                  for (
                    var s = o.getClippedBounds().getBoundingBox(),
                      a = s.x,
                      l = s.y,
                      c = s.x + s.width,
                      h = s.y + s.height,
                      u = 1;
                    u < this._items.length;
                    u++
                  )
                    (r = (o = this._items[u]).getBounds()),
                      (this._contentFactor = Math.max(
                        this._contentFactor,
                        o.getContentSize().x / r.width
                      )),
                      (s = o.getClippedBounds().getBoundingBox()),
                      (a = Math.min(a, s.x)),
                      (l = Math.min(l, s.y)),
                      (c = Math.max(c, s.x + s.width)),
                      (h = Math.max(h, s.y + s.height))
                  ;(this._homeBounds = new e.Rect(a, l, c - a, h - l)),
                    (this._contentSize = new e.Point(
                      this._homeBounds.width * this._contentFactor,
                      this._homeBounds.height * this._contentFactor
                    ))
                } else
                  (this._homeBounds = new e.Rect(0, 0, 1, 1)),
                    (this._contentSize = new e.Point(1, 1)),
                    (this._contentFactor = 1)
                ;(this._contentFactor === n &&
                  this._homeBounds.equals(t) &&
                  this._contentSize.equals(i)) ||
                  this.raiseEvent('metrics-change', {})
              },
              _raiseRemoveItem: function (e) {
                this.raiseEvent('remove-item', { item: e })
              },
            })
        })(OpenSeadragon)
    }),
    slicedToArray = function (e, t) {
      if (Array.isArray(e)) return e
      if (Symbol.iterator in Object(e))
        return (function (e, t) {
          var i = [],
            n = !0,
            o = !1,
            r = void 0
          try {
            for (
              var s, a = e[Symbol.iterator]();
              !(n = (s = a.next()).done) &&
              (i.push(s.value), !t || i.length !== t);
              n = !0
            );
          } catch (e) {
            ;(o = !0), (r = e)
          } finally {
            try {
              !n && a.return && a.return()
            } finally {
              if (o) throw r
            }
          }
          return i
        })(e, t)
      throw new TypeError(
        'Invalid attempt to destructure non-iterable instance'
      )
    },
    RFC2141_NID_VALID =
      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-'
  function isRfc2141NidString(e, t) {
    if (!0 === t) {
      if (!isString(e)) return !1
      if (e.length < 1) return !1
      if (e.length > 31) return !1
      if ('urn' === e.toLowerCase()) return !1
    }
    if (null === e) e = ''
    else if (!isString(e)) return !1
    if ('-' === e[0]) return !1
    var i = !0,
      n = !1,
      o = void 0
    try {
      for (
        var r, s = e[Symbol.iterator]();
        !(i = (r = s.next()).done);
        i = !0
      ) {
        var a = r.value
        if (RFC2141_NID_VALID.indexOf(a) < 0) return !1
      }
    } catch (e) {
      ;(n = !0), (o = e)
    } finally {
      try {
        !i && s.return && s.return()
      } finally {
        if (n) throw o
      }
    }
    return !0
  }
  function isString(e) {
    return 'string' == typeof e
  }
  function isProtocol(e, t) {
    var i = t.protocol
    return !!isString(i) && e.toLowerCase() === i.toLowerCase()
  }
  function isValid(e, t, i) {
    var n = e[t]
    return t in e && isString(n) && (i || n.length > 0)
  }
  function urnObject(e, t, i, n) {
    var o = []
    return (
      Object.keys(n).forEach(function (e, t) {
        isValid(n, e, i) ||
          o.push('validation failed for ' + e + ': invalid value')
      }),
      isProtocol(e, n) ||
        o.push(
          'validation failed for protocol: expected ' +
            e +
            ' but got ' +
            n.protocol
        ),
      t.forEach(function (e) {
        var t = slicedToArray(e, 3),
          i = t[0],
          r = t[1],
          s = t[2]
        try {
          !0 !== s(n[i]) && o.push('validation failed for ' + i + ': ' + r)
        } catch (e) {
          o.push('validation error for ' + i + ': ' + e.message)
        }
      }),
      o.length ? o : null
    )
  }
  var format = function (e, t, i, n) {
      if (!isString((e = n && 'protocol' in n ? n.protocol : e)))
        throw new Error('protocol is missing or invalid')
      return (
        e +
        i +
        t
          .map(function (e) {
            return isString(n[e]) ? n[e] : ''
          })
          .join(i)
      )
    },
    tokenize = function (e, t, i) {
      if (!Array.isArray(e) || e.length < 1)
        throw new Error('components not valid')
      if (!isString(i)) return null
      var n = i.split(t)
      if (n.length < 2) return null
      for (
        var o = { protocol: n.shift() }, r = e.length - 1, s = 0;
        s < r;
        s++
      ) {
        o[e[s]] = n.length ? n.shift() : null
      }
      return (o[e[r]] = n.length ? n.join(t) : null), o
    },
    PREFIX = 'urn',
    SEPARATOR = ':',
    COMPONENTS = ['nid', 'nss']
  function generateDefaultValidationRules(e) {
    for (var t = e.length - 1, i = [], n = 0; n < t; n++) {
      var o = e[n]
      i.push([
        o,
        'invalid characters',
        function (e) {
          return isRfc2141NidString(e, !1)
        },
      ])
    }
    return i
  }
  function build(e, t, i) {
    i = i || {}
    var n = { protocol: e }
    return (
      t.forEach(function (e) {
        return (n[e] = i[e] || null)
      }),
      n
    )
  }
  function create(e, t) {
    var i = (t = t || {}).components || COMPONENTS,
      n = 'allowEmpty' in t && t.allowEmpty,
      o = t.separator || SEPARATOR,
      r = t.validationRules || generateDefaultValidationRules(i)
    return {
      validate: urnObject.bind(null, e, r, n),
      format: format.bind(null, e, i, o),
      parse: tokenize.bind(null, i, o),
      build: build.bind(null, e, i),
    }
  }
  var RFC2141 = create(PREFIX, {
      components: COMPONENTS,
      separator: SEPARATOR,
      allowEmpty: !1,
    }),
    urnLib_es2015 = Object.freeze({
      __proto__: null,
      generateDefaultValidationRules: generateDefaultValidationRules,
      create: create,
      RFC2141: RFC2141,
    })
  const citeNid = 'cite2',
    citeUrn = urnLib_es2015.create('urn', {
      components: ['nid', 'namespace', 'work', 'passage'],
    })
  function validateUrn(e, t = {}) {
    const i = t.noPassage || !1,
      n = citeUrn.parse(e),
      o = t.nid || citeNid
    return (
      !!n &&
      n.nid === o &&
      !!n.namespace &&
      !!n.work &&
      ((i && !n.passage) || (!i && !!n.passage))
    )
  }
  var ctsUrn = { validateUrn: validateUrn },
    ctsUrn_1 = ctsUrn.validateUrn
  function fade(e, { delay: t = 0, duration: i = 400, easing: n = identity }) {
    const o = +getComputedStyle(e).opacity
    return { delay: t, duration: i, easing: n, css: (e) => 'opacity: ' + e * o }
  }
  function fly(
    e,
    {
      delay: t = 0,
      duration: i = 400,
      easing: n = cubicOut,
      x: o = 0,
      y: r = 0,
      opacity: s = 0,
    }
  ) {
    const a = getComputedStyle(e),
      l = +a.opacity,
      c = 'none' === a.transform ? '' : a.transform,
      h = l * (1 - s)
    return {
      delay: t,
      duration: i,
      easing: n,
      css: (e, t) =>
        `\n\t\t\ttransform: ${c} translate(${(1 - e) * o}px, ${
          (1 - e) * r
        }px);\n\t\t\topacity: ${l - h * t}`,
    }
  }
  function get_each_context(e, t, i) {
    const n = e.slice()
    return (n[7] = t[i]), (n[9] = i), n
  }
  function create_each_block(e) {
    let t,
      i,
      n,
      o,
      r,
      s = e[7].label + ''
    function a(...t) {
      return e[4](e[9], ...t)
    }
    function l(...t) {
      return e[5](e[9], ...t)
    }
    return {
      c() {
        ;(t = element('div')),
          (n = space()),
          (i = new HtmlTag(n)),
          attr(t, 'class', 'item svelte-14ba8g3'),
          toggle_class(t, 'selected', e[9] === e[1])
      },
      m(e, c) {
        insert(e, t, c),
          i.m(s, t),
          append(t, n),
          o ||
            ((r = [listen(t, 'click', a), listen(t, 'mousemove', l)]), (o = !0))
      },
      p(n, o) {
        ;(e = n),
          1 & o && s !== (s = e[7].label + '') && i.p(s),
          2 & o && toggle_class(t, 'selected', e[9] === e[1])
      },
      d(e) {
        e && detach(t), (o = !1), run_all(r)
      },
    }
  }
  function create_fragment$6(e) {
    let t,
      i,
      n,
      o,
      r,
      s = e[0],
      a = []
    for (let t = 0; t < s.length; t += 1)
      a[t] = create_each_block(get_each_context(e, s, t))
    return {
      c() {
        ;(t = element('div')), (i = element('div'))
        for (let e = 0; e < a.length; e += 1) a[e].c()
        attr(i, 'class', 'box search svelte-14ba8g3'),
          attr(t, 'class', 'search-container svelte-14ba8g3')
      },
      m(e, n) {
        insert(e, t, n), append(t, i)
        for (let e = 0; e < a.length; e += 1) a[e].m(i, null)
        r = !0
      },
      p(e, [t]) {
        if (15 & t) {
          let n
          for (s = e[0], n = 0; n < s.length; n += 1) {
            const o = get_each_context(e, s, n)
            a[n]
              ? a[n].p(o, t)
              : ((a[n] = create_each_block(o)), a[n].c(), a[n].m(i, null))
          }
          for (; n < a.length; n += 1) a[n].d(1)
          a.length = s.length
        }
      },
      i(e) {
        r ||
          (add_render_callback(() => {
            o && o.end(1),
              n ||
                (n = create_in_transition(i, fly, {
                  y: -5,
                  duration: 150,
                  delay: 0,
                  opacity: 0.2,
                  start: 0,
                  easing: quintOut,
                })),
              n.start()
          }),
          (r = !0))
      },
      o(e) {
        n && n.invalidate(),
          (o = create_out_transition(i, fade, {
            duration: 125,
            easing: quintOut,
          })),
          (r = !1)
      },
      d(e) {
        e && detach(t), destroy_each(a, e), e && o && o.end()
      },
    }
  }
  function instance$6(e, t, i) {
    let { items: n } = t,
      { selectedIndex: o } = t
    const r = createEventDispatcher()
    function s(e) {
      r('close', e)
    }
    function a(e) {
      r('select', e)
    }
    return (
      (e.$$set = (e) => {
        'items' in e && i(0, (n = e.items)),
          'selectedIndex' in e && i(1, (o = e.selectedIndex))
      }),
      [n, o, s, a, (e) => s(e), (e) => a(e)]
    )
  }
  class TextAheadOverlay extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$6, create_fragment$6, safe_not_equal, {
          items: 0,
          selectedIndex: 1,
        })
    }
  }
  function debounce(e, t) {
    let i
    const n = (...n) => {
      i && clearTimeout(i), (i = setTimeout(() => e(...n), t))
    }
    return (
      (n.cancel = () => {
        i && clearTimeout(i)
      }),
      n
    )
  }
  function create_if_block_1$2(e) {
    let t, i
    return (
      (t = new TextAheadOverlay({
        props: { items: e[11], selectedIndex: e[10] },
      })),
      t.$on('close', e[26]),
      t.$on('select', e[27]),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, n) {
          mount_component(t, e, n), (i = !0)
        },
        p(e, i) {
          const n = {}
          2048 & i[0] && (n.items = e[11]),
            1024 & i[0] && (n.selectedIndex = e[10]),
            t.$set(n)
        },
        i(e) {
          i || (transition_in(t.$$.fragment, e), (i = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (i = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_if_block$3(e) {
    let t, i
    return (
      (t = new Message({ props: { text: e[6], error: !0 } })),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, n) {
          mount_component(t, e, n), (i = !0)
        },
        p(e, i) {
          const n = {}
          64 & i[0] && (n.text = e[6]), t.$set(n)
        },
        i(e) {
          i || (transition_in(t.$$.fragment, e), (i = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (i = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_fragment$7(e) {
    let t,
      i,
      n,
      o,
      r,
      s,
      a,
      l,
      c = e[8] && e[9] && e[11].length > 0 && create_if_block_1$2(e),
      h = e[6] && e[2] && create_if_block$3(e)
    return {
      c() {
        ;(t = element('div')),
          (i = element('input')),
          (o = space()),
          c && c.c(),
          (r = space()),
          h && h.c(),
          attr(i, 'id', e[3]),
          attr(i, 'class', 'input svelte-zl7mm7'),
          attr(i, 'type', 'text'),
          (i.disabled = e[5]),
          attr(i, 'placeholder', e[4]),
          attr(i, 'autocomplete', (n = e[8] ? 'off' : e[7])),
          toggle_class(i, 'is-danger', e[2])
      },
      m(n, u) {
        insert(n, t, u),
          append(t, i),
          set_input_value(i, e[0]),
          e[21](i),
          append(t, o),
          c && c.m(t, null),
          append(t, r),
          h && h.m(t, null),
          (s = !0),
          a ||
            ((l = [
              listen(i, 'input', e[20]),
              listen(i, 'focus', e[22]),
              listen(i, 'blur', e[23]),
              listen(i, 'input', e[24]),
              listen(i, 'keydown', e[25]),
            ]),
            (a = !0))
      },
      p(e, o) {
        ;(!s || 8 & o[0]) && attr(i, 'id', e[3]),
          (!s || 32 & o[0]) && (i.disabled = e[5]),
          (!s || 16 & o[0]) && attr(i, 'placeholder', e[4]),
          (!s || (384 & o[0] && n !== (n = e[8] ? 'off' : e[7]))) &&
            attr(i, 'autocomplete', n),
          1 & o[0] && i.value !== e[0] && set_input_value(i, e[0]),
          4 & o[0] && toggle_class(i, 'is-danger', e[2]),
          e[8] && e[9] && e[11].length > 0
            ? c
              ? (c.p(e, o), 2816 & o[0] && transition_in(c, 1))
              : ((c = create_if_block_1$2(e)),
                c.c(),
                transition_in(c, 1),
                c.m(t, r))
            : c &&
              (group_outros(),
              transition_out(c, 1, 1, () => {
                c = null
              }),
              check_outros()),
          e[6] && e[2]
            ? h
              ? (h.p(e, o), 68 & o[0] && transition_in(h, 1))
              : ((h = create_if_block$3(e)),
                h.c(),
                transition_in(h, 1),
                h.m(t, null))
            : h &&
              (group_outros(),
              transition_out(h, 1, 1, () => {
                h = null
              }),
              check_outros())
      },
      i(e) {
        s || (transition_in(c), transition_in(h), (s = !0))
      },
      o(e) {
        transition_out(c), transition_out(h), (s = !1)
      },
      d(i) {
        i && detach(t),
          e[21](null),
          c && c.d(),
          h && h.d(),
          (a = !1),
          run_all(l)
      },
    }
  }
  function instance$7(e, t, i) {
    let { id: n } = t,
      { value: o } = t,
      { placeholder: r = '' } = t,
      { inputRef: s } = t,
      { validate: a = () => !0 } = t,
      { disabled: l = !1 } = t,
      { invalidMessage: c } = t,
      { autocomplete: h = 'on' } = t,
      { invalid: u = !1 } = t,
      { items: d } = t,
      { minLength: p = 3 } = t,
      { maxItems: g = 10 } = t
    createEventDispatcher()
    let m = !1,
      v = !1,
      f = 0,
      y = null,
      w = []
    const T = debounce(() => i(2, (u = !0)), 1e3)
    function x() {
      y = setTimeout(() => {
        i(9, (v = !1)), i(2, (u = m && !a(o)))
      }, 250)
    }
    function _() {
      clearTimeout(y)
    }
    const S = (e = -1) => {
        i(9, (v = !1)), i(10, (f = -1)), e > -1 && i(0, (o = w[e].value))
      },
      E = (e) => {
        const t = e.target.value
        t.length >= Number(p) ? (i(9, (v = !0)), P(t)) : i(11, (w = []))
      },
      P = (e) => {
        i(
          11,
          (w = d
            .filter(
              (t) => (
                'string' != typeof t && (t = t.value || ''),
                t.toUpperCase().includes(e.toUpperCase())
              )
            )
            .map((t, i) => {
              const n = 'string' != typeof t ? t.value : t
              return {
                key: t.key || i,
                value: n,
                label:
                  '' === e.trim()
                    ? n
                    : n.replace(
                        RegExp(
                          ((o = e.trim()),
                          o.replace(/[-\\^$*+?.()|[\]{}]/g, '\\$&')),
                          'i'
                        ),
                        "<span style='font-weight: 600;'>$&</span>"
                      ),
              }
              var o
            })
            .slice(0, g - 1))
        )
      }
    function b(e) {
      40 === e.keyCode && f < w.length - 1
        ? i(10, (f += 1))
        : 38 === e.keyCode && f > 0
        ? i(10, (f -= 1))
        : 13 === e.keyCode
        ? (e.preventDefault(), -1 === f && i(10, (f = 0)), S(f))
        : 27 === e.keyCode && (e.preventDefault(), S())
    }
    return (
      (e.$$set = (e) => {
        'id' in e && i(3, (n = e.id)),
          'value' in e && i(0, (o = e.value)),
          'placeholder' in e && i(4, (r = e.placeholder)),
          'inputRef' in e && i(1, (s = e.inputRef)),
          'validate' in e && i(17, (a = e.validate)),
          'disabled' in e && i(5, (l = e.disabled)),
          'invalidMessage' in e && i(6, (c = e.invalidMessage)),
          'autocomplete' in e && i(7, (h = e.autocomplete)),
          'invalid' in e && i(2, (u = e.invalid)),
          'items' in e && i(8, (d = e.items)),
          'minLength' in e && i(18, (p = e.minLength)),
          'maxItems' in e && i(19, (g = e.maxItems))
      }),
      (e.$$.update = () => {
        268435457 & e.$$.dirty[0] && i(28, (m = m || ('' !== o && !m))),
          268566785 & e.$$.dirty[0] &&
            (d || (m && !a(o) ? T() : (T.cancel(), i(2, (u = !1)))))
      }),
      [
        o,
        s,
        u,
        n,
        r,
        l,
        c,
        h,
        d,
        v,
        f,
        w,
        x,
        _,
        S,
        E,
        b,
        a,
        p,
        g,
        function () {
          ;(o = this.value), i(0, o)
        },
        function (e) {
          binding_callbacks[e ? 'unshift' : 'push'](() => {
            ;(s = e), i(1, s)
          })
        },
        () => d && _(),
        () => d && x(),
        (e) => d && E(e),
        (e) => d && b(e),
        (e) => S(e.detail),
        (e) => i(10, (f = e.detail)),
      ]
    )
  }
  class TextInput extends SvelteComponent {
    constructor(e) {
      super(),
        init(
          this,
          e,
          instance$7,
          create_fragment$7,
          safe_not_equal,
          {
            id: 3,
            value: 0,
            placeholder: 4,
            inputRef: 1,
            validate: 17,
            disabled: 5,
            invalidMessage: 6,
            autocomplete: 7,
            invalid: 2,
            items: 8,
            minLength: 18,
            maxItems: 19,
          },
          [-1, -1]
        )
    }
  }
  function validateHttpUrl(e) {
    let t
    try {
      t = new URL(e)
    } catch (e) {
      return !1
    }
    return 'http:' === t.protocol || 'https:' === t.protocol
  }
  /*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */ var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,
    TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,
    TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,
    QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g,
    QUOTE_REGEXP = /([\\"])/g,
    TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,
    format_1 = format$1,
    parse_1 = parse$1
  function format$1(e) {
    if (!e || 'object' != typeof e)
      throw new TypeError('argument obj is required')
    var t = e.parameters,
      i = e.type
    if (!i || !TYPE_REGEXP.test(i)) throw new TypeError('invalid type')
    var n = i
    if (t && 'object' == typeof t)
      for (var o, r = Object.keys(t).sort(), s = 0; s < r.length; s++) {
        if (((o = r[s]), !TOKEN_REGEXP.test(o)))
          throw new TypeError('invalid parameter name')
        n += '; ' + o + '=' + qstring(t[o])
      }
    return n
  }
  function parse$1(e) {
    if (!e) throw new TypeError('argument string is required')
    var t = 'object' == typeof e ? getcontenttype(e) : e
    if ('string' != typeof t)
      throw new TypeError('argument string is required to be a string')
    var i = t.indexOf(';'),
      n = -1 !== i ? t.substr(0, i).trim() : t.trim()
    if (!TYPE_REGEXP.test(n)) throw new TypeError('invalid media type')
    var o = new ContentType(n.toLowerCase())
    if (-1 !== i) {
      var r, s, a
      for (PARAM_REGEXP.lastIndex = i; (s = PARAM_REGEXP.exec(t)); ) {
        if (s.index !== i) throw new TypeError('invalid parameter format')
        ;(i += s[0].length),
          (r = s[1].toLowerCase()),
          '"' === (a = s[2])[0] &&
            (a = a.substr(1, a.length - 2).replace(QESC_REGEXP, '$1')),
          (o.parameters[r] = a)
      }
      if (i !== t.length) throw new TypeError('invalid parameter format')
    }
    return o
  }
  function getcontenttype(e) {
    var t
    if (
      ('function' == typeof e.getHeader
        ? (t = e.getHeader('content-type'))
        : 'object' == typeof e.headers &&
          (t = e.headers && e.headers['content-type']),
      'string' != typeof t)
    )
      throw new TypeError('content-type header is missing from object')
    return t
  }
  function qstring(e) {
    var t = String(e)
    if (TOKEN_REGEXP.test(t)) return t
    if (t.length > 0 && !TEXT_REGEXP.test(t))
      throw new TypeError('invalid parameter value')
    return '"' + t.replace(QUOTE_REGEXP, '\\$1') + '"'
  }
  function ContentType(e) {
    ;(this.parameters = Object.create(null)), (this.type = e)
  }
  var contentType = { format: format_1, parse: parse_1 }
  async function isIIIFImage(e) {
    const t = await fetch(e, { mode: 'cors' }),
      i = t.headers.get('content-type')
    if (t.ok && i && 'application/json' === contentType.parse(i).type) {
      const e = await t.json()
      return ['http://iiif.io/api/image/2/context.json' === e['@context'], e]
    }
    return [!1, null]
  }
  const localPath = '/files/static/image_archive/',
    localSuffix = '.dzi'
  function getImagePathFromUrn(e) {
    const t = e.split(':')[2],
      i = e.split(':')[3]
    return `${t}/${i.split('.')[0]}/${i.split('.')[1]}/`
  }
  function getTileSources(e) {
    const t = e.split('@')[0],
      i = t.split(':')[4],
      n = getImagePathFromUrn(t)
    return localPath + n + i + localSuffix
  }
  const defaultOpts = {
      crossOriginPolicy: 'Anonymous',
      minZoomImageRatio: 0.1,
      immediateRender: !0,
      prefixUrl: '/files/static/css/images/',
    },
    getStaticOpts = (e, t) => ({
      ...defaultOpts,
      id: e,
      tileSources: { type: 'image', url: t },
      buildPyramid: !1,
      crossOriginPolicy: !1,
    }),
    getIIIFOpts = (e, t) => ({
      ...defaultOpts,
      id: e,
      tileSources: [t],
      sequenceMode: !0,
      prefixUrl: '/files/static/css/images/',
      crossOriginPolicy: 'Anonymous',
      defaultZoomLevel: 1,
      minZoomImageRatio: 0.1,
      immediateRender: !0,
    }),
    getInternalOpts = (e, t) => ({
      ...defaultOpts,
      id: e,
      tileSources: getTileSources(t),
    })
  function create_default_slot_4(e) {
    let t, i, n, o
    function r(t) {
      e[15].call(null, t)
    }
    function s(t) {
      e[16].call(null, t)
    }
    let a = {
      id: 'collection',
      placeholder: 'Collection CITE URN',
      validate: e[14],
      invalidMessage: 'Please enter a valid CITE collection URN.',
      items: e[7],
    }
    return (
      void 0 !== e[0] && (a.value = e[0]),
      void 0 !== e[5] && (a.inputRef = e[5]),
      (t = new TextInput({ props: a })),
      binding_callbacks.push(() => bind(t, 'value', r)),
      binding_callbacks.push(() => bind(t, 'inputRef', s)),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, i) {
          mount_component(t, e, i), (o = !0)
        },
        p(e, o) {
          const r = {}
          128 & o[0] && (r.items = e[7]),
            !i &&
              1 & o[0] &&
              ((i = !0), (r.value = e[0]), add_flush_callback(() => (i = !1))),
            !n &&
              32 & o[0] &&
              ((n = !0),
              (r.inputRef = e[5]),
              add_flush_callback(() => (n = !1))),
            t.$set(r)
        },
        i(e) {
          o || (transition_in(t.$$.fragment, e), (o = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (o = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_if_block_2(e) {
    let t, i
    return (
      (t = new Message({
        props: {
          text: 'This URN already exists and will be replaced if submitted.',
        },
      })),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, n) {
          mount_component(t, e, n), (i = !0)
        },
        i(e) {
          i || (transition_in(t.$$.fragment, e), (i = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (i = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_default_slot_3(e) {
    let t, i, n, o, r, s
    function a(t) {
      e[18].call(null, t)
    }
    function l(t) {
      e[19].call(null, t)
    }
    let c = {
      id: 'name',
      placeholder: 'Image CITE URN',
      validate: e[17],
      invalidMessage: 'Please enter a valid CITE object URN.',
      autocomplete: 'off',
    }
    void 0 !== e[1] && (c.value = e[1]),
      void 0 !== e[6] && (c.inputRef = e[6]),
      (t = new TextInput({ props: c })),
      binding_callbacks.push(() => bind(t, 'value', a)),
      binding_callbacks.push(() => bind(t, 'inputRef', l))
    let h = e[8] && create_if_block_2()
    return {
      c() {
        create_component(t.$$.fragment),
          (o = space()),
          h && h.c(),
          (r = empty())
      },
      m(e, i) {
        mount_component(t, e, i),
          insert(e, o, i),
          h && h.m(e, i),
          insert(e, r, i),
          (s = !0)
      },
      p(e, o) {
        const s = {}
        !i &&
          2 & o[0] &&
          ((i = !0), (s.value = e[1]), add_flush_callback(() => (i = !1))),
          !n &&
            64 & o[0] &&
            ((n = !0), (s.inputRef = e[6]), add_flush_callback(() => (n = !1))),
          t.$set(s),
          e[8]
            ? h
              ? 256 & o[0] && transition_in(h, 1)
              : ((h = create_if_block_2()),
                h.c(),
                transition_in(h, 1),
                h.m(r.parentNode, r))
            : h &&
              (group_outros(),
              transition_out(h, 1, 1, () => {
                h = null
              }),
              check_outros())
      },
      i(e) {
        s || (transition_in(t.$$.fragment, e), transition_in(h), (s = !0))
      },
      o(e) {
        transition_out(t.$$.fragment, e), transition_out(h), (s = !1)
      },
      d(e) {
        destroy_component(t, e), e && detach(o), h && h.d(e), e && detach(r)
      },
    }
  }
  function create_if_block_1$3(e) {
    let t, i
    return (
      (t = new Message({
        props: {
          text:
            'The media could not be loaded for preview due to errors.\r\n                You can ingest it nonetheless.',
        },
      })),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, n) {
          mount_component(t, e, n), (i = !0)
        },
        i(e) {
          i || (transition_in(t.$$.fragment, e), (i = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (i = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_default_slot_2$1(e) {
    let t, i, n, o, r
    function s(t) {
      e[21].call(null, t)
    }
    let a = {
      id: 'source',
      placeholder: 'Resource URL',
      validate: e[20],
      invalidMessage:
        'Please enter a valid CITE object URN or a HTTP(S)\r\n              URL.',
    }
    void 0 !== e[2] && (a.value = e[2]),
      (t = new TextInput({ props: a })),
      binding_callbacks.push(() => bind(t, 'value', s))
    let l = e[10] && create_if_block_1$3()
    return {
      c() {
        create_component(t.$$.fragment),
          (n = space()),
          l && l.c(),
          (o = empty())
      },
      m(e, i) {
        mount_component(t, e, i),
          insert(e, n, i),
          l && l.m(e, i),
          insert(e, o, i),
          (r = !0)
      },
      p(e, n) {
        const r = {}
        !i &&
          4 & n[0] &&
          ((i = !0), (r.value = e[2]), add_flush_callback(() => (i = !1))),
          t.$set(r),
          e[10]
            ? l
              ? 1024 & n[0] && transition_in(l, 1)
              : ((l = create_if_block_1$3()),
                l.c(),
                transition_in(l, 1),
                l.m(o.parentNode, o))
            : l &&
              (group_outros(),
              transition_out(l, 1, 1, () => {
                l = null
              }),
              check_outros())
      },
      i(e) {
        r || (transition_in(t.$$.fragment, e), transition_in(l), (r = !0))
      },
      o(e) {
        transition_out(t.$$.fragment, e), transition_out(l), (r = !1)
      },
      d(e) {
        destroy_component(t, e), e && detach(n), l && l.d(e), e && detach(o)
      },
    }
  }
  function create_default_slot_1$1(e) {
    let t, i, n, o, r, s, a
    return {
      c() {
        ;(t = element('div')),
          (i = element('select')),
          (n = element('option')),
          (n.textContent = 'Static'),
          (o = element('option')),
          (o.textContent = 'Deep Zoom (local)'),
          (r = element('option')),
          (r.textContent = 'IIIF'),
          (n.__value = 'static'),
          (n.value = n.__value),
          (o.__value = 'localDZ'),
          (o.value = o.__value),
          (r.__value = 'iiif'),
          (r.value = r.__value),
          attr(i, 'id', 'protocol'),
          attr(i, 'class', 'svelte-1dwqmop'),
          void 0 === e[3] && add_render_callback(() => e[22].call(i)),
          attr(t, 'class', 'select')
      },
      m(l, c) {
        insert(l, t, c),
          append(t, i),
          append(i, n),
          append(i, o),
          append(i, r),
          select_option(i, e[3]),
          s || ((a = listen(i, 'change', e[22])), (s = !0))
      },
      p(e, t) {
        8 & t[0] && select_option(i, e[3])
      },
      d(e) {
        e && detach(t), (s = !1), a()
      },
    }
  }
  function create_if_block$4(e) {
    let t, i
    return (
      (t = new Message({ props: { text: e[4], error: e[12] } })),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, n) {
          mount_component(t, e, n), (i = !0)
        },
        p(e, i) {
          const n = {}
          16 & i[0] && (n.text = e[4]),
            4096 & i[0] && (n.error = e[12]),
            t.$set(n)
        },
        i(e) {
          i || (transition_in(t.$$.fragment, e), (i = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (i = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_default_slot$1(e) {
    let t,
      i,
      n,
      o,
      r,
      s,
      a,
      l,
      c = e[4] && create_if_block$4(e)
    return {
      c() {
        ;(t = element('button')),
          (i = text('Add Image')),
          (o = space()),
          c && c.c(),
          (r = empty()),
          attr(t, 'class', 'button is-success'),
          (t.disabled = n = !e[11])
      },
      m(n, h) {
        insert(n, t, h),
          append(t, i),
          insert(n, o, h),
          c && c.m(n, h),
          insert(n, r, h),
          (s = !0),
          a || ((l = listen(t, 'click', e[13])), (a = !0))
      },
      p(e, i) {
        ;(!s || (2048 & i[0] && n !== (n = !e[11]))) && (t.disabled = n),
          e[4]
            ? c
              ? (c.p(e, i), 16 & i[0] && transition_in(c, 1))
              : ((c = create_if_block$4(e)),
                c.c(),
                transition_in(c, 1),
                c.m(r.parentNode, r))
            : c &&
              (group_outros(),
              transition_out(c, 1, 1, () => {
                c = null
              }),
              check_outros())
      },
      i(e) {
        s || (transition_in(c), (s = !0))
      },
      o(e) {
        transition_out(c), (s = !1)
      },
      d(e) {
        e && detach(t),
          e && detach(o),
          c && c.d(e),
          e && detach(r),
          (a = !1),
          l()
      },
    }
  }
  function create_fragment$8(e) {
    let t, i, n, o, r, s, a, l, c, h, u, d, p, g, m, v, f, y, w, T, x, _
    return (
      (l = new FormLine({
        props: {
          id: 'collection',
          label: 'Collection',
          $$slots: { default: [create_default_slot_4] },
          $$scope: { ctx: e },
        },
      })),
      (h = new FormLine({
        props: {
          id: 'name',
          label: 'Image Name',
          $$slots: { default: [create_default_slot_3] },
          $$scope: { ctx: e },
        },
      })),
      (d = new FormLine({
        props: {
          id: 'source',
          label: 'Source',
          $$slots: { default: [create_default_slot_2$1] },
          $$scope: { ctx: e },
        },
      })),
      (g = new FormLine({
        props: {
          id: 'protocol',
          label: 'Type',
          $$slots: { default: [create_default_slot_1$1] },
          $$scope: { ctx: e },
        },
      })),
      (v = new FormLine({
        props: {
          offset: !0,
          $$slots: { default: [create_default_slot$1] },
          $$scope: { ctx: e },
        },
      })),
      {
        c() {
          ;(t = element('div')),
            (i = element('section')),
            (n = element('div')),
            (o = element('div')),
            (r = element('form')),
            (s = element('h4')),
            (s.textContent = 'Media Data'),
            (a = space()),
            create_component(l.$$.fragment),
            (c = space()),
            create_component(h.$$.fragment),
            (u = space()),
            create_component(d.$$.fragment),
            (p = space()),
            create_component(g.$$.fragment),
            (m = space()),
            create_component(v.$$.fragment),
            (f = space()),
            (y = element('div')),
            (w = element('div')),
            (w.innerHTML =
              '<h3 class="title is-4">Preview</h3> \n          <div id="preview" class="preview svelte-1dwqmop"></div>'),
            attr(s, 'class', 'title is-4'),
            attr(r, 'class', 'form svelte-1dwqmop'),
            attr(o, 'class', 'column form-column svelte-1dwqmop'),
            attr(w, 'class', 'preview-container svelte-1dwqmop'),
            toggle_class(w, 'visible', e[9]),
            attr(y, 'class', 'column form-column svelte-1dwqmop'),
            attr(n, 'class', 'columns is-desktop'),
            attr(t, 'class', 'container is-fluid')
        },
        m(S, E) {
          insert(S, t, E),
            append(t, i),
            append(i, n),
            append(n, o),
            append(o, r),
            append(r, s),
            append(r, a),
            mount_component(l, r, null),
            append(r, c),
            mount_component(h, r, null),
            append(r, u),
            mount_component(d, r, null),
            append(r, p),
            mount_component(g, r, null),
            append(r, m),
            mount_component(v, r, null),
            append(n, f),
            append(n, y),
            append(y, w),
            (T = !0),
            x || ((_ = listen(r, 'submit', e[13])), (x = !0))
        },
        p(e, t) {
          const i = {}
          ;(161 & t[0]) | (2 & t[1]) && (i.$$scope = { dirty: t, ctx: e }),
            l.$set(i)
          const n = {}
          ;(322 & t[0]) | (2 & t[1]) && (n.$$scope = { dirty: t, ctx: e }),
            h.$set(n)
          const o = {}
          ;(1028 & t[0]) | (2 & t[1]) && (o.$$scope = { dirty: t, ctx: e }),
            d.$set(o)
          const r = {}
          ;(8 & t[0]) | (2 & t[1]) && (r.$$scope = { dirty: t, ctx: e }),
            g.$set(r)
          const s = {}
          ;(6160 & t[0]) | (2 & t[1]) && (s.$$scope = { dirty: t, ctx: e }),
            v.$set(s),
            512 & t[0] && toggle_class(w, 'visible', e[9])
        },
        i(e) {
          T ||
            (transition_in(l.$$.fragment, e),
            transition_in(h.$$.fragment, e),
            transition_in(d.$$.fragment, e),
            transition_in(g.$$.fragment, e),
            transition_in(v.$$.fragment, e),
            (T = !0))
        },
        o(e) {
          transition_out(l.$$.fragment, e),
            transition_out(h.$$.fragment, e),
            transition_out(d.$$.fragment, e),
            transition_out(g.$$.fragment, e),
            transition_out(v.$$.fragment, e),
            (T = !1)
        },
        d(e) {
          e && detach(t),
            destroy_component(l),
            destroy_component(h),
            destroy_component(d),
            destroy_component(g),
            destroy_component(v),
            (x = !1),
            _()
        },
      }
    )
  }
  function instance$8(e, t, i) {
    let n,
      o,
      r = '',
      s = '',
      a = '',
      l = !0,
      c = 'static',
      h = null,
      u = null,
      d = [],
      p = !1,
      g = void 0,
      m = void 0,
      v = !1,
      f = !1
    onMount(async () => {
      const e = new URLSearchParams(location.search)
      e.has('collection')
        ? ctsUrn_1(e.get('collection'), { noPassage: !0 })
          ? (i(0, (r = e.get('collection'))), o.focus())
          : (e.delete('collection'),
            navigate('/ingest?' + e.toString(), { replace: !0 }))
        : n.focus(),
        await (async function () {
          const e = await fetch('/requestImgCollection/')
          i(7, (d = (await e.json()).item))
        })()
    })
    let y, w, T, x
    return (
      (e.$$.update = () => {
        3 & e.$$.dirty[0] &&
          i(27, (y = ctsUrn_1(r, { noPassage: !0 }) && ctsUrn_1(s))),
          4 & e.$$.dirty[0] && i(28, (w = ctsUrn_1(a) || validateHttpUrl(a))),
          402653184 & e.$$.dirty[0] && i(11, (T = y && w)),
          16777232 & e.$$.dirty[0] &&
            null !== h &&
            (clearTimeout(u),
            i(24, (u = setTimeout(() => i(4, (h = null)), 1e4)))),
          16 & e.$$.dirty[0] &&
            i(12, (x = h && h.toLowerCase().includes('error'))),
          4 & e.$$.dirty[0] && (l = !ctsUrn_1(a)),
          134217987 & e.$$.dirty[0] &&
            (y
              ? fetch(`/getImageInfo/${r}/${s}`).then(async (e) => {
                  const t = await e.json()
                  i(8, (p = !!t.urn))
                })
              : p && i(8, (p = !1))),
          268435460 & e.$$.dirty[0] &&
            w &&
            (i(10, (f = !1)),
            validateHttpUrl(a)
              ? (async function (e) {
                  try {
                    const [t, n] = await isIIIFImage(e)
                    t
                      ? (i(26, (m = getIIIFOpts('preview', n))),
                        i(3, (c = 'iiif')))
                      : (i(26, (m = getStaticOpts('preview', e))),
                        i(3, (c = 'static')))
                  } catch (t) {
                    t.message.includes('NetworkError') ||
                      console.error(t.message),
                      i(26, (m = getStaticOpts('preview', e))),
                      i(3, (c = 'static'))
                  }
                })(a)
              : ctsUrn_1(a) &&
                (i(26, (m = getInternalOpts('preview', a))),
                i(3, (c = 'localDZ')))),
          369098752 & e.$$.dirty[0] &&
            w &&
            m &&
            (g && (i(9, (v = !1)), g.destroy()),
            (function (e) {
              const { tileSources: t, ...n } = e
              i(25, (g = openseadragon(n))),
                g.addHandler('open-failed', () => {
                  i(9, (v = !1)), g.destroy(), i(10, (f = !0))
                }),
                g.addHandler('open', () => {
                  i(9, (v = !0))
                }),
                g.open(t)
            })(m))
      }),
      [
        r,
        s,
        a,
        c,
        h,
        n,
        o,
        d,
        p,
        v,
        f,
        T,
        x,
        async function (e) {
          if ((e.preventDefault(), !T)) return
          const t = { name: r, urn: s, location: a, external: l, protocol: c },
            n = await fetch('/addtoCITE?' + lib_3(t))
          if (200 !== n.status)
            return (
              console.error(
                `Ingestion failed: HTTP ${n.status} ${await n.text()}`
              ),
              void i(4, (h = 'An error occurred. Please try later.'))
            )
          i(4, (h = 'Image ingested.')),
            window.setTimeout(() => {
              i(1, (s = '')), o.focus()
            }, 2500)
        },
        (e) => ctsUrn_1(e, { noPassage: !0 }),
        function (e) {
          ;(r = e), i(0, r)
        },
        function (e) {
          ;(n = e), i(5, n)
        },
        (e) => ctsUrn_1(e),
        function (e) {
          ;(s = e), i(1, s)
        },
        function (e) {
          ;(o = e), i(6, o)
        },
        (e) => ctsUrn_1(e) || validateHttpUrl(e),
        function (e) {
          ;(a = e), i(2, a)
        },
        function () {
          ;(c = select_value(this)), i(3, c), i(28, w), i(2, a)
        },
      ]
    )
  }
  class IngestImage extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$8, create_fragment$8, safe_not_equal, {}, [
          -1,
          -1,
        ])
    }
  }
  var openseadragon$1 = createCommonjsModule(function (e) {
    //! openseadragon 3.1.0
    //! Built on 2022-06-07
    //! Git commit: v3.1.0-0-ee3fc2b
    //! http://openseadragon.github.io
    //! License: http://openseadragon.github.io/license/
    function t(e) {
      return new t.Viewer(e)
    }
    var i, n, o, r
    !(function (e) {
      e.version = {
        versionStr: '3.1.0',
        major: parseInt('3', 10),
        minor: parseInt('1', 10),
        revision: parseInt('0', 10),
      }
      var i,
        n = {
          '[object Boolean]': 'boolean',
          '[object Number]': 'number',
          '[object String]': 'string',
          '[object Function]': 'function',
          '[object Array]': 'array',
          '[object Date]': 'date',
          '[object RegExp]': 'regexp',
          '[object Object]': 'object',
        },
        o = Object.prototype.toString,
        r = Object.prototype.hasOwnProperty
      ;(e.isFunction = function (t) {
        return 'function' === e.type(t)
      }),
        (e.isArray =
          Array.isArray ||
          function (t) {
            return 'array' === e.type(t)
          }),
        (e.isWindow = function (e) {
          return e && 'object' == typeof e && 'setInterval' in e
        }),
        (e.type = function (e) {
          return null == e ? String(e) : n[o.call(e)] || 'object'
        }),
        (e.isPlainObject = function (i) {
          if (!i || 'object' !== t.type(i) || i.nodeType || e.isWindow(i))
            return !1
          if (
            i.constructor &&
            !r.call(i, 'constructor') &&
            !r.call(i.constructor.prototype, 'isPrototypeOf')
          )
            return !1
          var n
          for (var o in i) n = o
          return void 0 === n || r.call(i, n)
        }),
        (e.isEmptyObject = function (e) {
          for (var t in e) return !1
          return !0
        }),
        (e.freezeObject = function (t) {
          return (
            Object.freeze
              ? (e.freezeObject = Object.freeze)
              : (e.freezeObject = function (e) {
                  return e
                }),
            e.freezeObject(t)
          )
        }),
        (e.supportsCanvas =
          ((i = document.createElement('canvas')),
          !(!e.isFunction(i.getContext) || !i.getContext('2d')))),
        (e.isCanvasTainted = function (e) {
          var t = !1
          try {
            e.getContext('2d').getImageData(0, 0, 1, 1)
          } catch (e) {
            t = !0
          }
          return t
        }),
        (e.supportsAddEventListener = !(
          !document.documentElement.addEventListener ||
          !document.addEventListener
        )),
        (e.supportsRemoveEventListener = !(
          !document.documentElement.removeEventListener ||
          !document.removeEventListener
        )),
        (e.supportsEventListenerOptions = (function () {
          var t = 0
          if (e.supportsAddEventListener)
            try {
              var i = {
                get capture() {
                  return t++, !1
                },
                get once() {
                  return t++, !1
                },
                get passive() {
                  return t++, !1
                },
              }
              window.addEventListener('test', null, i),
                window.removeEventListener('test', null, i)
            } catch (e) {
              t = 0
            }
          return t >= 3
        })()),
        (e.getCurrentPixelDensityRatio = function () {
          if (e.supportsCanvas) {
            var t = document.createElement('canvas').getContext('2d'),
              i = window.devicePixelRatio || 1,
              n =
                t.webkitBackingStorePixelRatio ||
                t.mozBackingStorePixelRatio ||
                t.msBackingStorePixelRatio ||
                t.oBackingStorePixelRatio ||
                t.backingStorePixelRatio ||
                1
            return Math.max(i, 1) / n
          }
          return 1
        }),
        (e.pixelDensityRatio = e.getCurrentPixelDensityRatio())
    })(t),
      (function (e) {
        e.extend = function () {
          var e,
            i,
            n,
            o,
            r,
            s,
            a = arguments[0] || {},
            l = arguments.length,
            c = !1,
            h = 1
          for (
            'boolean' == typeof a &&
              ((c = a), (a = arguments[1] || {}), (h = 2)),
              'object' == typeof a || t.isFunction(a) || (a = {}),
              l === h && ((a = this), --h);
            h < l;
            h++
          )
            if (null !== (e = arguments[h]) || void 0 !== e)
              for (i in e)
                (n = a[i]),
                  a !== (o = e[i]) &&
                    (c && o && (t.isPlainObject(o) || (r = t.isArray(o)))
                      ? (r
                          ? ((r = !1), (s = n && t.isArray(n) ? n : []))
                          : (s = n && t.isPlainObject(n) ? n : {}),
                        (a[i] = t.extend(c, s, o)))
                      : void 0 !== o && (a[i] = o))
          return a
        }
        e.extend(e, {
          DEFAULT_SETTINGS: {
            xmlPath: null,
            tileSources: null,
            tileHost: null,
            initialPage: 0,
            crossOriginPolicy: !1,
            ajaxWithCredentials: !1,
            loadTilesWithAjax: !1,
            ajaxHeaders: {},
            splitHashDataForPost: !1,
            panHorizontal: !0,
            panVertical: !0,
            constrainDuringPan: !1,
            wrapHorizontal: !1,
            wrapVertical: !1,
            visibilityRatio: 0.5,
            minPixelRatio: 0.5,
            defaultZoomLevel: 0,
            minZoomLevel: null,
            maxZoomLevel: null,
            homeFillsViewer: !1,
            clickTimeThreshold: 300,
            clickDistThreshold: 5,
            dblClickTimeThreshold: 300,
            dblClickDistThreshold: 20,
            springStiffness: 6.5,
            animationTime: 1.2,
            gestureSettingsMouse: {
              dragToPan: !0,
              scrollToZoom: !0,
              clickToZoom: !0,
              dblClickToZoom: !1,
              pinchToZoom: !1,
              zoomToRefPoint: !0,
              flickEnabled: !1,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: !1,
            },
            gestureSettingsTouch: {
              dragToPan: !0,
              scrollToZoom: !1,
              clickToZoom: !1,
              dblClickToZoom: !0,
              pinchToZoom: !0,
              zoomToRefPoint: !0,
              flickEnabled: !0,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: !0,
            },
            gestureSettingsPen: {
              dragToPan: !0,
              scrollToZoom: !1,
              clickToZoom: !0,
              dblClickToZoom: !1,
              pinchToZoom: !1,
              zoomToRefPoint: !0,
              flickEnabled: !1,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: !1,
            },
            gestureSettingsUnknown: {
              dragToPan: !0,
              scrollToZoom: !1,
              clickToZoom: !1,
              dblClickToZoom: !0,
              pinchToZoom: !0,
              zoomToRefPoint: !0,
              flickEnabled: !0,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: !1,
            },
            zoomPerClick: 2,
            zoomPerScroll: 1.2,
            zoomPerSecond: 1,
            blendTime: 0,
            alwaysBlend: !1,
            autoHideControls: !0,
            immediateRender: !1,
            minZoomImageRatio: 0.9,
            maxZoomPixelRatio: 1.1,
            smoothTileEdgesMinZoom: 1.1,
            iOSDevice: (function () {
              if ('object' != typeof navigator) return !1
              var e = navigator.userAgent
              return (
                'string' == typeof e &&
                (-1 !== e.indexOf('iPhone') ||
                  -1 !== e.indexOf('iPad') ||
                  -1 !== e.indexOf('iPod'))
              )
            })(),
            pixelsPerWheelLine: 40,
            pixelsPerArrowPress: 40,
            autoResize: !0,
            preserveImageSizeOnResize: !1,
            minScrollDeltaTime: 50,
            rotationIncrement: 90,
            showSequenceControl: !0,
            sequenceControlAnchor: null,
            preserveViewport: !1,
            preserveOverlays: !1,
            navPrevNextWrap: !1,
            showNavigationControl: !0,
            navigationControlAnchor: null,
            showZoomControl: !0,
            showHomeControl: !0,
            showFullPageControl: !0,
            showRotationControl: !0,
            showFlipControl: !1,
            controlsFadeDelay: 2e3,
            controlsFadeLength: 1500,
            mouseNavEnabled: !0,
            showNavigator: !0,
            navigatorId: null,
            navigatorPosition: null,
            navigatorSizeRatio: 0.2,
            navigatorMaintainSizeRatio: !1,
            navigatorTop: null,
            navigatorLeft: null,
            navigatorHeight: null,
            navigatorWidth: null,
            navigatorAutoResize: !0,
            navigatorAutoFade: !0,
            navigatorRotate: !0,
            navigatorBackground: '#000',
            navigatorOpacity: 0.8,
            navigatorBorderColor: '#555',
            navigatorDisplayRegionColor: '#900',
            degrees: 0,
            flipped: !1,
            opacity: 1,
            preload: !1,
            compositeOperation: null,
            imageSmoothingEnabled: !0,
            placeholderFillStyle: null,
            subPixelRoundingForTransparency: null,
            showReferenceStrip: !1,
            referenceStripScroll: 'horizontal',
            referenceStripElement: null,
            referenceStripHeight: null,
            referenceStripWidth: null,
            referenceStripPosition: 'BOTTOM_LEFT',
            referenceStripSizeRatio: 0.2,
            collectionRows: 3,
            collectionColumns: 0,
            collectionLayout: 'horizontal',
            collectionMode: !1,
            collectionTileSize: 800,
            collectionTileMargin: 80,
            imageLoaderLimit: 0,
            maxImageCacheCount: 200,
            timeout: 3e3,
            useCanvas: !0,
            prefixUrl: '/images/',
            navImages: {
              zoomIn: {
                REST: 'zoomin_rest.png',
                GROUP: 'zoomin_grouphover.png',
                HOVER: 'zoomin_hover.png',
                DOWN: 'zoomin_pressed.png',
              },
              zoomOut: {
                REST: 'zoomout_rest.png',
                GROUP: 'zoomout_grouphover.png',
                HOVER: 'zoomout_hover.png',
                DOWN: 'zoomout_pressed.png',
              },
              home: {
                REST: 'home_rest.png',
                GROUP: 'home_grouphover.png',
                HOVER: 'home_hover.png',
                DOWN: 'home_pressed.png',
              },
              fullpage: {
                REST: 'fullpage_rest.png',
                GROUP: 'fullpage_grouphover.png',
                HOVER: 'fullpage_hover.png',
                DOWN: 'fullpage_pressed.png',
              },
              rotateleft: {
                REST: 'rotateleft_rest.png',
                GROUP: 'rotateleft_grouphover.png',
                HOVER: 'rotateleft_hover.png',
                DOWN: 'rotateleft_pressed.png',
              },
              rotateright: {
                REST: 'rotateright_rest.png',
                GROUP: 'rotateright_grouphover.png',
                HOVER: 'rotateright_hover.png',
                DOWN: 'rotateright_pressed.png',
              },
              flip: {
                REST: 'flip_rest.png',
                GROUP: 'flip_grouphover.png',
                HOVER: 'flip_hover.png',
                DOWN: 'flip_pressed.png',
              },
              previous: {
                REST: 'previous_rest.png',
                GROUP: 'previous_grouphover.png',
                HOVER: 'previous_hover.png',
                DOWN: 'previous_pressed.png',
              },
              next: {
                REST: 'next_rest.png',
                GROUP: 'next_grouphover.png',
                HOVER: 'next_hover.png',
                DOWN: 'next_pressed.png',
              },
            },
            debugMode: !1,
            debugGridColor: [
              '#437AB2',
              '#1B9E77',
              '#D95F02',
              '#7570B3',
              '#E7298A',
              '#66A61E',
              '#E6AB02',
              '#A6761D',
              '#666666',
            ],
            silenceMultiImageWarnings: !1,
          },
          SIGNAL: '----seadragon----',
          delegate: function (e, t) {
            return function () {
              var i = arguments
              return void 0 === i && (i = []), t.apply(e, i)
            }
          },
          BROWSERS: {
            UNKNOWN: 0,
            IE: 1,
            FIREFOX: 2,
            SAFARI: 3,
            CHROME: 4,
            OPERA: 5,
            EDGE: 6,
            CHROMEEDGE: 7,
          },
          SUBPIXEL_ROUNDING_OCCURRENCES: {
            NEVER: 0,
            ONLY_AT_REST: 1,
            ALWAYS: 2,
          },
          _viewers: new Map(),
          getViewer: function (t) {
            return e._viewers.get(this.getElement(t))
          },
          getElement: function (e) {
            return 'string' == typeof e && (e = document.getElementById(e)), e
          },
          getElementPosition: function (t) {
            var i,
              n,
              o = new e.Point()
            for (
              n = r(
                (t = e.getElement(t)),
                (i = 'fixed' === e.getElementStyle(t).position)
              );
              n;

            )
              (o.x += t.offsetLeft),
                (o.y += t.offsetTop),
                i && (o = o.plus(e.getPageScroll())),
                (n = r(
                  (t = n),
                  (i = 'fixed' === e.getElementStyle(t).position)
                ))
            return o
          },
          getElementOffset: function (t) {
            var i,
              n,
              o = (t = e.getElement(t)) && t.ownerDocument,
              r = { top: 0, left: 0 }
            return o
              ? ((i = o.documentElement),
                void 0 !== t.getBoundingClientRect &&
                  (r = t.getBoundingClientRect()),
                (n =
                  o === o.window
                    ? o
                    : 9 === o.nodeType && (o.defaultView || o.parentWindow)),
                new e.Point(
                  r.left +
                    (n.pageXOffset || i.scrollLeft) -
                    (i.clientLeft || 0),
                  r.top + (n.pageYOffset || i.scrollTop) - (i.clientTop || 0)
                ))
              : new e.Point()
          },
          getElementSize: function (t) {
            return (
              (t = e.getElement(t)), new e.Point(t.clientWidth, t.clientHeight)
            )
          },
          getElementStyle: document.documentElement.currentStyle
            ? function (t) {
                return (t = e.getElement(t)).currentStyle
              }
            : function (t) {
                return (t = e.getElement(t)), window.getComputedStyle(t, '')
              },
          getCssPropertyWithVendorPrefix: function (t) {
            var i = {}
            return (
              (e.getCssPropertyWithVendorPrefix = function (t) {
                if (void 0 !== i[t]) return i[t]
                var n = document.createElement('div').style,
                  o = null
                if (void 0 !== n[t]) o = t
                else
                  for (
                    var r = [
                        'Webkit',
                        'Moz',
                        'MS',
                        'O',
                        'webkit',
                        'moz',
                        'ms',
                        'o',
                      ],
                      s = e.capitalizeFirstLetter(t),
                      a = 0;
                    a < r.length;
                    a++
                  ) {
                    var l = r[a] + s
                    if (void 0 !== n[l]) {
                      o = l
                      break
                    }
                  }
                return (i[t] = o), o
              }),
              e.getCssPropertyWithVendorPrefix(t)
            )
          },
          capitalizeFirstLetter: function (e) {
            return e.charAt(0).toUpperCase() + e.slice(1)
          },
          positiveModulo: function (e, t) {
            var i = e % t
            return i < 0 && (i += t), i
          },
          pointInElement: function (t, i) {
            t = e.getElement(t)
            var n = e.getElementOffset(t),
              o = e.getElementSize(t)
            return (
              i.x >= n.x && i.x < n.x + o.x && i.y < n.y + o.y && i.y >= n.y
            )
          },
          getMousePosition: function (t) {
            if ('number' == typeof t.pageX)
              e.getMousePosition = function (t) {
                var i = new e.Point()
                return (i.x = t.pageX), (i.y = t.pageY), i
              }
            else {
              if ('number' != typeof t.clientX)
                throw new Error(
                  'Unknown event mouse position, no known technique.'
                )
              e.getMousePosition = function (t) {
                var i = new e.Point()
                return (
                  (i.x =
                    t.clientX +
                    document.body.scrollLeft +
                    document.documentElement.scrollLeft),
                  (i.y =
                    t.clientY +
                    document.body.scrollTop +
                    document.documentElement.scrollTop),
                  i
                )
              }
            }
            return e.getMousePosition(t)
          },
          getPageScroll: function () {
            var t = document.documentElement || {},
              i = document.body || {}
            if ('number' == typeof window.pageXOffset)
              e.getPageScroll = function () {
                return new e.Point(window.pageXOffset, window.pageYOffset)
              }
            else if (i.scrollLeft || i.scrollTop)
              e.getPageScroll = function () {
                return new e.Point(
                  document.body.scrollLeft,
                  document.body.scrollTop
                )
              }
            else {
              if (!t.scrollLeft && !t.scrollTop) return new e.Point(0, 0)
              e.getPageScroll = function () {
                return new e.Point(
                  document.documentElement.scrollLeft,
                  document.documentElement.scrollTop
                )
              }
            }
            return e.getPageScroll()
          },
          setPageScroll: function (t) {
            if (void 0 !== window.scrollTo)
              e.setPageScroll = function (e) {
                window.scrollTo(e.x, e.y)
              }
            else {
              var i = e.getPageScroll()
              if (i.x === t.x && i.y === t.y) return
              ;(document.body.scrollLeft = t.x), (document.body.scrollTop = t.y)
              var n = e.getPageScroll()
              if (n.x !== i.x && n.y !== i.y)
                return void (e.setPageScroll = function (e) {
                  ;(document.body.scrollLeft = e.x),
                    (document.body.scrollTop = e.y)
                })
              if (
                ((document.documentElement.scrollLeft = t.x),
                (document.documentElement.scrollTop = t.y),
                (n = e.getPageScroll()).x !== i.x && n.y !== i.y)
              )
                return void (e.setPageScroll = function (e) {
                  ;(document.documentElement.scrollLeft = e.x),
                    (document.documentElement.scrollTop = e.y)
                })
              e.setPageScroll = function (e) {}
            }
            e.setPageScroll(t)
          },
          getWindowSize: function () {
            var t = document.documentElement || {},
              i = document.body || {}
            if ('number' == typeof window.innerWidth)
              e.getWindowSize = function () {
                return new e.Point(window.innerWidth, window.innerHeight)
              }
            else if (t.clientWidth || t.clientHeight)
              e.getWindowSize = function () {
                return new e.Point(
                  document.documentElement.clientWidth,
                  document.documentElement.clientHeight
                )
              }
            else {
              if (!i.clientWidth && !i.clientHeight)
                throw new Error('Unknown window size, no known technique.')
              e.getWindowSize = function () {
                return new e.Point(
                  document.body.clientWidth,
                  document.body.clientHeight
                )
              }
            }
            return e.getWindowSize()
          },
          makeCenteredNode: function (t) {
            t = e.getElement(t)
            var i = [
              e.makeNeutralElement('div'),
              e.makeNeutralElement('div'),
              e.makeNeutralElement('div'),
            ]
            return (
              e.extend(i[0].style, {
                display: 'table',
                height: '100%',
                width: '100%',
              }),
              e.extend(i[1].style, { display: 'table-row' }),
              e.extend(i[2].style, {
                display: 'table-cell',
                verticalAlign: 'middle',
                textAlign: 'center',
              }),
              i[0].appendChild(i[1]),
              i[1].appendChild(i[2]),
              i[2].appendChild(t),
              i[0]
            )
          },
          makeNeutralElement: function (e) {
            var t = document.createElement(e),
              i = t.style
            return (
              (i.background = 'transparent none'),
              (i.border = 'none'),
              (i.margin = '0px'),
              (i.padding = '0px'),
              (i.position = 'static'),
              t
            )
          },
          now: function () {
            return (
              Date.now
                ? (e.now = Date.now)
                : (e.now = function () {
                    return new Date().getTime()
                  }),
              e.now()
            )
          },
          makeTransparentImage: function (t) {
            var i = e.makeNeutralElement('img')
            return (i.src = t), i
          },
          setElementOpacity: function (t, i, n) {
            var o
            ;(t = e.getElement(t)),
              n && !e.Browser.alpha && (i = Math.round(i)),
              e.Browser.opacity
                ? (t.style.opacity = i < 1 ? i : '')
                : i < 1
                ? ((o = 'alpha(opacity=' + Math.round(100 * i) + ')'),
                  (t.style.filter = o))
                : (t.style.filter = '')
          },
          setElementTouchActionNone: function (t) {
            void 0 !== (t = e.getElement(t)).style.touchAction
              ? (t.style.touchAction = 'none')
              : void 0 !== t.style.msTouchAction &&
                (t.style.msTouchAction = 'none')
          },
          setElementPointerEvents: function (t, i) {
            void 0 !== (t = e.getElement(t)).style &&
              void 0 !== t.style.pointerEvents &&
              (t.style.pointerEvents = i)
          },
          setElementPointerEventsNone: function (t) {
            e.setElementPointerEvents(t, 'none')
          },
          addClass: function (t, i) {
            ;(t = e.getElement(t)).className
              ? -1 === (' ' + t.className + ' ').indexOf(' ' + i + ' ') &&
                (t.className += ' ' + i)
              : (t.className = i)
          },
          indexOf: function (e, t, i) {
            return (
              Array.prototype.indexOf
                ? (this.indexOf = function (e, t, i) {
                    return e.indexOf(t, i)
                  })
                : (this.indexOf = function (e, t, i) {
                    var n,
                      o,
                      r = i || 0
                    if (!e) throw new TypeError()
                    if (0 === (o = e.length) || r >= o) return -1
                    for (r < 0 && (r = o - Math.abs(r)), n = r; n < o; n++)
                      if (e[n] === t) return n
                    return -1
                  }),
              this.indexOf(e, t, i)
            )
          },
          removeClass: function (t, i) {
            var n,
              o,
              r = []
            for (
              n = (t = e.getElement(t)).className.split(/\s+/), o = 0;
              o < n.length;
              o++
            )
              n[o] && n[o] !== i && r.push(n[o])
            t.className = r.join(' ')
          },
          normalizeEventListenerOptions: function (t) {
            return void 0 !== t
              ? 'boolean' == typeof t
                ? e.supportsEventListenerOptions
                  ? { capture: t }
                  : t
                : e.supportsEventListenerOptions
                ? t
                : void 0 !== t.capture && t.capture
              : !!e.supportsEventListenerOptions && { capture: !1 }
          },
          addEvent: (function () {
            if (e.supportsAddEventListener)
              return function (t, i, n, o) {
                ;(o = e.normalizeEventListenerOptions(o)),
                  (t = e.getElement(t)).addEventListener(i, n, o)
              }
            if (document.documentElement.attachEvent && document.attachEvent)
              return function (t, i, n) {
                ;(t = e.getElement(t)).attachEvent('on' + i, n)
              }
            throw new Error('No known event model.')
          })(),
          removeEvent: (function () {
            if (e.supportsRemoveEventListener)
              return function (t, i, n, o) {
                ;(o = e.normalizeEventListenerOptions(o)),
                  (t = e.getElement(t)).removeEventListener(i, n, o)
              }
            if (document.documentElement.detachEvent && document.detachEvent)
              return function (t, i, n) {
                ;(t = e.getElement(t)).detachEvent('on' + i, n)
              }
            throw new Error('No known event model.')
          })(),
          cancelEvent: function (e) {
            e.preventDefault()
          },
          eventIsCanceled: function (e) {
            return e.defaultPrevented
          },
          stopEvent: function (e) {
            e.stopPropagation()
          },
          createCallback: function (e, t) {
            var i,
              n = []
            for (i = 2; i < arguments.length; i++) n.push(arguments[i])
            return function () {
              var i,
                o = n.concat([])
              for (i = 0; i < arguments.length; i++) o.push(arguments[i])
              return t.apply(e, o)
            }
          },
          getUrlParameter: function (e) {
            var t = o[e]
            return t || null
          },
          getUrlProtocol: function (e) {
            var t = e.match(/^([a-z]+:)\/\//i)
            return null === t ? window.location.protocol : t[1].toLowerCase()
          },
          createAjaxRequest: function (t) {
            var i
            try {
              i = !!new ActiveXObject('Microsoft.XMLHTTP')
            } catch (e) {
              i = !1
            }
            if (i)
              window.XMLHttpRequest
                ? (e.createAjaxRequest = function (e) {
                    return e
                      ? new ActiveXObject('Microsoft.XMLHTTP')
                      : new XMLHttpRequest()
                  })
                : (e.createAjaxRequest = function () {
                    return new ActiveXObject('Microsoft.XMLHTTP')
                  })
            else {
              if (!window.XMLHttpRequest)
                throw new Error("Browser doesn't support XMLHttpRequest.")
              e.createAjaxRequest = function () {
                return new XMLHttpRequest()
              }
            }
            return e.createAjaxRequest(t)
          },
          makeAjaxRequest: function (t, i, n) {
            var o, r, s, a
            e.isPlainObject(t) &&
              ((i = t.success),
              (n = t.error),
              (o = t.withCredentials),
              (r = t.headers),
              (s = t.responseType || null),
              (a = t.postData || null),
              (t = t.url))
            var l = e.getUrlProtocol(t),
              c = e.createAjaxRequest('file:' === l)
            if (!e.isFunction(i))
              throw new Error('makeAjaxRequest requires a success callback')
            c.onreadystatechange = function () {
              4 === c.readyState &&
                ((c.onreadystatechange = function () {}),
                (c.status >= 200 && c.status < 300) ||
                (0 === c.status && 'http:' !== l && 'https:' !== l)
                  ? i(c)
                  : e.isFunction(n)
                  ? n(c)
                  : e.console.error(
                      'AJAX request returned %d: %s',
                      c.status,
                      t
                    ))
            }
            var h = a ? 'POST' : 'GET'
            try {
              if ((c.open(h, t, !0), s && (c.responseType = s), r))
                for (var u in r)
                  Object.prototype.hasOwnProperty.call(r, u) &&
                    r[u] &&
                    c.setRequestHeader(u, r[u])
              o && (c.withCredentials = !0), c.send(a)
            } catch (t) {
              e.console.error(
                '%s while making AJAX request: %s',
                t.name,
                t.message
              ),
                (c.onreadystatechange = function () {}),
                e.isFunction(n) && n(c, t)
            }
            return c
          },
          jsonp: function (t) {
            var i,
              n = t.url,
              o =
                document.head ||
                document.getElementsByTagName('head')[0] ||
                document.documentElement,
              r = t.callbackName || 'openseadragon' + e.now(),
              s = window[r],
              a = '$1' + r + '$2',
              l = t.param || 'callback',
              c = t.callback
            ;(n = n.replace(/(=)\?(&|$)|\?\?/i, a)),
              (n += (/\?/.test(n) ? '&' : '?') + l + '=' + r),
              (window[r] = function (t) {
                if (s) window[r] = s
                else
                  try {
                    delete window[r]
                  } catch (e) {}
                c && e.isFunction(c) && c(t)
              }),
              (i = document.createElement('script')),
              (void 0 === t.async && !1 === t.async) || (i.async = 'async'),
              t.scriptCharset && (i.charset = t.scriptCharset),
              (i.src = n),
              (i.onload = i.onreadystatechange = function (e, t) {
                ;(t || !i.readyState || /loaded|complete/.test(i.readyState)) &&
                  ((i.onload = i.onreadystatechange = null),
                  o && i.parentNode && o.removeChild(i),
                  (i = void 0))
              }),
              o.insertBefore(i, o.firstChild)
          },
          createFromDZI: function () {
            throw 'OpenSeadragon.createFromDZI is deprecated, use Viewer.open.'
          },
          parseXml: function (t) {
            if (window.DOMParser)
              e.parseXml = function (e) {
                return new DOMParser().parseFromString(e, 'text/xml')
              }
            else {
              if (!window.ActiveXObject)
                throw new Error("Browser doesn't support XML DOM.")
              e.parseXml = function (e) {
                var t = null
                return (
                  ((t = new ActiveXObject('Microsoft.XMLDOM')).async = !1),
                  t.loadXML(e),
                  t
                )
              }
            }
            return e.parseXml(t)
          },
          parseJSON: function (t) {
            return (e.parseJSON = window.JSON.parse), e.parseJSON(t)
          },
          imageFormatSupported: function (e) {
            return !!n[(e = e || '').toLowerCase()]
          },
          setImageFormatsSupported: function (t) {
            e.extend(n, t)
          },
        })
        var i = function (e) {}
        ;(e.console = window.console || {
          log: i,
          debug: i,
          info: i,
          warn: i,
          error: i,
          assert: i,
        }),
          (e.Browser = { vendor: e.BROWSERS.UNKNOWN, version: 0, alpha: !0 })
        var n = { bmp: !1, jpeg: !0, jpg: !0, png: !0, tif: !1, wdp: !1 },
          o = {}
        function r(e, t) {
          return t && e !== document.body ? document.body : e.offsetParent
        }
        !(function () {
          var t = navigator.appVersion,
            i = navigator.userAgent
          switch (navigator.appName) {
            case 'Microsoft Internet Explorer':
              window.attachEvent &&
                window.ActiveXObject &&
                ((e.Browser.vendor = e.BROWSERS.IE),
                (e.Browser.version = parseFloat(
                  i.substring(
                    i.indexOf('MSIE') + 5,
                    i.indexOf(';', i.indexOf('MSIE'))
                  )
                )))
              break
            case 'Netscape':
              window.addEventListener &&
                (i.indexOf('Edge') >= 0
                  ? ((e.Browser.vendor = e.BROWSERS.EDGE),
                    (e.Browser.version = parseFloat(
                      i.substring(i.indexOf('Edge') + 5)
                    )))
                  : i.indexOf('Edg') >= 0
                  ? ((e.Browser.vendor = e.BROWSERS.CHROMEEDGE),
                    (e.Browser.version = parseFloat(
                      i.substring(i.indexOf('Edg') + 4)
                    )))
                  : i.indexOf('Firefox') >= 0
                  ? ((e.Browser.vendor = e.BROWSERS.FIREFOX),
                    (e.Browser.version = parseFloat(
                      i.substring(i.indexOf('Firefox') + 8)
                    )))
                  : i.indexOf('Safari') >= 0
                  ? ((e.Browser.vendor =
                      i.indexOf('Chrome') >= 0
                        ? e.BROWSERS.CHROME
                        : e.BROWSERS.SAFARI),
                    (e.Browser.version = parseFloat(
                      i.substring(
                        i.substring(0, i.indexOf('Safari')).lastIndexOf('/') +
                          1,
                        i.indexOf('Safari')
                      )
                    )))
                  : null !==
                      new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})').exec(
                        i
                      ) &&
                    ((e.Browser.vendor = e.BROWSERS.IE),
                    (e.Browser.version = parseFloat(RegExp.$1))))
              break
            case 'Opera':
              ;(e.Browser.vendor = e.BROWSERS.OPERA),
                (e.Browser.version = parseFloat(t))
          }
          var n,
            r,
            s,
            a = window.location.search.substring(1).split('&')
          for (s = 0; s < a.length; s++)
            if ((r = (n = a[s]).indexOf('=')) > 0) {
              var l = n.substring(0, r),
                c = n.substring(r + 1)
              try {
                o[l] = decodeURIComponent(c)
              } catch (t) {
                e.console.error('Ignoring malformed URL parameter: %s=%s', l, c)
              }
            }
          ;(e.Browser.alpha = !(
            e.Browser.vendor === e.BROWSERS.CHROME && e.Browser.version < 2
          )),
            (e.Browser.opacity = !0),
            e.Browser.vendor === e.BROWSERS.IE &&
              e.Browser.version < 11 &&
              e.console.error(
                'Internet Explorer versions < 11 are not supported by OpenSeadragon'
              )
        })(),
          (function (t) {
            var i =
                t.requestAnimationFrame ||
                t.mozRequestAnimationFrame ||
                t.webkitRequestAnimationFrame ||
                t.msRequestAnimationFrame,
              n =
                t.cancelAnimationFrame ||
                t.mozCancelAnimationFrame ||
                t.webkitCancelAnimationFrame ||
                t.msCancelAnimationFrame
            if (i && n)
              (e.requestAnimationFrame = function () {
                return i.apply(t, arguments)
              }),
                (e.cancelAnimationFrame = function () {
                  return n.apply(t, arguments)
                })
            else {
              var o,
                r = [],
                s = [],
                a = 0
              ;(e.requestAnimationFrame = function (t) {
                return (
                  r.push([++a, t]),
                  o ||
                    (o = setInterval(function () {
                      if (r.length) {
                        var t = e.now(),
                          i = s
                        for (s = r, r = i; s.length; ) s.shift()[1](t)
                      } else clearInterval(o), (o = void 0)
                    }, 20)),
                  a
                )
              }),
                (e.cancelAnimationFrame = function (e) {
                  var t, i
                  for (t = 0, i = r.length; t < i; t += 1)
                    if (r[t][0] === e) return void r.splice(t, 1)
                  for (t = 0, i = s.length; t < i; t += 1)
                    if (s[t][0] === e) return void s.splice(t, 1)
                })
            }
          })(window)
      })(t),
      (i = commonjsGlobal),
      (n = function () {
        return t
      }),
      e.exports ? (e.exports = n()) : (i.OpenSeadragon = n()),
      (o = t),
      (r = {
        supportsFullScreen: !1,
        isFullScreen: function () {
          return !1
        },
        getFullScreenElement: function () {
          return null
        },
        requestFullScreen: function () {},
        exitFullScreen: function () {},
        cancelFullScreen: function () {},
        fullScreenEventName: '',
        fullScreenErrorEventName: '',
      }),
      document.exitFullscreen
        ? ((r.supportsFullScreen = !0),
          (r.getFullScreenElement = function () {
            return document.fullscreenElement
          }),
          (r.requestFullScreen = function (e) {
            return e.requestFullscreen()
          }),
          (r.exitFullScreen = function () {
            document.exitFullscreen()
          }),
          (r.fullScreenEventName = 'fullscreenchange'),
          (r.fullScreenErrorEventName = 'fullscreenerror'))
        : document.msExitFullscreen
        ? ((r.supportsFullScreen = !0),
          (r.getFullScreenElement = function () {
            return document.msFullscreenElement
          }),
          (r.requestFullScreen = function (e) {
            return e.msRequestFullscreen()
          }),
          (r.exitFullScreen = function () {
            document.msExitFullscreen()
          }),
          (r.fullScreenEventName = 'MSFullscreenChange'),
          (r.fullScreenErrorEventName = 'MSFullscreenError'))
        : document.webkitExitFullscreen
        ? ((r.supportsFullScreen = !0),
          (r.getFullScreenElement = function () {
            return document.webkitFullscreenElement
          }),
          (r.requestFullScreen = function (e) {
            return e.webkitRequestFullscreen()
          }),
          (r.exitFullScreen = function () {
            document.webkitExitFullscreen()
          }),
          (r.fullScreenEventName = 'webkitfullscreenchange'),
          (r.fullScreenErrorEventName = 'webkitfullscreenerror'))
        : document.webkitCancelFullScreen
        ? ((r.supportsFullScreen = !0),
          (r.getFullScreenElement = function () {
            return document.webkitCurrentFullScreenElement
          }),
          (r.requestFullScreen = function (e) {
            return e.webkitRequestFullScreen()
          }),
          (r.exitFullScreen = function () {
            document.webkitCancelFullScreen()
          }),
          (r.fullScreenEventName = 'webkitfullscreenchange'),
          (r.fullScreenErrorEventName = 'webkitfullscreenerror'))
        : document.mozCancelFullScreen &&
          ((r.supportsFullScreen = !0),
          (r.getFullScreenElement = function () {
            return document.mozFullScreenElement
          }),
          (r.requestFullScreen = function (e) {
            return e.mozRequestFullScreen()
          }),
          (r.exitFullScreen = function () {
            document.mozCancelFullScreen()
          }),
          (r.fullScreenEventName = 'mozfullscreenchange'),
          (r.fullScreenErrorEventName = 'mozfullscreenerror')),
      (r.isFullScreen = function () {
        return null !== r.getFullScreenElement()
      }),
      (r.cancelFullScreen = function () {
        o.console.error(
          'cancelFullScreen is deprecated. Use exitFullScreen instead.'
        ),
          r.exitFullScreen()
      }),
      o.extend(o, r),
      (function (e) {
        ;(e.EventSource = function () {
          this.events = {}
        }),
          (e.EventSource.prototype = {
            addOnceHandler: function (e, t, i, n) {
              var o = this
              n = n || 1
              var r = 0,
                s = function (i) {
                  ++r === n && o.removeHandler(e, s), t(i)
                }
              this.addHandler(e, s, i)
            },
            addHandler: function (t, i, n) {
              var o = this.events[t]
              o || (this.events[t] = o = []),
                i &&
                  e.isFunction(i) &&
                  (o[o.length] = { handler: i, userData: n || null })
            },
            removeHandler: function (t, i) {
              var n,
                o = this.events[t],
                r = []
              if (o && e.isArray(o)) {
                for (n = 0; n < o.length; n++)
                  o[n].handler !== i && r.push(o[n])
                this.events[t] = r
              }
            },
            numberOfHandlers: function (e) {
              var t = this.events[e]
              return t ? t.length : 0
            },
            removeAllHandlers: function (e) {
              if (e) this.events[e] = []
              else for (var t in this.events) this.events[t] = []
            },
            getHandler: function (e) {
              var t = this.events[e]
              return t && t.length
                ? ((t = 1 === t.length ? [t[0]] : Array.apply(null, t)),
                  function (e, i) {
                    var n,
                      o = t.length
                    for (n = 0; n < o; n++)
                      t[n] &&
                        ((i.eventSource = e),
                        (i.userData = t[n].userData),
                        t[n].handler(i))
                  })
                : null
            },
            raiseEvent: function (e, t) {
              var i = this.getHandler(e)
              i && (t || (t = {}), i(this, t))
            },
          })
      })(t),
      (function (e) {
        var t = {}
        ;(e.MouseTracker = function (i) {
          var n = arguments
          e.isPlainObject(i) ||
            (i = {
              element: n[0],
              clickTimeThreshold: n[1],
              clickDistThreshold: n[2],
            }),
            (this.hash = Math.random()),
            (this.element = e.getElement(i.element)),
            (this.clickTimeThreshold =
              i.clickTimeThreshold || e.DEFAULT_SETTINGS.clickTimeThreshold),
            (this.clickDistThreshold =
              i.clickDistThreshold || e.DEFAULT_SETTINGS.clickDistThreshold),
            (this.dblClickTimeThreshold =
              i.dblClickTimeThreshold ||
              e.DEFAULT_SETTINGS.dblClickTimeThreshold),
            (this.dblClickDistThreshold =
              i.dblClickDistThreshold ||
              e.DEFAULT_SETTINGS.dblClickDistThreshold),
            (this.userData = i.userData || null),
            (this.stopDelay = i.stopDelay || 50),
            (this.preProcessEventHandler = i.preProcessEventHandler || null),
            (this.contextMenuHandler = i.contextMenuHandler || null),
            (this.enterHandler = i.enterHandler || null),
            (this.leaveHandler = i.leaveHandler || null),
            (this.exitHandler = i.exitHandler || null),
            (this.overHandler = i.overHandler || null),
            (this.outHandler = i.outHandler || null),
            (this.pressHandler = i.pressHandler || null),
            (this.nonPrimaryPressHandler = i.nonPrimaryPressHandler || null),
            (this.releaseHandler = i.releaseHandler || null),
            (this.nonPrimaryReleaseHandler =
              i.nonPrimaryReleaseHandler || null),
            (this.moveHandler = i.moveHandler || null),
            (this.scrollHandler = i.scrollHandler || null),
            (this.clickHandler = i.clickHandler || null),
            (this.dblClickHandler = i.dblClickHandler || null),
            (this.dragHandler = i.dragHandler || null),
            (this.dragEndHandler = i.dragEndHandler || null),
            (this.pinchHandler = i.pinchHandler || null),
            (this.stopHandler = i.stopHandler || null),
            (this.keyDownHandler = i.keyDownHandler || null),
            (this.keyUpHandler = i.keyUpHandler || null),
            (this.keyHandler = i.keyHandler || null),
            (this.focusHandler = i.focusHandler || null),
            (this.blurHandler = i.blurHandler || null)
          var o = this
          ;(t[this.hash] = {
            click: function (e) {
              x(o, e)
            },
            dblclick: function (e) {
              _(o, e)
            },
            keydown: function (e) {
              S(o, e)
            },
            keyup: function (e) {
              E(o, e)
            },
            keypress: function (e) {
              P(o, e)
            },
            focus: function (e) {
              b(o, e)
            },
            blur: function (e) {
              R(o, e)
            },
            contextmenu: function (e) {
              C(o, e)
            },
            wheel: function (e) {
              k(o, e)
            },
            mousewheel: function (e) {
              O(o, e)
            },
            DOMMouseScroll: function (e) {
              O(o, e)
            },
            MozMousePixelScroll: function (e) {
              O(o, e)
            },
            losecapture: function (e) {
              D(o, e)
            },
            mouseenter: function (e) {
              $(o, e)
            },
            mouseleave: function (e) {
              j(o, e)
            },
            mouseover: function (e) {
              U(o, e)
            },
            mouseout: function (e) {
              W(o, e)
            },
            mousedown: function (e) {
              V(o, e)
            },
            mouseup: function (e) {
              G(o, e)
            },
            mousemove: function (e) {
              X(o, e)
            },
            touchstart: function (e) {
              B(o, e)
            },
            touchend: function (e) {
              L(o, e)
            },
            touchmove: function (e) {
              H(o, e)
            },
            touchcancel: function (e) {
              z(o, e)
            },
            gesturestart: function (e) {
              M(o, e)
            },
            gesturechange: function (e) {
              F(o, e)
            },
            gotpointercapture: function (e) {
              N(o, e)
            },
            lostpointercapture: function (e) {
              A(o, e)
            },
            pointerenter: function (e) {
              $(o, e)
            },
            pointerleave: function (e) {
              j(o, e)
            },
            pointerover: function (e) {
              U(o, e)
            },
            pointerout: function (e) {
              W(o, e)
            },
            pointerdown: function (e) {
              V(o, e)
            },
            pointerup: function (e) {
              G(o, e)
            },
            pointermove: function (e) {
              X(o, e)
            },
            pointercancel: function (e) {
              Q(o, e)
            },
            pointerupcaptured: function (e) {
              q(o, e)
            },
            pointermovecaptured: function (e) {
              K(o, e)
            },
            tracking: !1,
            activePointersLists: [],
            lastClickPos: null,
            dblClickTimeOut: null,
            pinchGPoints: [],
            lastPinchDist: 0,
            currentPinchDist: 0,
            lastPinchCenter: null,
            currentPinchCenter: null,
            sentDragEvent: !1,
          }),
            (this.hasGestureHandlers = !!(
              this.pressHandler ||
              this.nonPrimaryPressHandler ||
              this.releaseHandler ||
              this.nonPrimaryReleaseHandler ||
              this.clickHandler ||
              this.dblClickHandler ||
              this.dragHandler ||
              this.dragEndHandler ||
              this.pinchHandler
            )),
            (this.hasScrollHandler = !!this.scrollHandler),
            e.MouseTracker.havePointerEvents &&
              e.setElementPointerEvents(this.element, 'auto'),
            this.exitHandler &&
              e.console.error(
                'MouseTracker.exitHandler is deprecated. Use MouseTracker.leaveHandler instead.'
              ),
            i.startDisabled || this.setTracking(!0)
        }),
          (e.MouseTracker.prototype = {
            destroy: function () {
              u(this),
                (this.element = null),
                (t[this.hash] = null),
                delete t[this.hash]
            },
            isTracking: function () {
              return t[this.hash].tracking
            },
            setTracking: function (i) {
              return (
                i
                  ? (function (i) {
                      var n,
                        o,
                        r = t[i.hash]
                      if (!r.tracking) {
                        for (
                          o = 0;
                          o < e.MouseTracker.subscribeEvents.length;
                          o++
                        )
                          (n = e.MouseTracker.subscribeEvents[o]),
                            e.addEvent(
                              i.element,
                              n,
                              r[n],
                              n === e.MouseTracker.wheelEventName && {
                                passive: !1,
                                capture: !1,
                              }
                            )
                        h(i), (r.tracking = !0)
                      }
                    })(this)
                  : u(this),
                this
              )
            },
            getActivePointersListByType: function (i) {
              var n,
                o,
                r = t[this.hash],
                s = r.activePointersLists.length
              for (n = 0; n < s; n++)
                if (r.activePointersLists[n].type === i)
                  return r.activePointersLists[n]
              return (
                (o = new e.MouseTracker.GesturePointList(i)),
                r.activePointersLists.push(o),
                o
              )
            },
            getActivePointerCount: function () {
              var e,
                i = t[this.hash],
                n = i.activePointersLists.length,
                o = 0
              for (e = 0; e < n; e++) o += i.activePointersLists[e].getLength()
              return o
            },
            preProcessEventHandler: function () {},
            contextMenuHandler: function () {},
            enterHandler: function () {},
            leaveHandler: function () {},
            exitHandler: function () {},
            overHandler: function () {},
            outHandler: function () {},
            pressHandler: function () {},
            nonPrimaryPressHandler: function () {},
            releaseHandler: function () {},
            nonPrimaryReleaseHandler: function () {},
            moveHandler: function () {},
            scrollHandler: function () {},
            clickHandler: function () {},
            dblClickHandler: function () {},
            dragHandler: function () {},
            dragEndHandler: function () {},
            pinchHandler: function () {},
            stopHandler: function () {},
            keyDownHandler: function () {},
            keyUpHandler: function () {},
            keyHandler: function () {},
            focusHandler: function () {},
            blurHandler: function () {},
          })
        var i,
          n,
          o,
          r,
          s,
          a,
          l = (function () {
            try {
              return window.self !== window.top
            } catch (e) {
              return !0
            }
          })()
        function c(e) {
          try {
            return e.addEventListener && e.removeEventListener
          } catch (e) {
            return !1
          }
        }
        function h(e) {
          var i,
            n,
            o,
            r,
            s,
            a = t[e.hash],
            l = a.activePointersLists.length
          for (i = 0; i < l; i++)
            if ((o = a.activePointersLists[i]).getLength() > 0) {
              for (s = [], r = o.asArray(), n = 0; n < r.length; n++)
                s.push(r[n])
              for (n = 0; n < s.length; n++) ee(e, o, s[n])
            }
          for (i = 0; i < l; i++) a.activePointersLists.pop()
          a.sentDragEvent = !1
        }
        function u(i) {
          var n,
            o,
            r = t[i.hash]
          if (r.tracking) {
            for (o = 0; o < e.MouseTracker.subscribeEvents.length; o++)
              (n = e.MouseTracker.subscribeEvents[o]),
                e.removeEvent(i.element, n, r[n], !1)
            h(i), (r.tracking = !1)
          }
        }
        function d(e, i) {
          var n = t[e.hash]
          if ('pointerevent' === i)
            return {
              upName: 'pointerup',
              upHandler: n.pointerupcaptured,
              moveName: 'pointermove',
              moveHandler: n.pointermovecaptured,
            }
          if ('mouse' === i)
            return {
              upName: 'pointerup',
              upHandler: n.pointerupcaptured,
              moveName: 'pointermove',
              moveHandler: n.pointermovecaptured,
            }
          if ('touch' === i)
            return {
              upName: 'touchend',
              upHandler: n.touchendcaptured,
              moveName: 'touchmove',
              moveHandler: n.touchmovecaptured,
            }
          throw new Error(
            'MouseTracker.getCaptureEventParams: Unknown pointer type.'
          )
        }
        function p(t, i) {
          var n, o
          if (e.MouseTracker.havePointerCapture)
            if (e.MouseTracker.havePointerEvents) {
              if (
                !(o = t.getActivePointersListByType(i.type).getById(i.id)) ||
                !o.captured
              )
                return
              try {
                t.element.releasePointerCapture(i.id)
              } catch (e) {}
            } else t.element.releaseCapture()
          else
            (n = d(
              t,
              e.MouseTracker.havePointerEvents ? 'pointerevent' : i.type
            )),
              l &&
                c(window.top) &&
                e.removeEvent(window.top, n.upName, n.upHandler, !0),
              e.removeEvent(
                e.MouseTracker.captureElement,
                n.moveName,
                n.moveHandler,
                !0
              ),
              e.removeEvent(
                e.MouseTracker.captureElement,
                n.upName,
                n.upHandler,
                !0
              )
          ie(t, i, !1)
        }
        function g(t) {
          return e.MouseTracker.havePointerEvents
            ? t.pointerId
            : e.MouseTracker.mousePointerId
        }
        function m(t) {
          return e.MouseTracker.havePointerEvents
            ? t.pointerType ||
                (e.Browser.vendor === e.BROWSERS.IE ? 'mouse' : '')
            : 'mouse'
        }
        function v(t) {
          return !e.MouseTracker.havePointerEvents || t.isPrimary
        }
        function f(t) {
          return e.getMousePosition(t)
        }
        function y(e, t) {
          return w(f(e), t)
        }
        function w(t, i) {
          var n = e.getElementOffset(i)
          return t.minus(n)
        }
        function T(t, i) {
          return new e.Point((t.x + i.x) / 2, (t.y + i.y) / 2)
        }
        function x(t, i) {
          var n = {
            originalEvent: i,
            eventType: 'click',
            pointerType: 'mouse',
            isEmulated: !1,
          }
          te(t, n),
            n.preventDefault && !n.defaultPrevented && e.cancelEvent(i),
            n.stopPropagation && e.stopEvent(i)
        }
        function _(t, i) {
          var n = {
            originalEvent: i,
            eventType: 'dblclick',
            pointerType: 'mouse',
            isEmulated: !1,
          }
          te(t, n),
            n.preventDefault && !n.defaultPrevented && e.cancelEvent(i),
            n.stopPropagation && e.stopEvent(i)
        }
        function S(t, i) {
          var n = null,
            o = {
              originalEvent: i,
              eventType: 'keydown',
              pointerType: '',
              isEmulated: !1,
            }
          te(t, o),
            !t.keyDownHandler ||
              o.preventGesture ||
              o.defaultPrevented ||
              ((n = {
                eventSource: t,
                keyCode: i.keyCode ? i.keyCode : i.charCode,
                ctrl: i.ctrlKey,
                shift: i.shiftKey,
                alt: i.altKey,
                meta: i.metaKey,
                originalEvent: i,
                preventDefault: o.preventDefault || o.defaultPrevented,
                userData: t.userData,
              }),
              t.keyDownHandler(n)),
            ((n && n.preventDefault) ||
              (o.preventDefault && !o.defaultPrevented)) &&
              e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i)
        }
        function E(t, i) {
          var n = null,
            o = {
              originalEvent: i,
              eventType: 'keyup',
              pointerType: '',
              isEmulated: !1,
            }
          te(t, o),
            !t.keyUpHandler ||
              o.preventGesture ||
              o.defaultPrevented ||
              ((n = {
                eventSource: t,
                keyCode: i.keyCode ? i.keyCode : i.charCode,
                ctrl: i.ctrlKey,
                shift: i.shiftKey,
                alt: i.altKey,
                meta: i.metaKey,
                originalEvent: i,
                preventDefault: o.preventDefault || o.defaultPrevented,
                userData: t.userData,
              }),
              t.keyUpHandler(n)),
            ((n && n.preventDefault) ||
              (o.preventDefault && !o.defaultPrevented)) &&
              e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i)
        }
        function P(t, i) {
          var n = null,
            o = {
              originalEvent: i,
              eventType: 'keypress',
              pointerType: '',
              isEmulated: !1,
            }
          te(t, o),
            !t.keyHandler ||
              o.preventGesture ||
              o.defaultPrevented ||
              ((n = {
                eventSource: t,
                keyCode: i.keyCode ? i.keyCode : i.charCode,
                ctrl: i.ctrlKey,
                shift: i.shiftKey,
                alt: i.altKey,
                meta: i.metaKey,
                originalEvent: i,
                preventDefault: o.preventDefault || o.defaultPrevented,
                userData: t.userData,
              }),
              t.keyHandler(n)),
            ((n && n.preventDefault) ||
              (o.preventDefault && !o.defaultPrevented)) &&
              e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i)
        }
        function b(e, t) {
          var i = {
            originalEvent: t,
            eventType: 'focus',
            pointerType: '',
            isEmulated: !1,
          }
          te(e, i),
            e.focusHandler &&
              !i.preventGesture &&
              e.focusHandler({
                eventSource: e,
                originalEvent: t,
                userData: e.userData,
              })
        }
        function R(e, t) {
          var i = {
            originalEvent: t,
            eventType: 'blur',
            pointerType: '',
            isEmulated: !1,
          }
          te(e, i),
            e.blurHandler &&
              !i.preventGesture &&
              e.blurHandler({
                eventSource: e,
                originalEvent: t,
                userData: e.userData,
              })
        }
        function C(t, i) {
          var n = null,
            o = {
              originalEvent: i,
              eventType: 'contextmenu',
              pointerType: 'mouse',
              isEmulated: !1,
            }
          te(t, o),
            !t.contextMenuHandler ||
              o.preventGesture ||
              o.defaultPrevented ||
              ((n = {
                eventSource: t,
                position: w(f(i), t.element),
                originalEvent: o.originalEvent,
                preventDefault: o.preventDefault || o.defaultPrevented,
                userData: t.userData,
              }),
              t.contextMenuHandler(n)),
            ((n && n.preventDefault) ||
              (o.preventDefault && !o.defaultPrevented)) &&
              e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i)
        }
        function k(e, t) {
          I(e, t, t)
        }
        function O(t, i) {
          var n = {
            target: i.target || i.srcElement,
            type: 'wheel',
            shiftKey: i.shiftKey || !1,
            clientX: i.clientX,
            clientY: i.clientY,
            pageX: i.pageX ? i.pageX : i.clientX,
            pageY: i.pageY ? i.pageY : i.clientY,
            deltaMode: 'MozMousePixelScroll' === i.type ? 0 : 1,
            deltaX: 0,
            deltaZ: 0,
          }
          'mousewheel' === e.MouseTracker.wheelEventName
            ? (n.deltaY = -i.wheelDelta / e.DEFAULT_SETTINGS.pixelsPerWheelLine)
            : (n.deltaY = i.detail),
            I(t, n, i)
        }
        function I(t, i, n) {
          var o,
            r,
            s = null
          ;(o = i.deltaY < 0 ? 1 : -1),
            te(
              t,
              (r = {
                originalEvent: i,
                eventType: 'wheel',
                pointerType: 'mouse',
                isEmulated: i !== n,
              })
            ),
            !t.scrollHandler ||
              r.preventGesture ||
              r.defaultPrevented ||
              ((s = {
                eventSource: t,
                pointerType: 'mouse',
                position: y(i, t.element),
                scroll: o,
                shift: i.shiftKey,
                isTouchEvent: !1,
                originalEvent: n,
                preventDefault: r.preventDefault || r.defaultPrevented,
                userData: t.userData,
              }),
              t.scrollHandler(s)),
            r.stopPropagation && e.stopEvent(n),
            ((s && s.preventDefault) ||
              (r.preventDefault && !r.defaultPrevented)) &&
              e.cancelEvent(n)
        }
        function D(t, i) {
          var n = { id: e.MouseTracker.mousePointerId, type: 'mouse' },
            o = {
              originalEvent: i,
              eventType: 'lostpointercapture',
              pointerType: 'mouse',
              isEmulated: !1,
            }
          te(t, o),
            i.target === t.element && ie(t, n, !1),
            o.stopPropagation && e.stopEvent(i)
        }
        function B(t, i) {
          var n,
            o,
            r,
            s = i.changedTouches.length,
            a = t.getActivePointersListByType('touch')
          ;(n = e.now()),
            a.getLength() > i.touches.length - s &&
              e.console.warn(
                "Tracked touch contact count doesn't match event.touches.length"
              )
          var l = {
            originalEvent: i,
            eventType: 'pointerdown',
            pointerType: 'touch',
            isEmulated: !1,
          }
          for (te(t, l), o = 0; o < s; o++)
            ne(
              t,
              l,
              (r = {
                id: i.changedTouches[o].identifier,
                type: 'touch',
                isPrimary: 0 === a.getLength(),
                currentPos: f(i.changedTouches[o]),
                currentTime: n,
              })
            ),
              re(t, l, r, 0),
              ie(t, r, !0)
          l.preventDefault && !l.defaultPrevented && e.cancelEvent(i),
            l.stopPropagation && e.stopEvent(i)
        }
        function L(t, i) {
          var n,
            o,
            r,
            s = i.changedTouches.length
          n = e.now()
          var a = {
            originalEvent: i,
            eventType: 'pointerup',
            pointerType: 'touch',
            isEmulated: !1,
          }
          for (te(t, a), o = 0; o < s; o++)
            se(
              t,
              a,
              (r = {
                id: i.changedTouches[o].identifier,
                type: 'touch',
                currentPos: f(i.changedTouches[o]),
                currentTime: n,
              }),
              0
            ),
              ie(t, r, !1),
              oe(t, a, r)
          a.preventDefault && !a.defaultPrevented && e.cancelEvent(i),
            a.stopPropagation && e.stopEvent(i)
        }
        function H(t, i) {
          var n,
            o,
            r = i.changedTouches.length
          n = e.now()
          var s = {
            originalEvent: i,
            eventType: 'pointermove',
            pointerType: 'touch',
            isEmulated: !1,
          }
          for (te(t, s), o = 0; o < r; o++)
            ae(t, s, {
              id: i.changedTouches[o].identifier,
              type: 'touch',
              currentPos: f(i.changedTouches[o]),
              currentTime: n,
            })
          s.preventDefault && !s.defaultPrevented && e.cancelEvent(i),
            s.stopPropagation && e.stopEvent(i)
        }
        function z(t, i) {
          var n,
            o = i.changedTouches.length,
            r = {
              originalEvent: i,
              eventType: 'pointercancel',
              pointerType: 'touch',
              isEmulated: !1,
            }
          for (te(t, r), n = 0; n < o; n++)
            le(t, r, { id: i.changedTouches[n].identifier, type: 'touch' })
          r.stopPropagation && e.stopEvent(i)
        }
        function M(t, i) {
          return e.eventIsCanceled(i) || i.preventDefault(), !1
        }
        function F(t, i) {
          return e.eventIsCanceled(i) || i.preventDefault(), !1
        }
        function N(t, i) {
          var n = {
            originalEvent: i,
            eventType: 'gotpointercapture',
            pointerType: m(i),
            isEmulated: !1,
          }
          te(t, n),
            i.target === t.element &&
              ie(t, { id: i.pointerId, type: m(i) }, !0),
            n.stopPropagation && e.stopEvent(i)
        }
        function A(t, i) {
          var n = {
            originalEvent: i,
            eventType: 'lostpointercapture',
            pointerType: m(i),
            isEmulated: !1,
          }
          te(t, n),
            i.target === t.element &&
              ie(t, { id: i.pointerId, type: m(i) }, !1),
            n.stopPropagation && e.stopEvent(i)
        }
        function $(t, i) {
          var n = {
              id: g(i),
              type: m(i),
              isPrimary: v(i),
              currentPos: f(i),
              currentTime: e.now(),
            },
            o = {
              originalEvent: i,
              eventType: 'pointerenter',
              pointerType: n.type,
              isEmulated: !1,
            }
          te(t, o), ne(t, o, n)
        }
        function j(t, i) {
          var n = {
              id: g(i),
              type: m(i),
              isPrimary: v(i),
              currentPos: f(i),
              currentTime: e.now(),
            },
            o = {
              originalEvent: i,
              eventType: 'pointerleave',
              pointerType: n.type,
              isEmulated: !1,
            }
          te(t, o), oe(t, o, n)
        }
        function U(t, i) {
          var n = {
              id: g(i),
              type: m(i),
              isPrimary: v(i),
              currentPos: f(i),
              currentTime: e.now(),
            },
            o = {
              originalEvent: i,
              eventType: 'pointerover',
              pointerType: n.type,
              isEmulated: !1,
            }
          te(t, o),
            (function (e, t, i) {
              var n, o
              ;(n = e.getActivePointersListByType(i.type)),
                (o = n.getById(i.id))
                  ? (i = o)
                  : ((i.captured = !1), (i.insideElementPressed = !1))
              e.overHandler &&
                e.overHandler({
                  eventSource: e,
                  pointerType: i.type,
                  position: w(i.currentPos, e.element),
                  buttons: n.buttons,
                  pointers: e.getActivePointerCount(),
                  insideElementPressed: i.insideElementPressed,
                  buttonDownAny: 0 !== n.buttons,
                  isTouchEvent: 'touch' === i.type,
                  originalEvent: t.originalEvent,
                  userData: e.userData,
                })
            })(t, o, n),
            o.preventDefault && !o.defaultPrevented && e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i)
        }
        function W(t, i) {
          var n = {
              id: g(i),
              type: m(i),
              isPrimary: v(i),
              currentPos: f(i),
              currentTime: e.now(),
            },
            o = {
              originalEvent: i,
              eventType: 'pointerout',
              pointerType: n.type,
              isEmulated: !1,
            }
          te(t, o),
            (function (e, t, i) {
              var n, o
              ;(n = e.getActivePointersListByType(i.type)),
                (o = n.getById(i.id))
                  ? (i = o)
                  : ((i.captured = !1), (i.insideElementPressed = !1))
              e.outHandler &&
                e.outHandler({
                  eventSource: e,
                  pointerType: i.type,
                  position: i.currentPos && w(i.currentPos, e.element),
                  buttons: n.buttons,
                  pointers: e.getActivePointerCount(),
                  insideElementPressed: i.insideElementPressed,
                  buttonDownAny: 0 !== n.buttons,
                  isTouchEvent: 'touch' === i.type,
                  originalEvent: t.originalEvent,
                  userData: e.userData,
                })
            })(t, o, n),
            o.preventDefault && !o.defaultPrevented && e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i)
        }
        function V(t, i) {
          var n = {
              id: g(i),
              type: m(i),
              isPrimary: v(i),
              currentPos: f(i),
              currentTime: e.now(),
            },
            o =
              e.MouseTracker.havePointerEvents &&
              'touch' === n.type &&
              e.Browser.vendor !== e.BROWSERS.IE,
            r = {
              originalEvent: i,
              eventType: 'pointerdown',
              pointerType: n.type,
              isEmulated: !1,
            }
          te(t, r),
            re(t, r, n, i.button),
            r.preventDefault && !r.defaultPrevented && e.cancelEvent(i),
            r.stopPropagation && e.stopEvent(i),
            r.shouldCapture &&
              (o
                ? ie(t, n, !0)
                : (function (t, i) {
                    var n
                    if (e.MouseTracker.havePointerCapture)
                      if (e.MouseTracker.havePointerEvents)
                        try {
                          t.element.setPointerCapture(i.id)
                        } catch (t) {
                          return void e.console.warn(
                            'setPointerCapture() called on invalid pointer ID'
                          )
                        }
                      else t.element.setCapture(!0)
                    else
                      (n = d(
                        t,
                        e.MouseTracker.havePointerEvents
                          ? 'pointerevent'
                          : i.type
                      )),
                        l &&
                          c(window.top) &&
                          e.addEvent(window.top, n.upName, n.upHandler, !0),
                        e.addEvent(
                          e.MouseTracker.captureElement,
                          n.upName,
                          n.upHandler,
                          !0
                        ),
                        e.addEvent(
                          e.MouseTracker.captureElement,
                          n.moveName,
                          n.moveHandler,
                          !0
                        )
                    ie(t, i, !0)
                  })(t, n))
        }
        function G(e, t) {
          Z(e, t)
        }
        function q(t, i) {
          t.getActivePointersListByType(m(i)).getById(i.pointerId) && Z(t, i),
            e.stopEvent(i)
        }
        function Z(t, i) {
          var n,
            o = {
              originalEvent: i,
              eventType: 'pointerup',
              pointerType: (n = {
                id: g(i),
                type: m(i),
                isPrimary: v(i),
                currentPos: f(i),
                currentTime: e.now(),
              }).type,
              isEmulated: !1,
            }
          te(t, o),
            se(t, o, n, i.button),
            o.preventDefault && !o.defaultPrevented && e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i),
            o.shouldReleaseCapture &&
              (i.target === t.element ? p(t, n) : ie(t, n, !1))
        }
        function X(e, t) {
          Y(e, t)
        }
        function K(t, i) {
          t.getActivePointersListByType(m(i)).getById(i.pointerId) && Y(t, i),
            e.stopEvent(i)
        }
        function Y(t, i) {
          var n = {
              id: g(i),
              type: m(i),
              isPrimary: v(i),
              currentPos: f(i),
              currentTime: e.now(),
            },
            o = {
              originalEvent: i,
              eventType: 'pointermove',
              pointerType: n.type,
              isEmulated: !1,
            }
          te(t, o),
            ae(t, o, n),
            o.preventDefault && !o.defaultPrevented && e.cancelEvent(i),
            o.stopPropagation && e.stopEvent(i)
        }
        function Q(t, i) {
          var n = { id: i.pointerId, type: m(i) },
            o = {
              originalEvent: i,
              eventType: 'pointercancel',
              pointerType: n.type,
              isEmulated: !1,
            }
          te(t, o), le(t, o, n), o.stopPropagation && e.stopEvent(i)
        }
        function J(e, t) {
          return (
            (t.speed = 0),
            (t.direction = 0),
            (t.contactPos = t.currentPos),
            (t.contactTime = t.currentTime),
            (t.lastPos = t.currentPos),
            (t.lastTime = t.currentTime),
            e.add(t)
          )
        }
        function ee(t, i, n) {
          var o,
            r = i.getById(n.id)
          return (
            r
              ? (r.captured &&
                  (e.console.warn(
                    'stopTrackingPointer() called on captured pointer'
                  ),
                  p(t, r)),
                i.removeContact(),
                (o = i.removeById(n.id)))
              : (o = i.getLength()),
            o
          )
        }
        function te(t, i) {
          ;(i.eventSource = t),
            (i.eventPhase =
              i.originalEvent && void 0 !== i.originalEvent.eventPhase
                ? i.originalEvent.eventPhase
                : 0),
            (i.defaultPrevented = e.eventIsCanceled(i.originalEvent)),
            (i.shouldCapture = !1),
            (i.shouldReleaseCapture = !1),
            (i.userData = t.userData),
            (function (e, t) {
              switch (t.eventType) {
                case 'pointermove':
                  ;(t.isStoppable = !0),
                    (t.isCancelable = !0),
                    (t.preventDefault = !1),
                    (t.preventGesture = !e.hasGestureHandlers),
                    (t.stopPropagation = !1)
                  break
                case 'pointerover':
                case 'pointerout':
                case 'contextmenu':
                case 'keydown':
                case 'keyup':
                case 'keypress':
                  ;(t.isStoppable = !0),
                    (t.isCancelable = !0),
                    (t.preventDefault = !1),
                    (t.preventGesture = !1),
                    (t.stopPropagation = !1)
                  break
                case 'pointerdown':
                case 'pointerup':
                  ;(t.isStoppable = !0),
                    (t.isCancelable = !0),
                    (t.preventDefault = !1),
                    (t.preventGesture = !e.hasGestureHandlers),
                    (t.stopPropagation = !1)
                  break
                case 'wheel':
                  ;(t.isStoppable = !0),
                    (t.isCancelable = !0),
                    (t.preventDefault = !1),
                    (t.preventGesture = !e.hasScrollHandler),
                    (t.stopPropagation = !1)
                  break
                case 'gotpointercapture':
                case 'lostpointercapture':
                case 'pointercancel':
                  ;(t.isStoppable = !0),
                    (t.isCancelable = !1),
                    (t.preventDefault = !1),
                    (t.preventGesture = !1),
                    (t.stopPropagation = !1)
                  break
                case 'click':
                  ;(t.isStoppable = !0),
                    (t.isCancelable = !0),
                    (t.preventDefault = !!e.clickHandler),
                    (t.preventGesture = !1),
                    (t.stopPropagation = !1)
                  break
                case 'dblclick':
                  ;(t.isStoppable = !0),
                    (t.isCancelable = !0),
                    (t.preventDefault = !!e.dblClickHandler),
                    (t.preventGesture = !1),
                    (t.stopPropagation = !1)
                  break
                case 'focus':
                case 'blur':
                case 'pointerenter':
                case 'pointerleave':
                default:
                  ;(t.isStoppable = !1),
                    (t.isCancelable = !1),
                    (t.preventDefault = !1),
                    (t.preventGesture = !1),
                    (t.stopPropagation = !1)
              }
            })(t, i),
            t.preProcessEventHandler && t.preProcessEventHandler(i)
        }
        function ie(t, i, n) {
          var o = t.getActivePointersListByType(i.type),
            r = o.getById(i.id)
          r
            ? n && !r.captured
              ? ((r.captured = !0), o.captureCount++)
              : !n &&
                r.captured &&
                ((r.captured = !1),
                o.captureCount--,
                o.captureCount < 0 &&
                  ((o.captureCount = 0),
                  e.console.warn(
                    'updatePointerCaptured() - pointsList.captureCount went negative'
                  )))
            : e.console.warn(
                'updatePointerCaptured() called on untracked pointer'
              )
        }
        function ne(e, t, i) {
          var n,
            o = e.getActivePointersListByType(i.type)
          ;(n = o.getById(i.id))
            ? ((n.insideElement = !0),
              (n.lastPos = n.currentPos),
              (n.lastTime = n.currentTime),
              (n.currentPos = i.currentPos),
              (n.currentTime = i.currentTime),
              (i = n))
            : ((i.captured = !1),
              (i.insideElementPressed = !1),
              (i.insideElement = !0),
              J(o, i)),
            e.enterHandler &&
              e.enterHandler({
                eventSource: e,
                pointerType: i.type,
                position: w(i.currentPos, e.element),
                buttons: o.buttons,
                pointers: e.getActivePointerCount(),
                insideElementPressed: i.insideElementPressed,
                buttonDownAny: 0 !== o.buttons,
                isTouchEvent: 'touch' === i.type,
                originalEvent: t.originalEvent,
                userData: e.userData,
              })
        }
        function oe(e, t, i) {
          var n,
            o,
            r = e.getActivePointersListByType(i.type)
          ;(n = r.getById(i.id))
            ? (n.captured
                ? ((n.insideElement = !1),
                  (n.lastPos = n.currentPos),
                  (n.lastTime = n.currentTime),
                  (n.currentPos = i.currentPos),
                  (n.currentTime = i.currentTime))
                : ee(e, r, n),
              (i = n))
            : ((i.captured = !1), (i.insideElementPressed = !1)),
            (e.leaveHandler || e.exitHandler) &&
              ((o = {
                eventSource: e,
                pointerType: i.type,
                position: i.currentPos && w(i.currentPos, e.element),
                buttons: r.buttons,
                pointers: e.getActivePointerCount(),
                insideElementPressed: i.insideElementPressed,
                buttonDownAny: 0 !== r.buttons,
                isTouchEvent: 'touch' === i.type,
                originalEvent: t.originalEvent,
                userData: e.userData,
              }),
              e.leaveHandler && e.leaveHandler(o),
              e.exitHandler && e.exitHandler(o))
        }
        function re(i, n, o, r) {
          var s,
            a = t[i.hash],
            l = i.getActivePointersListByType(o.type)
          if (
            (void 0 !== n.originalEvent.buttons
              ? (l.buttons = n.originalEvent.buttons)
              : 0 === r
              ? (l.buttons |= 1)
              : 1 === r
              ? (l.buttons |= 4)
              : 2 === r
              ? (l.buttons |= 2)
              : 3 === r
              ? (l.buttons |= 8)
              : 4 === r
              ? (l.buttons |= 16)
              : 5 === r && (l.buttons |= 32),
            0 !== r)
          )
            return (
              (n.shouldCapture = !1),
              (n.shouldReleaseCapture = !1),
              void (
                !i.nonPrimaryPressHandler ||
                n.preventGesture ||
                n.defaultPrevented ||
                ((n.preventDefault = !0),
                i.nonPrimaryPressHandler({
                  eventSource: i,
                  pointerType: o.type,
                  position: w(o.currentPos, i.element),
                  button: r,
                  buttons: l.buttons,
                  isTouchEvent: 'touch' === o.type,
                  originalEvent: n.originalEvent,
                  userData: i.userData,
                }))
              )
            )
          ;(s = l.getById(o.id))
            ? ((s.insideElementPressed = !0),
              (s.insideElement = !0),
              (s.originalTarget = n.originalEvent.target),
              (s.contactPos = o.currentPos),
              (s.contactTime = o.currentTime),
              (s.lastPos = s.currentPos),
              (s.lastTime = s.currentTime),
              (s.currentPos = o.currentPos),
              (s.currentTime = o.currentTime),
              (o = s))
            : ((o.captured = !1),
              (o.insideElementPressed = !0),
              (o.insideElement = !0),
              (o.originalTarget = n.originalEvent.target),
              J(l, o)),
            l.addContact(),
            n.preventGesture || n.defaultPrevented
              ? ((n.shouldCapture = !1), (n.shouldReleaseCapture = !1))
              : ((n.shouldCapture = !0),
                (n.shouldReleaseCapture = !1),
                (n.preventDefault = !0),
                (i.dragHandler || i.dragEndHandler || i.pinchHandler) &&
                  e.MouseTracker.gesturePointVelocityTracker.addPoint(i, o),
                1 === l.contacts
                  ? i.pressHandler &&
                    !n.preventGesture &&
                    i.pressHandler({
                      eventSource: i,
                      pointerType: o.type,
                      position: w(o.contactPos, i.element),
                      buttons: l.buttons,
                      isTouchEvent: 'touch' === o.type,
                      originalEvent: n.originalEvent,
                      userData: i.userData,
                    })
                  : 2 === l.contacts &&
                    i.pinchHandler &&
                    'touch' === o.type &&
                    ((a.pinchGPoints = l.asArray()),
                    (a.lastPinchDist = a.currentPinchDist = a.pinchGPoints[0].currentPos.distanceTo(
                      a.pinchGPoints[1].currentPos
                    )),
                    (a.lastPinchCenter = a.currentPinchCenter = T(
                      a.pinchGPoints[0].currentPos,
                      a.pinchGPoints[1].currentPos
                    ))))
        }
        function se(i, n, o, r) {
          var s,
            a,
            l,
            c,
            h = t[i.hash],
            u = i.getActivePointersListByType(o.type),
            d = !1
          if (
            (void 0 !== n.originalEvent.buttons
              ? (u.buttons = n.originalEvent.buttons)
              : 0 === r
              ? (u.buttons ^= -2)
              : 1 === r
              ? (u.buttons ^= -5)
              : 2 === r
              ? (u.buttons ^= -3)
              : 3 === r
              ? (u.buttons ^= -9)
              : 4 === r
              ? (u.buttons ^= -17)
              : 5 === r && (u.buttons ^= -33),
            (n.shouldCapture = !1),
            0 !== r)
          )
            return (
              (n.shouldReleaseCapture = !1),
              void (
                !i.nonPrimaryReleaseHandler ||
                n.preventGesture ||
                n.defaultPrevented ||
                ((n.preventDefault = !0),
                i.nonPrimaryReleaseHandler({
                  eventSource: i,
                  pointerType: o.type,
                  position: w(o.currentPos, i.element),
                  button: r,
                  buttons: u.buttons,
                  isTouchEvent: 'touch' === o.type,
                  originalEvent: n.originalEvent,
                  userData: i.userData,
                }))
              )
            )
          ;(l = u.getById(o.id))
            ? (u.removeContact(),
              l.captured && (d = !0),
              (l.lastPos = l.currentPos),
              (l.lastTime = l.currentTime),
              (l.currentPos = o.currentPos),
              (l.currentTime = o.currentTime),
              l.insideElement || ee(i, u, l),
              (s = l.currentPos),
              (a = l.currentTime))
            : ((o.captured = !1),
              (o.insideElementPressed = !1),
              (o.insideElement = !0),
              J(u, o),
              (l = o)),
            n.preventGesture ||
              n.defaultPrevented ||
              (d
                ? ((n.shouldReleaseCapture = !0),
                  (n.preventDefault = !0),
                  (i.dragHandler || i.dragEndHandler || i.pinchHandler) &&
                    e.MouseTracker.gesturePointVelocityTracker.removePoint(
                      i,
                      l
                    ),
                  0 === u.contacts
                    ? (i.releaseHandler &&
                        s &&
                        i.releaseHandler({
                          eventSource: i,
                          pointerType: l.type,
                          position: w(s, i.element),
                          buttons: u.buttons,
                          insideElementPressed: l.insideElementPressed,
                          insideElementReleased: l.insideElement,
                          isTouchEvent: 'touch' === l.type,
                          originalEvent: n.originalEvent,
                          userData: i.userData,
                        }),
                      i.dragEndHandler &&
                        h.sentDragEvent &&
                        i.dragEndHandler({
                          eventSource: i,
                          pointerType: l.type,
                          position: w(l.currentPos, i.element),
                          speed: l.speed,
                          direction: l.direction,
                          shift: n.originalEvent.shiftKey,
                          isTouchEvent: 'touch' === l.type,
                          originalEvent: n.originalEvent,
                          userData: i.userData,
                        }),
                      (h.sentDragEvent = !1),
                      (i.clickHandler || i.dblClickHandler) &&
                        l.insideElement &&
                        ((c =
                          a - l.contactTime <= i.clickTimeThreshold &&
                          l.contactPos.distanceTo(s) <= i.clickDistThreshold),
                        i.clickHandler &&
                          i.clickHandler({
                            eventSource: i,
                            pointerType: l.type,
                            position: w(l.currentPos, i.element),
                            quick: c,
                            shift: n.originalEvent.shiftKey,
                            isTouchEvent: 'touch' === l.type,
                            originalEvent: n.originalEvent,
                            originalTarget: l.originalTarget,
                            userData: i.userData,
                          }),
                        i.dblClickHandler &&
                          c &&
                          (u.clicks++,
                          1 === u.clicks
                            ? ((h.lastClickPos = s),
                              (h.dblClickTimeOut = setTimeout(function () {
                                u.clicks = 0
                              }, i.dblClickTimeThreshold)))
                            : 2 === u.clicks &&
                              (clearTimeout(h.dblClickTimeOut),
                              (u.clicks = 0),
                              h.lastClickPos.distanceTo(s) <=
                                i.dblClickDistThreshold &&
                                i.dblClickHandler({
                                  eventSource: i,
                                  pointerType: l.type,
                                  position: w(l.currentPos, i.element),
                                  shift: n.originalEvent.shiftKey,
                                  isTouchEvent: 'touch' === l.type,
                                  originalEvent: n.originalEvent,
                                  userData: i.userData,
                                }),
                              (h.lastClickPos = null)))))
                    : 2 === u.contacts &&
                      i.pinchHandler &&
                      'touch' === l.type &&
                      ((h.pinchGPoints = u.asArray()),
                      (h.lastPinchDist = h.currentPinchDist = h.pinchGPoints[0].currentPos.distanceTo(
                        h.pinchGPoints[1].currentPos
                      )),
                      (h.lastPinchCenter = h.currentPinchCenter = T(
                        h.pinchGPoints[0].currentPos,
                        h.pinchGPoints[1].currentPos
                      ))))
                : ((n.shouldReleaseCapture = !1),
                  i.releaseHandler &&
                    s &&
                    (i.releaseHandler({
                      eventSource: i,
                      pointerType: l.type,
                      position: w(s, i.element),
                      buttons: u.buttons,
                      insideElementPressed: l.insideElementPressed,
                      insideElementReleased: l.insideElement,
                      isTouchEvent: 'touch' === l.type,
                      originalEvent: n.originalEvent,
                      userData: i.userData,
                    }),
                    (n.preventDefault = !0))))
        }
        function ae(e, i, n) {
          var o,
            r,
            s,
            a = t[e.hash],
            l = e.getActivePointersListByType(n.type)
          void 0 !== i.originalEvent.buttons &&
            (l.buttons = i.originalEvent.buttons),
            (o = l.getById(n.id)) &&
              ((o.lastPos = o.currentPos),
              (o.lastTime = o.currentTime),
              (o.currentPos = n.currentPos),
              (o.currentTime = n.currentTime),
              (i.shouldCapture = !1),
              (i.shouldReleaseCapture = !1),
              e.stopHandler &&
                'mouse' === n.type &&
                (clearTimeout(e.stopTimeOut),
                (e.stopTimeOut = setTimeout(function () {
                  !(function (e, t, i) {
                    e.stopHandler &&
                      e.stopHandler({
                        eventSource: e,
                        pointerType: i,
                        position: y(t, e.element),
                        buttons: e.getActivePointersListByType(i).buttons,
                        isTouchEvent: 'touch' === i,
                        originalEvent: t,
                        userData: e.userData,
                      })
                  })(e, i.originalEvent, n.type)
                }, e.stopDelay))),
              0 === l.contacts
                ? e.moveHandler &&
                  e.moveHandler({
                    eventSource: e,
                    pointerType: n.type,
                    position: w(n.currentPos, e.element),
                    buttons: l.buttons,
                    isTouchEvent: 'touch' === n.type,
                    originalEvent: i.originalEvent,
                    userData: e.userData,
                  })
                : 1 === l.contacts
                ? (e.moveHandler &&
                    ((o = l.asArray()[0]),
                    e.moveHandler({
                      eventSource: e,
                      pointerType: o.type,
                      position: w(o.currentPos, e.element),
                      buttons: l.buttons,
                      isTouchEvent: 'touch' === o.type,
                      originalEvent: i.originalEvent,
                      userData: e.userData,
                    })),
                  !e.dragHandler ||
                    i.preventGesture ||
                    i.defaultPrevented ||
                    ((s = (o = l.asArray()[0]).currentPos.minus(o.lastPos)),
                    e.dragHandler({
                      eventSource: e,
                      pointerType: o.type,
                      position: w(o.currentPos, e.element),
                      buttons: l.buttons,
                      delta: s,
                      speed: o.speed,
                      direction: o.direction,
                      shift: i.originalEvent.shiftKey,
                      isTouchEvent: 'touch' === o.type,
                      originalEvent: i.originalEvent,
                      userData: e.userData,
                    }),
                    (i.preventDefault = !0),
                    (a.sentDragEvent = !0)))
                : 2 === l.contacts &&
                  (e.moveHandler &&
                    ((r = l.asArray()),
                    e.moveHandler({
                      eventSource: e,
                      pointerType: r[0].type,
                      position: w(
                        T(r[0].currentPos, r[1].currentPos),
                        e.element
                      ),
                      buttons: l.buttons,
                      isTouchEvent: 'touch' === r[0].type,
                      originalEvent: i.originalEvent,
                      userData: e.userData,
                    })),
                  !e.pinchHandler ||
                    'touch' !== n.type ||
                    i.preventGesture ||
                    i.defaultPrevented ||
                    ((s = a.pinchGPoints[0].currentPos.distanceTo(
                      a.pinchGPoints[1].currentPos
                    )) !== a.currentPinchDist &&
                      ((a.lastPinchDist = a.currentPinchDist),
                      (a.currentPinchDist = s),
                      (a.lastPinchCenter = a.currentPinchCenter),
                      (a.currentPinchCenter = T(
                        a.pinchGPoints[0].currentPos,
                        a.pinchGPoints[1].currentPos
                      )),
                      e.pinchHandler({
                        eventSource: e,
                        pointerType: 'touch',
                        gesturePoints: a.pinchGPoints,
                        lastCenter: w(a.lastPinchCenter, e.element),
                        center: w(a.currentPinchCenter, e.element),
                        lastDistance: a.lastPinchDist,
                        distance: a.currentPinchDist,
                        shift: i.originalEvent.shiftKey,
                        originalEvent: i.originalEvent,
                        userData: e.userData,
                      }),
                      (i.preventDefault = !0)))))
        }
        function le(e, t, i) {
          var n,
            o = e.getActivePointersListByType(i.type)
          ;(n = o.getById(i.id)) && ee(e, o, n)
        }
        ;(e.MouseTracker.gesturePointVelocityTracker =
          ((i = []),
          (n = 0),
          (o = 0),
          (r = function (e, t) {
            return e.hash.toString() + t.type + t.id.toString()
          }),
          (s = function () {
            var t,
              n,
              r,
              s,
              a,
              l,
              c = i.length,
              h = e.now()
            for (s = h - o, o = h, t = 0; t < c; t++)
              ((r = (n = i[t]).gPoint).direction = Math.atan2(
                r.currentPos.y - n.lastPos.y,
                r.currentPos.x - n.lastPos.x
              )),
                (a = n.lastPos.distanceTo(r.currentPos)),
                (n.lastPos = r.currentPos),
                (l = (1e3 * a) / (s + 1)),
                (r.speed = 0.75 * l + 0.25 * r.speed)
          }),
          {
            addPoint: function (t, a) {
              var l = r(t, a)
              i.push({ guid: l, gPoint: a, lastPos: a.currentPos }),
                1 === i.length &&
                  ((o = e.now()), (n = window.setInterval(s, 50)))
            },
            removePoint: function (e, t) {
              var o,
                s = r(e, t),
                a = i.length
              for (o = 0; o < a; o++)
                if (i[o].guid === s) {
                  i.splice(o, 1), 0 == --a && window.clearInterval(n)
                  break
                }
            },
          })),
          (e.MouseTracker.captureElement = document),
          (e.MouseTracker.wheelEventName =
            (e.Browser.vendor === e.BROWSERS.IE && e.Browser.version > 8) ||
            'onwheel' in document.createElement('div')
              ? 'wheel'
              : void 0 !== document.onmousewheel
              ? 'mousewheel'
              : 'DOMMouseScroll'),
          (e.MouseTracker.subscribeEvents = [
            'click',
            'dblclick',
            'keydown',
            'keyup',
            'keypress',
            'focus',
            'blur',
            'contextmenu',
            e.MouseTracker.wheelEventName,
          ]),
          'DOMMouseScroll' === e.MouseTracker.wheelEventName &&
            e.MouseTracker.subscribeEvents.push('MozMousePixelScroll'),
          window.PointerEvent
            ? ((e.MouseTracker.havePointerEvents = !0),
              e.MouseTracker.subscribeEvents.push(
                'pointerenter',
                'pointerleave',
                'pointerover',
                'pointerout',
                'pointerdown',
                'pointerup',
                'pointermove',
                'pointercancel'
              ),
              (e.MouseTracker.havePointerCapture =
                ((a = document.createElement('div')),
                e.isFunction(a.setPointerCapture) &&
                  e.isFunction(a.releasePointerCapture))),
              e.MouseTracker.havePointerCapture &&
                e.MouseTracker.subscribeEvents.push(
                  'gotpointercapture',
                  'lostpointercapture'
                ))
            : ((e.MouseTracker.havePointerEvents = !1),
              e.MouseTracker.subscribeEvents.push(
                'mouseenter',
                'mouseleave',
                'mouseover',
                'mouseout',
                'mousedown',
                'mouseup',
                'mousemove'
              ),
              (e.MouseTracker.mousePointerId = 'legacy-mouse'),
              (e.MouseTracker.havePointerCapture = (function () {
                var t = document.createElement('div')
                return (
                  e.isFunction(t.setCapture) && e.isFunction(t.releaseCapture)
                )
              })()),
              e.MouseTracker.havePointerCapture &&
                e.MouseTracker.subscribeEvents.push('losecapture'),
              'ontouchstart' in window &&
                e.MouseTracker.subscribeEvents.push(
                  'touchstart',
                  'touchend',
                  'touchmove',
                  'touchcancel'
                ),
              'ongesturestart' in window &&
                e.MouseTracker.subscribeEvents.push(
                  'gesturestart',
                  'gesturechange'
                )),
          (e.MouseTracker.GesturePointList = function (e) {
            ;(this._gPoints = []),
              (this.type = e),
              (this.buttons = 0),
              (this.contacts = 0),
              (this.clicks = 0),
              (this.captureCount = 0)
          }),
          (e.MouseTracker.GesturePointList.prototype = {
            getLength: function () {
              return this._gPoints.length
            },
            asArray: function () {
              return this._gPoints
            },
            add: function (e) {
              return this._gPoints.push(e)
            },
            removeById: function (e) {
              var t,
                i = this._gPoints.length
              for (t = 0; t < i; t++)
                if (this._gPoints[t].id === e) {
                  this._gPoints.splice(t, 1)
                  break
                }
              return this._gPoints.length
            },
            getByIndex: function (e) {
              return e < this._gPoints.length ? this._gPoints[e] : null
            },
            getById: function (e) {
              var t,
                i = this._gPoints.length
              for (t = 0; t < i; t++)
                if (this._gPoints[t].id === e) return this._gPoints[t]
              return null
            },
            getPrimary: function (e) {
              var t,
                i = this._gPoints.length
              for (t = 0; t < i; t++)
                if (this._gPoints[t].isPrimary) return this._gPoints[t]
              return null
            },
            addContact: function () {
              ++this.contacts,
                this.contacts > 1 &&
                  ('mouse' === this.type || 'pen' === this.type) &&
                  (e.console.warn(
                    'GesturePointList.addContact() Implausible contacts value'
                  ),
                  (this.contacts = 1))
            },
            removeContact: function () {
              --this.contacts, this.contacts < 0 && (this.contacts = 0)
            },
          })
      })(t),
      (function (e) {
        ;(e.ControlAnchor = {
          NONE: 0,
          TOP_LEFT: 1,
          TOP_RIGHT: 2,
          BOTTOM_RIGHT: 3,
          BOTTOM_LEFT: 4,
          ABSOLUTE: 5,
        }),
          (e.Control = function (t, i, n) {
            var o = t.parentNode
            'number' == typeof i &&
              (e.console.error(
                'Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; please use an options object instead.  Support for this deprecated variant is scheduled for removal in December 2013'
              ),
              (i = { anchor: i })),
              (i.attachToViewer =
                void 0 === i.attachToViewer || i.attachToViewer),
              (this.autoFade = void 0 === i.autoFade || i.autoFade),
              (this.element = t),
              (this.anchor = i.anchor),
              (this.container = n),
              this.anchor === e.ControlAnchor.ABSOLUTE
                ? ((this.wrapper = e.makeNeutralElement('div')),
                  (this.wrapper.style.position = 'absolute'),
                  (this.wrapper.style.top =
                    'number' == typeof i.top ? i.top + 'px' : i.top),
                  (this.wrapper.style.left =
                    'number' == typeof i.left ? i.left + 'px' : i.left),
                  (this.wrapper.style.height =
                    'number' == typeof i.height ? i.height + 'px' : i.height),
                  (this.wrapper.style.width =
                    'number' == typeof i.width ? i.width + 'px' : i.width),
                  (this.wrapper.style.margin = '0px'),
                  (this.wrapper.style.padding = '0px'),
                  (this.element.style.position = 'relative'),
                  (this.element.style.top = '0px'),
                  (this.element.style.left = '0px'),
                  (this.element.style.height = '100%'),
                  (this.element.style.width = '100%'))
                : ((this.wrapper = e.makeNeutralElement('div')),
                  (this.wrapper.style.display = 'inline-block'),
                  this.anchor === e.ControlAnchor.NONE &&
                    (this.wrapper.style.width = this.wrapper.style.height =
                      '100%')),
              this.wrapper.appendChild(this.element),
              i.attachToViewer
                ? this.anchor === e.ControlAnchor.TOP_RIGHT ||
                  this.anchor === e.ControlAnchor.BOTTOM_RIGHT
                  ? this.container.insertBefore(
                      this.wrapper,
                      this.container.firstChild
                    )
                  : this.container.appendChild(this.wrapper)
                : o.appendChild(this.wrapper)
          }),
          (e.Control.prototype = {
            destroy: function () {
              this.wrapper.removeChild(this.element),
                this.anchor !== e.ControlAnchor.NONE &&
                  this.container.removeChild(this.wrapper)
            },
            isVisible: function () {
              return 'none' !== this.wrapper.style.display
            },
            setVisible: function (t) {
              this.wrapper.style.display = t
                ? this.anchor === e.ControlAnchor.ABSOLUTE
                  ? 'block'
                  : 'inline-block'
                : 'none'
            },
            setOpacity: function (t) {
              this.element[e.SIGNAL] && e.Browser.vendor === e.BROWSERS.IE
                ? e.setElementOpacity(this.element, t, !0)
                : e.setElementOpacity(this.wrapper, t, !0)
            },
          })
      })(t),
      (function (e) {
        function t(e, t) {
          var i,
            n = e.controls
          for (i = n.length - 1; i >= 0; i--) if (n[i].element === t) return i
          return -1
        }
        ;(e.ControlDock = function (t) {
          var i,
            n,
            o = ['topleft', 'topright', 'bottomright', 'bottomleft']
          for (
            e.extend(
              !0,
              this,
              {
                id:
                  'controldock-' +
                  e.now() +
                  '-' +
                  Math.floor(1e6 * Math.random()),
                container: e.makeNeutralElement('div'),
                controls: [],
              },
              t
            ),
              this.container.onsubmit = function () {
                return !1
              },
              this.element &&
                ((this.element = e.getElement(this.element)),
                this.element.appendChild(this.container),
                (this.element.style.position = 'relative'),
                (this.container.style.width = '100%'),
                (this.container.style.height = '100%')),
              n = 0;
            n < o.length;
            n++
          )
            (i = o[n]),
              (this.controls[i] = e.makeNeutralElement('div')),
              (this.controls[i].style.position = 'absolute'),
              i.match('left') && (this.controls[i].style.left = '0px'),
              i.match('right') && (this.controls[i].style.right = '0px'),
              i.match('top') && (this.controls[i].style.top = '0px'),
              i.match('bottom') && (this.controls[i].style.bottom = '0px')
          this.container.appendChild(this.controls.topleft),
            this.container.appendChild(this.controls.topright),
            this.container.appendChild(this.controls.bottomright),
            this.container.appendChild(this.controls.bottomleft)
        }),
          (e.ControlDock.prototype = {
            addControl: function (i, n) {
              var o = null
              if (!(t(this, (i = e.getElement(i))) >= 0)) {
                switch (n.anchor) {
                  case e.ControlAnchor.TOP_RIGHT:
                    ;(o = this.controls.topright),
                      (i.style.position = 'relative'),
                      (i.style.paddingRight = '0px'),
                      (i.style.paddingTop = '0px')
                    break
                  case e.ControlAnchor.BOTTOM_RIGHT:
                    ;(o = this.controls.bottomright),
                      (i.style.position = 'relative'),
                      (i.style.paddingRight = '0px'),
                      (i.style.paddingBottom = '0px')
                    break
                  case e.ControlAnchor.BOTTOM_LEFT:
                    ;(o = this.controls.bottomleft),
                      (i.style.position = 'relative'),
                      (i.style.paddingLeft = '0px'),
                      (i.style.paddingBottom = '0px')
                    break
                  case e.ControlAnchor.TOP_LEFT:
                    ;(o = this.controls.topleft),
                      (i.style.position = 'relative'),
                      (i.style.paddingLeft = '0px'),
                      (i.style.paddingTop = '0px')
                    break
                  case e.ControlAnchor.ABSOLUTE:
                    ;(o = this.container),
                      (i.style.margin = '0px'),
                      (i.style.padding = '0px')
                    break
                  default:
                  case e.ControlAnchor.NONE:
                    ;(o = this.container),
                      (i.style.margin = '0px'),
                      (i.style.padding = '0px')
                }
                this.controls.push(new e.Control(i, n, o)),
                  (i.style.display = 'inline-block')
              }
            },
            removeControl: function (i) {
              var n = t(this, (i = e.getElement(i)))
              return (
                n >= 0 &&
                  (this.controls[n].destroy(), this.controls.splice(n, 1)),
                this
              )
            },
            clearControls: function () {
              for (; this.controls.length > 0; ) this.controls.pop().destroy()
              return this
            },
            areControlsEnabled: function () {
              var e
              for (e = this.controls.length - 1; e >= 0; e--)
                if (this.controls[e].isVisible()) return !0
              return !1
            },
            setControlsEnabled: function (e) {
              var t
              for (t = this.controls.length - 1; t >= 0; t--)
                this.controls[t].setVisible(e)
              return this
            },
          })
      })(t),
      (function (e) {
        e.Placement = e.freezeObject({
          CENTER: 0,
          TOP_LEFT: 1,
          TOP: 2,
          TOP_RIGHT: 3,
          RIGHT: 4,
          BOTTOM_RIGHT: 5,
          BOTTOM: 6,
          BOTTOM_LEFT: 7,
          LEFT: 8,
          properties: {
            0: {
              isLeft: !1,
              isHorizontallyCentered: !0,
              isRight: !1,
              isTop: !1,
              isVerticallyCentered: !0,
              isBottom: !1,
            },
            1: {
              isLeft: !0,
              isHorizontallyCentered: !1,
              isRight: !1,
              isTop: !0,
              isVerticallyCentered: !1,
              isBottom: !1,
            },
            2: {
              isLeft: !1,
              isHorizontallyCentered: !0,
              isRight: !1,
              isTop: !0,
              isVerticallyCentered: !1,
              isBottom: !1,
            },
            3: {
              isLeft: !1,
              isHorizontallyCentered: !1,
              isRight: !0,
              isTop: !0,
              isVerticallyCentered: !1,
              isBottom: !1,
            },
            4: {
              isLeft: !1,
              isHorizontallyCentered: !1,
              isRight: !0,
              isTop: !1,
              isVerticallyCentered: !0,
              isBottom: !1,
            },
            5: {
              isLeft: !1,
              isHorizontallyCentered: !1,
              isRight: !0,
              isTop: !1,
              isVerticallyCentered: !1,
              isBottom: !0,
            },
            6: {
              isLeft: !1,
              isHorizontallyCentered: !0,
              isRight: !1,
              isTop: !1,
              isVerticallyCentered: !1,
              isBottom: !0,
            },
            7: {
              isLeft: !0,
              isHorizontallyCentered: !1,
              isRight: !1,
              isTop: !1,
              isVerticallyCentered: !1,
              isBottom: !0,
            },
            8: {
              isLeft: !0,
              isHorizontallyCentered: !1,
              isRight: !1,
              isTop: !1,
              isVerticallyCentered: !0,
              isBottom: !1,
            },
          },
        })
      })(t),
      (function (e) {
        var t = {},
          i = 1
        function n(t) {
          return (
            (t = e.getElement(t)),
            new e.Point(
              0 === t.clientWidth ? 1 : t.clientWidth,
              0 === t.clientHeight ? 1 : t.clientHeight
            )
          )
        }
        function o(t, i) {
          if (i instanceof e.Overlay) return i
          var n = null
          if (i.element) n = e.getElement(i.element)
          else {
            var o = i.id
              ? i.id
              : 'openseadragon-overlay-' + Math.floor(1e7 * Math.random())
            ;(n = e.getElement(i.id)) ||
              ((n = document.createElement('a')).href = '#/overlay/' + o),
              (n.id = o),
              e.addClass(n, i.className ? i.className : 'openseadragon-overlay')
          }
          var r = i.location,
            s = i.width,
            a = i.height
          if (!r) {
            var l = i.x,
              c = i.y
            if (void 0 !== i.px) {
              var h = t.viewport.imageToViewportRectangle(
                new e.Rect(i.px, i.py, s || 0, a || 0)
              )
              ;(l = h.x),
                (c = h.y),
                (s = void 0 !== s ? h.width : void 0),
                (a = void 0 !== a ? h.height : void 0)
            }
            r = new e.Point(l, c)
          }
          var u = i.placement
          return (
            u &&
              'string' === e.type(u) &&
              (u = e.Placement[i.placement.toUpperCase()]),
            new e.Overlay({
              element: n,
              location: r,
              placement: u,
              onDraw: i.onDraw,
              checkResize: i.checkResize,
              width: s,
              height: a,
              rotationMode: i.rotationMode,
            })
          )
        }
        function r(e, t) {
          var i
          for (i = e.length - 1; i >= 0; i--) if (e[i].element === t) return i
          return -1
        }
        function s(t, i) {
          return e.requestAnimationFrame(function () {
            i(t)
          })
        }
        function a(t) {
          e.requestAnimationFrame(function () {
            !(function (t) {
              var i, n
              if (t.controlsShouldFade) {
                for (
                  i =
                    1 -
                    (e.now() - t.controlsFadeBeginTime) / t.controlsFadeLength,
                    i = Math.min(1, i),
                    i = Math.max(0, i),
                    n = t.controls.length - 1;
                  n >= 0;
                  n--
                )
                  t.controls[n].autoFade && t.controls[n].setOpacity(i)
                i > 0 && a(t)
              }
            })(t)
          })
        }
        function l(t) {
          t.autoHideControls &&
            ((t.controlsShouldFade = !0),
            (t.controlsFadeBeginTime = e.now() + t.controlsFadeDelay),
            window.setTimeout(function () {
              a(t)
            }, t.controlsFadeDelay))
        }
        function c(e) {
          var t
          for (
            e.controlsShouldFade = !1, t = e.controls.length - 1;
            t >= 0;
            t--
          )
            e.controls[t].setOpacity(1)
        }
        function h() {
          c(this)
        }
        function u() {
          l(this)
        }
        function d(e) {
          var t = {
            tracker: e.eventSource,
            position: e.position,
            originalEvent: e.originalEvent,
            preventDefault: e.preventDefault,
          }
          this.raiseEvent('canvas-contextmenu', t),
            (e.preventDefault = t.preventDefault)
        }
        function p(t) {
          var i = {
            originalEvent: t.originalEvent,
            preventDefaultAction: !1,
            preventVerticalPan: t.preventVerticalPan || !this.panVertical,
            preventHorizontalPan: t.preventHorizontalPan || !this.panHorizontal,
          }
          if (
            (this.raiseEvent('canvas-key', i),
            i.preventDefaultAction || t.ctrl || t.alt || t.meta)
          )
            t.preventDefault = !1
          else
            switch (t.keyCode) {
              case 38:
                i.preventVerticalPan ||
                  (t.shift
                    ? this.viewport.zoomBy(1.1)
                    : this.viewport.panBy(
                        this.viewport.deltaPointsFromPixels(
                          new e.Point(0, -this.pixelsPerArrowPress)
                        )
                      ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              case 40:
                i.preventVerticalPan ||
                  (t.shift
                    ? this.viewport.zoomBy(0.9)
                    : this.viewport.panBy(
                        this.viewport.deltaPointsFromPixels(
                          new e.Point(0, this.pixelsPerArrowPress)
                        )
                      ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              case 37:
                i.preventHorizontalPan ||
                  (this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(
                      new e.Point(-this.pixelsPerArrowPress, 0)
                    )
                  ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              case 39:
                i.preventHorizontalPan ||
                  (this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(
                      new e.Point(this.pixelsPerArrowPress, 0)
                    )
                  ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              default:
                t.preventDefault = !1
            }
        }
        function g(t) {
          var i = {
            originalEvent: t.originalEvent,
            preventDefaultAction: !1,
            preventVerticalPan: t.preventVerticalPan || !this.panVertical,
            preventHorizontalPan: t.preventHorizontalPan || !this.panHorizontal,
          }
          if (
            (this.raiseEvent('canvas-key', i),
            i.preventDefaultAction || t.ctrl || t.alt || t.meta)
          )
            t.preventDefault = !1
          else
            switch (t.keyCode) {
              case 43:
              case 61:
                this.viewport.zoomBy(1.1),
                  this.viewport.applyConstraints(),
                  (t.preventDefault = !0)
                break
              case 45:
                this.viewport.zoomBy(0.9),
                  this.viewport.applyConstraints(),
                  (t.preventDefault = !0)
                break
              case 48:
                this.viewport.goHome(),
                  this.viewport.applyConstraints(),
                  (t.preventDefault = !0)
                break
              case 119:
              case 87:
                i.preventVerticalPan ||
                  (t.shift
                    ? this.viewport.zoomBy(1.1)
                    : this.viewport.panBy(
                        this.viewport.deltaPointsFromPixels(new e.Point(0, -40))
                      ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              case 115:
              case 83:
                i.preventVerticalPan ||
                  (t.shift
                    ? this.viewport.zoomBy(0.9)
                    : this.viewport.panBy(
                        this.viewport.deltaPointsFromPixels(new e.Point(0, 40))
                      ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              case 97:
                i.preventHorizontalPan ||
                  (this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(new e.Point(-40, 0))
                  ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              case 100:
                i.preventHorizontalPan ||
                  (this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(new e.Point(40, 0))
                  ),
                  this.viewport.applyConstraints()),
                  (t.preventDefault = !0)
                break
              case 114:
                this.viewport.flipped
                  ? this.viewport.setRotation(
                      e.positiveModulo(
                        this.viewport.degrees - this.rotationIncrement,
                        360
                      )
                    )
                  : this.viewport.setRotation(
                      e.positiveModulo(
                        this.viewport.degrees + this.rotationIncrement,
                        360
                      )
                    ),
                  this.viewport.applyConstraints(),
                  (t.preventDefault = !0)
                break
              case 82:
                this.viewport.flipped
                  ? this.viewport.setRotation(
                      e.positiveModulo(
                        this.viewport.degrees + this.rotationIncrement,
                        360
                      )
                    )
                  : this.viewport.setRotation(
                      e.positiveModulo(
                        this.viewport.degrees - this.rotationIncrement,
                        360
                      )
                    ),
                  this.viewport.applyConstraints(),
                  (t.preventDefault = !0)
                break
              case 102:
                this.viewport.toggleFlip(), (t.preventDefault = !0)
                break
              case 106:
                this.goToPreviousPage()
                break
              case 107:
                this.goToNextPage()
                break
              default:
                t.preventDefault = !1
            }
        }
        function m(e) {
          var t
          document.activeElement === this.canvas || this.canvas.focus(),
            this.viewport.flipped &&
              (e.position.x = this.viewport.getContainerSize().x - e.position.x)
          var i = {
            tracker: e.eventSource,
            position: e.position,
            quick: e.quick,
            shift: e.shift,
            originalEvent: e.originalEvent,
            originalTarget: e.originalTarget,
            preventDefaultAction: !1,
          }
          this.raiseEvent('canvas-click', i),
            !i.preventDefaultAction &&
              this.viewport &&
              e.quick &&
              (t = this.gestureSettingsByDeviceType(e.pointerType))
                .clickToZoom &&
              (this.viewport.zoomBy(
                e.shift ? 1 / this.zoomPerClick : this.zoomPerClick,
                t.zoomToRefPoint
                  ? this.viewport.pointFromPixel(e.position, !0)
                  : null
              ),
              this.viewport.applyConstraints())
        }
        function v(e) {
          var t,
            i = {
              tracker: e.eventSource,
              position: e.position,
              shift: e.shift,
              originalEvent: e.originalEvent,
              preventDefaultAction: !1,
            }
          this.raiseEvent('canvas-double-click', i),
            !i.preventDefaultAction &&
              this.viewport &&
              (t = this.gestureSettingsByDeviceType(e.pointerType))
                .dblClickToZoom &&
              (this.viewport.zoomBy(
                e.shift ? 1 / this.zoomPerClick : this.zoomPerClick,
                t.zoomToRefPoint
                  ? this.viewport.pointFromPixel(e.position, !0)
                  : null
              ),
              this.viewport.applyConstraints())
        }
        function f(e) {
          var t,
            i = {
              tracker: e.eventSource,
              pointerType: e.pointerType,
              position: e.position,
              delta: e.delta,
              speed: e.speed,
              direction: e.direction,
              shift: e.shift,
              originalEvent: e.originalEvent,
              preventDefaultAction: !1,
            }
          if (
            (this.raiseEvent('canvas-drag', i),
            (t = this.gestureSettingsByDeviceType(e.pointerType)).dragToPan &&
              !i.preventDefaultAction &&
              this.viewport)
          ) {
            if (
              (this.panHorizontal || (e.delta.x = 0),
              this.panVertical || (e.delta.y = 0),
              this.viewport.flipped && (e.delta.x = -e.delta.x),
              this.constrainDuringPan)
            ) {
              var n = this.viewport.deltaPointsFromPixels(e.delta.negate())
              ;(this.viewport.centerSpringX.target.value += n.x),
                (this.viewport.centerSpringY.target.value += n.y)
              var o = this.viewport.getBounds(),
                r = this.viewport.getConstrainedBounds()
              ;(this.viewport.centerSpringX.target.value -= n.x),
                (this.viewport.centerSpringY.target.value -= n.y),
                o.x !== r.x && (e.delta.x = 0),
                o.y !== r.y && (e.delta.y = 0)
            }
            this.viewport.panBy(
              this.viewport.deltaPointsFromPixels(e.delta.negate()),
              t.flickEnabled && !this.constrainDuringPan
            )
          }
        }
        function y(t) {
          var i = {
            tracker: t.eventSource,
            pointerType: t.pointerType,
            position: t.position,
            speed: t.speed,
            direction: t.direction,
            shift: t.shift,
            originalEvent: t.originalEvent,
            preventDefaultAction: !1,
          }
          if (
            (this.raiseEvent('canvas-drag-end', i),
            !i.preventDefaultAction && this.viewport)
          ) {
            var n = this.gestureSettingsByDeviceType(t.pointerType)
            if (n.flickEnabled && t.speed >= n.flickMinSpeed) {
              var o = 0
              this.panHorizontal &&
                (o = n.flickMomentum * t.speed * Math.cos(t.direction))
              var r = 0
              this.panVertical &&
                (r = n.flickMomentum * t.speed * Math.sin(t.direction))
              var s = this.viewport.pixelFromPoint(this.viewport.getCenter(!0)),
                a = this.viewport.pointFromPixel(new e.Point(s.x - o, s.y - r))
              this.viewport.panTo(a, !1)
            }
            this.viewport.applyConstraints()
          }
        }
        function w(e) {
          this.raiseEvent('canvas-enter', {
            tracker: e.eventSource,
            pointerType: e.pointerType,
            position: e.position,
            buttons: e.buttons,
            pointers: e.pointers,
            insideElementPressed: e.insideElementPressed,
            buttonDownAny: e.buttonDownAny,
            originalEvent: e.originalEvent,
          })
        }
        function T(e) {
          this.raiseEvent('canvas-exit', {
            tracker: e.eventSource,
            pointerType: e.pointerType,
            position: e.position,
            buttons: e.buttons,
            pointers: e.pointers,
            insideElementPressed: e.insideElementPressed,
            buttonDownAny: e.buttonDownAny,
            originalEvent: e.originalEvent,
          })
        }
        function x(e) {
          this.raiseEvent('canvas-press', {
            tracker: e.eventSource,
            pointerType: e.pointerType,
            position: e.position,
            insideElementPressed: e.insideElementPressed,
            insideElementReleased: e.insideElementReleased,
            originalEvent: e.originalEvent,
          })
        }
        function _(e) {
          this.raiseEvent('canvas-release', {
            tracker: e.eventSource,
            pointerType: e.pointerType,
            position: e.position,
            insideElementPressed: e.insideElementPressed,
            insideElementReleased: e.insideElementReleased,
            originalEvent: e.originalEvent,
          })
        }
        function S(e) {
          this.raiseEvent('canvas-nonprimary-press', {
            tracker: e.eventSource,
            position: e.position,
            pointerType: e.pointerType,
            button: e.button,
            buttons: e.buttons,
            originalEvent: e.originalEvent,
          })
        }
        function E(e) {
          this.raiseEvent('canvas-nonprimary-release', {
            tracker: e.eventSource,
            position: e.position,
            pointerType: e.pointerType,
            button: e.button,
            buttons: e.buttons,
            originalEvent: e.originalEvent,
          })
        }
        function P(e) {
          var t,
            i,
            n,
            o = {
              tracker: e.eventSource,
              pointerType: e.pointerType,
              gesturePoints: e.gesturePoints,
              lastCenter: e.lastCenter,
              center: e.center,
              lastDistance: e.lastDistance,
              distance: e.distance,
              shift: e.shift,
              originalEvent: e.originalEvent,
              preventDefaultPanAction: !1,
              preventDefaultZoomAction: !1,
              preventDefaultRotateAction: !1,
            }
          if (
            (this.raiseEvent('canvas-pinch', o),
            this.viewport &&
              (!(t = this.gestureSettingsByDeviceType(e.pointerType))
                .pinchToZoom ||
                (o.preventDefaultPanAction && o.preventDefaultZoomAction) ||
                ((i = this.viewport.pointFromPixel(e.center, !0)),
                t.zoomToRefPoint &&
                  !o.preventDefaultPanAction &&
                  ((n = this.viewport
                    .pointFromPixel(e.lastCenter, !0)
                    .minus(i)),
                  this.panHorizontal || (n.x = 0),
                  this.panVertical || (n.y = 0),
                  this.viewport.panBy(n, !0)),
                o.preventDefaultZoomAction ||
                  this.viewport.zoomBy(e.distance / e.lastDistance, i, !0),
                this.viewport.applyConstraints()),
              t.pinchRotate && !o.preventDefaultRotateAction))
          ) {
            var r = Math.atan2(
                e.gesturePoints[0].currentPos.y -
                  e.gesturePoints[1].currentPos.y,
                e.gesturePoints[0].currentPos.x -
                  e.gesturePoints[1].currentPos.x
              ),
              s = Math.atan2(
                e.gesturePoints[0].lastPos.y - e.gesturePoints[1].lastPos.y,
                e.gesturePoints[0].lastPos.x - e.gesturePoints[1].lastPos.x
              )
            this.viewport.setRotation(
              this.viewport.getRotation() + (r - s) * (180 / Math.PI)
            )
          }
        }
        function b(t) {
          var i, n, o, r
          ;(r = e.now()) - this._lastScrollTime > this.minScrollDeltaTime
            ? ((this._lastScrollTime = r),
              (i = {
                tracker: t.eventSource,
                position: t.position,
                scroll: t.scroll,
                shift: t.shift,
                originalEvent: t.originalEvent,
                preventDefaultAction: !1,
                preventDefault: !0,
              }),
              this.raiseEvent('canvas-scroll', i),
              !i.preventDefaultAction &&
                this.viewport &&
                (this.viewport.flipped &&
                  (t.position.x =
                    this.viewport.getContainerSize().x - t.position.x),
                (n = this.gestureSettingsByDeviceType(t.pointerType))
                  .scrollToZoom &&
                  ((o = Math.pow(this.zoomPerScroll, t.scroll)),
                  this.viewport.zoomBy(
                    o,
                    n.zoomToRefPoint
                      ? this.viewport.pointFromPixel(t.position, !0)
                      : null
                  ),
                  this.viewport.applyConstraints())),
              (t.preventDefault = i.preventDefault))
            : (t.preventDefault = !0)
        }
        function R(e) {
          ;(t[this.hash].mouseInside = !0),
            c(this),
            this.raiseEvent('container-enter', {
              tracker: e.eventSource,
              pointerType: e.pointerType,
              position: e.position,
              buttons: e.buttons,
              pointers: e.pointers,
              insideElementPressed: e.insideElementPressed,
              buttonDownAny: e.buttonDownAny,
              originalEvent: e.originalEvent,
            })
        }
        function C(e) {
          e.pointers < 1 &&
            ((t[this.hash].mouseInside = !1),
            t[this.hash].animating || l(this)),
            this.raiseEvent('container-exit', {
              tracker: e.eventSource,
              pointerType: e.pointerType,
              position: e.position,
              buttons: e.buttons,
              pointers: e.pointers,
              insideElementPressed: e.insideElementPressed,
              buttonDownAny: e.buttonDownAny,
              originalEvent: e.originalEvent,
            })
        }
        function k(e) {
          !(function (e) {
            if (e._opening || !t[e.hash]) return
            if (e.autoResize) {
              var i = n(e.container),
                o = t[e.hash].prevContainerSize
              if (!i.equals(o)) {
                var r = e.viewport
                if (e.preserveImageSizeOnResize) {
                  var s = o.x / i.x,
                    a = r.getZoom() * s,
                    h = r.getCenter()
                  r.resize(i, !1), r.zoomTo(a, null, !0), r.panTo(h, !0)
                } else {
                  var u = r.getBounds()
                  r.resize(i, !0), r.fitBoundsWithConstraints(u, !0)
                }
                ;(t[e.hash].prevContainerSize = i), (t[e.hash].forceRedraw = !0)
              }
            }
            var d = e.viewport.update(),
              p = e.world.update() || d
            d && e.raiseEvent('viewport-change')
            e.referenceStrip && (p = e.referenceStrip.update(e.viewport) || p)
            var g = t[e.hash].animating
            !g && p && (e.raiseEvent('animation-start'), c(e))
            var m = g && !p
            m && (t[e.hash].animating = !1)
            ;(p || m || t[e.hash].forceRedraw || e.world.needsDraw()) &&
              (!(function (e) {
                e.imageLoader.clear(),
                  e.drawer.clear(),
                  e.world.draw(),
                  e.raiseEvent('update-viewport', {})
              })(e),
              e._drawOverlays(),
              e.navigator && e.navigator.update(e.viewport),
              (t[e.hash].forceRedraw = !1),
              p && e.raiseEvent('animation'))
            m &&
              (e.raiseEvent('animation-finish'), t[e.hash].mouseInside || l(e))
            t[e.hash].animating = p
          })(e),
            e.isOpen()
              ? (e._updateRequestId = s(e, k))
              : (e._updateRequestId = !1)
        }
        function O(e, t) {
          return e ? e + t : t
        }
        function I() {
          ;(t[this.hash].lastZoomTime = e.now()),
            (t[this.hash].zoomFactor = this.zoomPerSecond),
            (t[this.hash].zooming = !0),
            L(this)
        }
        function D() {
          ;(t[this.hash].lastZoomTime = e.now()),
            (t[this.hash].zoomFactor = 1 / this.zoomPerSecond),
            (t[this.hash].zooming = !0),
            L(this)
        }
        function B() {
          t[this.hash].zooming = !1
        }
        function L(t) {
          e.requestAnimationFrame(e.delegate(t, H))
        }
        function H() {
          var i, n, o
          t[this.hash].zooming &&
            this.viewport &&
            ((n = (i = e.now()) - t[this.hash].lastZoomTime),
            (o = Math.pow(t[this.hash].zoomFactor, n / 1e3)),
            this.viewport.zoomBy(o),
            this.viewport.applyConstraints(),
            (t[this.hash].lastZoomTime = i),
            L(this))
        }
        function z() {
          this.viewport &&
            ((t[this.hash].zooming = !1),
            this.viewport.zoomBy(this.zoomPerClick / 1),
            this.viewport.applyConstraints())
        }
        function M() {
          this.viewport &&
            ((t[this.hash].zooming = !1),
            this.viewport.zoomBy(1 / this.zoomPerClick),
            this.viewport.applyConstraints())
        }
        function F() {
          this.buttonGroup &&
            (this.buttonGroup.emulateEnter(), this.buttonGroup.emulateLeave())
        }
        function N() {
          this.viewport && this.viewport.goHome()
        }
        function A() {
          this.isFullPage() && !e.isFullScreen()
            ? this.setFullPage(!1)
            : this.setFullScreen(!this.isFullPage()),
            this.buttonGroup && this.buttonGroup.emulateLeave(),
            this.fullPageButton.element.focus(),
            this.viewport && this.viewport.applyConstraints()
        }
        function $() {
          if (this.viewport) {
            var t = this.viewport.getRotation()
            ;(t = this.viewport.flipped
              ? e.positiveModulo(t + this.rotationIncrement, 360)
              : e.positiveModulo(t - this.rotationIncrement, 360)),
              this.viewport.setRotation(t)
          }
        }
        function j() {
          if (this.viewport) {
            var t = this.viewport.getRotation()
            ;(t = this.viewport.flipped
              ? e.positiveModulo(t - this.rotationIncrement, 360)
              : e.positiveModulo(t + this.rotationIncrement, 360)),
              this.viewport.setRotation(t)
          }
        }
        function U() {
          this.viewport.toggleFlip()
        }
        ;(e.Viewer = function (o) {
          var r,
            a,
            c = arguments,
            h = this
          if (
            (e.isPlainObject(o) ||
              (o = {
                id: c[0],
                xmlPath: c.length > 1 ? c[1] : void 0,
                prefixUrl: c.length > 2 ? c[2] : void 0,
                controls: c.length > 3 ? c[3] : void 0,
                overlays: c.length > 4 ? c[4] : void 0,
              }),
            o.config && (e.extend(!0, o, o.config), delete o.config),
            e.extend(
              !0,
              this,
              {
                id: o.id,
                hash: o.hash || i++,
                initialPage: 0,
                element: null,
                container: null,
                canvas: null,
                overlays: [],
                overlaysContainer: null,
                previousBody: [],
                customControls: [],
                source: null,
                drawer: null,
                world: null,
                viewport: null,
                navigator: null,
                collectionViewport: null,
                collectionDrawer: null,
                navImages: null,
                buttons: null,
                profiler: null,
              },
              e.DEFAULT_SETTINGS,
              o
            ),
            void 0 === this.hash)
          )
            throw new Error(
              'A hash must be defined, either by specifying options.id or options.hash.'
            )
          for (
            void 0 !== t[this.hash] &&
              e.console.warn('Hash ' + this.hash + ' has already been used.'),
              t[this.hash] = {
                fsBoundsDelta: new e.Point(1, 1),
                prevContainerSize: null,
                animating: !1,
                forceRedraw: !1,
                mouseInside: !1,
                group: null,
                zooming: !1,
                zoomFactor: null,
                lastZoomTime: null,
                fullPage: !1,
                onfullscreenchange: null,
              },
              this._sequenceIndex = 0,
              this._firstOpen = !0,
              this._updateRequestId = null,
              this._loadQueue = [],
              this.currentOverlays = [],
              this._updatePixelDensityRatioBind = null,
              this._lastScrollTime = e.now(),
              e.EventSource.call(this),
              this.addHandler('open-failed', function (t) {
                var i = e.getString(
                  'Errors.OpenFailed',
                  t.eventSource,
                  t.message
                )
                h._showMessage(i)
              }),
              e.ControlDock.call(this, o),
              this.xmlPath && (this.tileSources = [this.xmlPath]),
              this.element = this.element || document.getElementById(this.id),
              this.canvas = e.makeNeutralElement('div'),
              this.canvas.className = 'openseadragon-canvas',
              (a = this.canvas.style).width = '100%',
              a.height = '100%',
              a.overflow = 'hidden',
              a.position = 'absolute',
              a.top = '0px',
              a.left = '0px',
              e.setElementTouchActionNone(this.canvas),
              '' !== o.tabIndex &&
                (this.canvas.tabIndex = void 0 === o.tabIndex ? 0 : o.tabIndex),
              this.container.className = 'openseadragon-container',
              (function (e) {
                ;(e.width = '100%'),
                  (e.height = '100%'),
                  (e.position = 'relative'),
                  (e.overflow = 'hidden'),
                  (e.left = '0px'),
                  (e.top = '0px'),
                  (e.textAlign = 'left')
              })(this.container.style),
              e.setElementTouchActionNone(this.container),
              this.container.insertBefore(
                this.canvas,
                this.container.firstChild
              ),
              this.element.appendChild(this.container),
              this.bodyWidth = document.body.style.width,
              this.bodyHeight = document.body.style.height,
              this.bodyOverflow = document.body.style.overflow,
              this.docOverflow = document.documentElement.style.overflow,
              this.innerTracker = new e.MouseTracker({
                userData: 'Viewer.innerTracker',
                element: this.canvas,
                startDisabled: !this.mouseNavEnabled,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                dblClickTimeThreshold: this.dblClickTimeThreshold,
                dblClickDistThreshold: this.dblClickDistThreshold,
                contextMenuHandler: e.delegate(this, d),
                keyDownHandler: e.delegate(this, p),
                keyHandler: e.delegate(this, g),
                clickHandler: e.delegate(this, m),
                dblClickHandler: e.delegate(this, v),
                dragHandler: e.delegate(this, f),
                dragEndHandler: e.delegate(this, y),
                enterHandler: e.delegate(this, w),
                leaveHandler: e.delegate(this, T),
                pressHandler: e.delegate(this, x),
                releaseHandler: e.delegate(this, _),
                nonPrimaryPressHandler: e.delegate(this, S),
                nonPrimaryReleaseHandler: e.delegate(this, E),
                scrollHandler: e.delegate(this, b),
                pinchHandler: e.delegate(this, P),
              }),
              this.outerTracker = new e.MouseTracker({
                userData: 'Viewer.outerTracker',
                element: this.container,
                startDisabled: !this.mouseNavEnabled,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                dblClickTimeThreshold: this.dblClickTimeThreshold,
                dblClickDistThreshold: this.dblClickDistThreshold,
                enterHandler: e.delegate(this, R),
                leaveHandler: e.delegate(this, C),
              }),
              this.toolbar &&
                (this.toolbar = new e.ControlDock({ element: this.toolbar })),
              this.bindStandardControls(),
              t[this.hash].prevContainerSize = n(this.container),
              this.world = new e.World({ viewer: this }),
              this.world.addHandler('add-item', function (e) {
                ;(h.source = h.world.getItemAt(0).source),
                  (t[h.hash].forceRedraw = !0),
                  h._updateRequestId || (h._updateRequestId = s(h, k))
              }),
              this.world.addHandler('remove-item', function (e) {
                h.world.getItemCount()
                  ? (h.source = h.world.getItemAt(0).source)
                  : (h.source = null),
                  (t[h.hash].forceRedraw = !0)
              }),
              this.world.addHandler('metrics-change', function (e) {
                h.viewport &&
                  h.viewport._setContentBounds(
                    h.world.getHomeBounds(),
                    h.world.getContentFactor()
                  )
              }),
              this.world.addHandler('item-index-change', function (e) {
                h.source = h.world.getItemAt(0).source
              }),
              this.viewport = new e.Viewport({
                containerSize: t[this.hash].prevContainerSize,
                springStiffness: this.springStiffness,
                animationTime: this.animationTime,
                minZoomImageRatio: this.minZoomImageRatio,
                maxZoomPixelRatio: this.maxZoomPixelRatio,
                visibilityRatio: this.visibilityRatio,
                wrapHorizontal: this.wrapHorizontal,
                wrapVertical: this.wrapVertical,
                defaultZoomLevel: this.defaultZoomLevel,
                minZoomLevel: this.minZoomLevel,
                maxZoomLevel: this.maxZoomLevel,
                viewer: this,
                degrees: this.degrees,
                flipped: this.flipped,
                navigatorRotate: this.navigatorRotate,
                homeFillsViewer: this.homeFillsViewer,
                margins: this.viewportMargins,
                silenceMultiImageWarnings: this.silenceMultiImageWarnings,
              }),
              this.viewport._setContentBounds(
                this.world.getHomeBounds(),
                this.world.getContentFactor()
              ),
              this.imageLoader = new e.ImageLoader({
                jobLimit: this.imageLoaderLimit,
                timeout: o.timeout,
              }),
              this.tileCache = new e.TileCache({
                maxImageCacheCount: this.maxImageCacheCount,
              }),
              this.drawer = new e.Drawer({
                viewer: this,
                viewport: this.viewport,
                element: this.canvas,
                debugGridColor: this.debugGridColor,
              }),
              this.overlaysContainer = e.makeNeutralElement('div'),
              this.canvas.appendChild(this.overlaysContainer),
              this.drawer.canRotate() ||
                (this.rotateLeft &&
                  ((r = this.buttonGroup.buttons.indexOf(this.rotateLeft)),
                  this.buttonGroup.buttons.splice(r, 1),
                  this.buttonGroup.element.removeChild(
                    this.rotateLeft.element
                  )),
                this.rotateRight &&
                  ((r = this.buttonGroup.buttons.indexOf(this.rotateRight)),
                  this.buttonGroup.buttons.splice(r, 1),
                  this.buttonGroup.element.removeChild(
                    this.rotateRight.element
                  ))),
              this._addUpdatePixelDensityRatioEvent(),
              this.showNavigator &&
                (this.navigator = new e.Navigator({
                  id: this.navigatorId,
                  position: this.navigatorPosition,
                  sizeRatio: this.navigatorSizeRatio,
                  maintainSizeRatio: this.navigatorMaintainSizeRatio,
                  top: this.navigatorTop,
                  left: this.navigatorLeft,
                  width: this.navigatorWidth,
                  height: this.navigatorHeight,
                  autoResize: this.navigatorAutoResize,
                  autoFade: this.navigatorAutoFade,
                  prefixUrl: this.prefixUrl,
                  viewer: this,
                  navigatorRotate: this.navigatorRotate,
                  background: this.navigatorBackground,
                  opacity: this.navigatorOpacity,
                  borderColor: this.navigatorBorderColor,
                  displayRegionColor: this.navigatorDisplayRegionColor,
                  crossOriginPolicy: this.crossOriginPolicy,
                })),
              this.sequenceMode && this.bindSequenceControls(),
              this.tileSources && this.open(this.tileSources),
              r = 0;
            r < this.customControls.length;
            r++
          )
            this.addControl(this.customControls[r].id, {
              anchor: this.customControls[r].anchor,
            })
          e.requestAnimationFrame(function () {
            l(h)
          }),
            void 0 === this.imageSmoothingEnabled ||
              this.imageSmoothingEnabled ||
              this.drawer.setImageSmoothingEnabled(this.imageSmoothingEnabled),
            e._viewers.set(this.element, this)
        }),
          e.extend(
            e.Viewer.prototype,
            e.EventSource.prototype,
            e.ControlDock.prototype,
            {
              isOpen: function () {
                return !!this.world.getItemCount()
              },
              openDzi: function (t) {
                return (
                  e.console.error(
                    '[Viewer.openDzi] this function is deprecated; use Viewer.open() instead.'
                  ),
                  this.open(t)
                )
              },
              openTileSource: function (t) {
                return (
                  e.console.error(
                    '[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead.'
                  ),
                  this.open(t)
                )
              },
              get buttons() {
                return (
                  e.console.warn(
                    'Viewer.buttons is deprecated; Please use Viewer.buttonGroup'
                  ),
                  this.buttonGroup
                )
              },
              open: function (t, i) {
                var n = this
                if ((this.close(), !t)) return this
                if (this.sequenceMode && e.isArray(t))
                  return (
                    this.referenceStrip &&
                      (this.referenceStrip.destroy(),
                      (this.referenceStrip = null)),
                    void 0 === i || isNaN(i) || (this.initialPage = i),
                    (this.tileSources = t),
                    (this._sequenceIndex = Math.max(
                      0,
                      Math.min(this.tileSources.length - 1, this.initialPage)
                    )),
                    this.tileSources.length &&
                      (this.open(this.tileSources[this._sequenceIndex]),
                      this.showReferenceStrip && this.addReferenceStrip()),
                    this._updateSequenceButtons(this._sequenceIndex),
                    this
                  )
                if ((e.isArray(t) || (t = [t]), !t.length)) return this
                this._opening = !0
                for (
                  var r,
                    s = t.length,
                    a = 0,
                    l = 0,
                    c = function () {
                      if (a + l === s)
                        if (a) {
                          ;(!n._firstOpen && n.preserveViewport) ||
                            (n.viewport.goHome(!0), n.viewport.update()),
                            (n._firstOpen = !1)
                          var e = t[0]
                          if (
                            (e.tileSource && (e = e.tileSource),
                            n.overlays && !n.preserveOverlays)
                          )
                            for (var i = 0; i < n.overlays.length; i++)
                              n.currentOverlays[i] = o(n, n.overlays[i])
                          n._drawOverlays(),
                            (n._opening = !1),
                            n.raiseEvent('open', { source: e })
                        } else (n._opening = !1), n.raiseEvent('open-failed', r)
                    },
                    h = function (t) {
                      ;(e.isPlainObject(t) && t.tileSource) ||
                        (t = { tileSource: t }),
                        void 0 !== t.index &&
                          (e.console.error(
                            '[Viewer.open] setting indexes here is not supported; use addTiledImage instead'
                          ),
                          delete t.index),
                        void 0 === t.collectionImmediately &&
                          (t.collectionImmediately = !0)
                      var i = t.success
                      t.success = function (e) {
                        if ((a++, t.tileSource.overlays))
                          for (var o = 0; o < t.tileSource.overlays.length; o++)
                            n.addOverlay(t.tileSource.overlays[o])
                        i && i(e), c()
                      }
                      var o = t.error
                      ;(t.error = function (e) {
                        l++, r || (r = e), o && o(e), c()
                      }),
                        n.addTiledImage(t)
                    },
                    u = 0;
                  u < t.length;
                  u++
                )
                  h(t[u])
                return this
              },
              close: function () {
                return t[this.hash]
                  ? ((this._opening = !1),
                    this.navigator && this.navigator.close(),
                    this.preserveOverlays ||
                      (this.clearOverlays(),
                      (this.overlaysContainer.innerHTML = '')),
                    (t[this.hash].animating = !1),
                    this.world.removeAll(),
                    this.imageLoader.clear(),
                    this.raiseEvent('close'),
                    this)
                  : this
              },
              destroy: function () {
                if (t[this.hash]) {
                  if (
                    (this._removeUpdatePixelDensityRatioEvent(),
                    this.close(),
                    this.clearOverlays(),
                    (this.overlaysContainer.innerHTML = ''),
                    this.referenceStrip &&
                      (this.referenceStrip.destroy(),
                      (this.referenceStrip = null)),
                    null !== this._updateRequestId &&
                      (e.cancelAnimationFrame(this._updateRequestId),
                      (this._updateRequestId = null)),
                    this.drawer && this.drawer.destroy(),
                    this.navigator &&
                      (this.navigator.destroy(),
                      (t[this.navigator.hash] = null),
                      delete t[this.navigator.hash],
                      (this.navigator = null)),
                    this.removeAllHandlers(),
                    this.buttonGroup)
                  )
                    this.buttonGroup.destroy()
                  else if (this.customButtons)
                    for (; this.customButtons.length; )
                      this.customButtons.pop().destroy()
                  if ((this.paging && this.paging.destroy(), this.element))
                    for (; this.element.firstChild; )
                      this.element.removeChild(this.element.firstChild)
                  ;(this.container.onsubmit = null),
                    this.clearControls(),
                    this.innerTracker && this.innerTracker.destroy(),
                    this.outerTracker && this.outerTracker.destroy(),
                    (t[this.hash] = null),
                    delete t[this.hash],
                    (this.canvas = null),
                    (this.container = null),
                    e._viewers.delete(this.element),
                    (this.element = null)
                }
              },
              isMouseNavEnabled: function () {
                return this.innerTracker.isTracking()
              },
              setMouseNavEnabled: function (e) {
                return (
                  this.innerTracker.setTracking(e),
                  this.outerTracker.setTracking(e),
                  this.raiseEvent('mouse-enabled', { enabled: e }),
                  this
                )
              },
              areControlsEnabled: function () {
                var e,
                  t = this.controls.length
                for (e = 0; e < this.controls.length; e++)
                  t = t && this.controls[e].isVisible()
                return t
              },
              setControlsEnabled: function (e) {
                return (
                  e ? c(this) : l(this),
                  this.raiseEvent('controls-enabled', { enabled: e }),
                  this
                )
              },
              setDebugMode: function (e) {
                for (var t = 0; t < this.world.getItemCount(); t++)
                  this.world.getItemAt(t).debugMode = e
                ;(this.debugMode = e), this.forceRedraw()
              },
              isFullPage: function () {
                return t[this.hash].fullPage
              },
              setFullPage: function (i) {
                var n,
                  o,
                  r = document.body,
                  s = r.style,
                  a = document.documentElement.style,
                  l = this
                if (i === this.isFullPage()) return this
                var c = { fullPage: i, preventDefaultAction: !1 }
                if (
                  (this.raiseEvent('pre-full-page', c), c.preventDefaultAction)
                )
                  return this
                if (i) {
                  for (
                    this.elementSize = e.getElementSize(this.element),
                      this.pageScroll = e.getPageScroll(),
                      this.elementMargin = this.element.style.margin,
                      this.element.style.margin = '0',
                      this.elementPadding = this.element.style.padding,
                      this.element.style.padding = '0',
                      this.bodyMargin = s.margin,
                      this.docMargin = a.margin,
                      s.margin = '0',
                      a.margin = '0',
                      this.bodyPadding = s.padding,
                      this.docPadding = a.padding,
                      s.padding = '0',
                      a.padding = '0',
                      this.bodyWidth = s.width,
                      this.docWidth = a.width,
                      s.width = '100%',
                      a.width = '100%',
                      this.bodyHeight = s.height,
                      this.docHeight = a.height,
                      s.height = '100%',
                      a.height = '100%',
                      this.bodyDisplay = s.display,
                      s.display = 'block',
                      this.previousBody = [],
                      t[this.hash].prevElementParent = this.element.parentNode,
                      t[this.hash].prevNextSibling = this.element.nextSibling,
                      t[this.hash].prevElementWidth = this.element.style.width,
                      t[
                        this.hash
                      ].prevElementHeight = this.element.style.height,
                      n = r.childNodes.length,
                      o = 0;
                    o < n;
                    o++
                  )
                    this.previousBody.push(r.childNodes[0]),
                      r.removeChild(r.childNodes[0])
                  this.toolbar &&
                    this.toolbar.element &&
                    ((this.toolbar.parentNode = this.toolbar.element.parentNode),
                    (this.toolbar.nextSibling = this.toolbar.element.nextSibling),
                    r.appendChild(this.toolbar.element),
                    e.addClass(this.toolbar.element, 'fullpage')),
                    e.addClass(this.element, 'fullpage'),
                    r.appendChild(this.element),
                    (this.element.style.height = '100vh'),
                    (this.element.style.width = '100vw'),
                    this.toolbar &&
                      this.toolbar.element &&
                      (this.element.style.height =
                        e.getElementSize(this.element).y -
                        e.getElementSize(this.toolbar.element).y +
                        'px'),
                    (t[this.hash].fullPage = !0),
                    e.delegate(this, R)({})
                } else {
                  for (
                    this.element.style.margin = this.elementMargin,
                      this.element.style.padding = this.elementPadding,
                      s.margin = this.bodyMargin,
                      a.margin = this.docMargin,
                      s.padding = this.bodyPadding,
                      a.padding = this.docPadding,
                      s.width = this.bodyWidth,
                      a.width = this.docWidth,
                      s.height = this.bodyHeight,
                      a.height = this.docHeight,
                      s.display = this.bodyDisplay,
                      r.removeChild(this.element),
                      n = this.previousBody.length,
                      o = 0;
                    o < n;
                    o++
                  )
                    r.appendChild(this.previousBody.shift())
                  e.removeClass(this.element, 'fullpage'),
                    t[this.hash].prevElementParent.insertBefore(
                      this.element,
                      t[this.hash].prevNextSibling
                    ),
                    this.toolbar &&
                      this.toolbar.element &&
                      (r.removeChild(this.toolbar.element),
                      e.removeClass(this.toolbar.element, 'fullpage'),
                      this.toolbar.parentNode.insertBefore(
                        this.toolbar.element,
                        this.toolbar.nextSibling
                      ),
                      delete this.toolbar.parentNode,
                      delete this.toolbar.nextSibling),
                    (this.element.style.width = t[this.hash].prevElementWidth),
                    (this.element.style.height = t[this.hash].prevElementHeight)
                  var h = 0,
                    u = function () {
                      e.setPageScroll(l.pageScroll)
                      var t = e.getPageScroll()
                      ++h < 10 &&
                        (t.x !== l.pageScroll.x || t.y !== l.pageScroll.y) &&
                        e.requestAnimationFrame(u)
                    }
                  e.requestAnimationFrame(u),
                    (t[this.hash].fullPage = !1),
                    e.delegate(this, C)({})
                }
                return (
                  this.navigator &&
                    this.viewport &&
                    this.navigator.update(this.viewport),
                  this.raiseEvent('full-page', { fullPage: i }),
                  this
                )
              },
              setFullScreen: function (t) {
                var i = this
                if (!e.supportsFullScreen) return this.setFullPage(t)
                if (e.isFullScreen() === t) return this
                var n = { fullScreen: t, preventDefaultAction: !1 }
                if (
                  (this.raiseEvent('pre-full-screen', n),
                  n.preventDefaultAction)
                )
                  return this
                if (t) {
                  if ((this.setFullPage(!0), !this.isFullPage())) return this
                  ;(this.fullPageStyleWidth = this.element.style.width),
                    (this.fullPageStyleHeight = this.element.style.height),
                    (this.element.style.width = '100%'),
                    (this.element.style.height = '100%')
                  var o = function () {
                    var t = e.isFullScreen()
                    t ||
                      (e.removeEvent(document, e.fullScreenEventName, o),
                      e.removeEvent(document, e.fullScreenErrorEventName, o),
                      i.setFullPage(!1),
                      i.isFullPage() &&
                        ((i.element.style.width = i.fullPageStyleWidth),
                        (i.element.style.height = i.fullPageStyleHeight))),
                      i.navigator &&
                        i.viewport &&
                        setTimeout(function () {
                          i.navigator.update(i.viewport)
                        }),
                      i.raiseEvent('full-screen', { fullScreen: t })
                  }
                  e.addEvent(document, e.fullScreenEventName, o),
                    e.addEvent(document, e.fullScreenErrorEventName, o),
                    e.requestFullScreen(document.body)
                } else e.exitFullScreen()
                return this
              },
              isVisible: function () {
                return 'hidden' !== this.container.style.visibility
              },
              isFullScreen: function () {
                return e.isFullScreen() && this.isFullPage()
              },
              setVisible: function (e) {
                return (
                  (this.container.style.visibility = e ? '' : 'hidden'),
                  this.raiseEvent('visible', { visible: e }),
                  this
                )
              },
              addTiledImage: function (t) {
                e.console.assert(
                  t,
                  '[Viewer.addTiledImage] options is required'
                ),
                  e.console.assert(
                    t.tileSource,
                    '[Viewer.addTiledImage] options.tileSource is required'
                  ),
                  e.console.assert(
                    !t.replace ||
                      (t.index > -1 && t.index < this.world.getItemCount()),
                    '[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world'
                  )
                var i = this
                t.replace && (t.replaceItem = i.world.getItemAt(t.index)),
                  this._hideMessage(),
                  void 0 === t.placeholderFillStyle &&
                    (t.placeholderFillStyle = this.placeholderFillStyle),
                  void 0 === t.opacity && (t.opacity = this.opacity),
                  void 0 === t.preload && (t.preload = this.preload),
                  void 0 === t.compositeOperation &&
                    (t.compositeOperation = this.compositeOperation),
                  void 0 === t.crossOriginPolicy &&
                    (t.crossOriginPolicy =
                      void 0 !== t.tileSource.crossOriginPolicy
                        ? t.tileSource.crossOriginPolicy
                        : this.crossOriginPolicy),
                  void 0 === t.ajaxWithCredentials &&
                    (t.ajaxWithCredentials = this.ajaxWithCredentials),
                  void 0 === t.loadTilesWithAjax &&
                    (t.loadTilesWithAjax = this.loadTilesWithAjax),
                  void 0 === t.ajaxHeaders || null === t.ajaxHeaders
                    ? (t.ajaxHeaders = this.ajaxHeaders)
                    : e.isPlainObject(t.ajaxHeaders) &&
                      e.isPlainObject(this.ajaxHeaders) &&
                      (t.ajaxHeaders = e.extend(
                        {},
                        this.ajaxHeaders,
                        t.ajaxHeaders
                      ))
                var n = { options: t }
                function o(e) {
                  for (var o = 0; o < i._loadQueue.length; o++)
                    if (i._loadQueue[o] === n) {
                      i._loadQueue.splice(o, 1)
                      break
                    }
                  0 === i._loadQueue.length && r(n),
                    i.raiseEvent('add-item-failed', e),
                    t.error && t.error(e)
                }
                function r(e) {
                  i.collectionMode &&
                    (i.world.arrange({
                      immediately: e.options.collectionImmediately,
                      rows: i.collectionRows,
                      columns: i.collectionColumns,
                      layout: i.collectionLayout,
                      tileSize: i.collectionTileSize,
                      tileMargin: i.collectionTileMargin,
                    }),
                    i.world.setAutoRefigureSizes(!0))
                }
                function s() {
                  for (
                    var t, n, o;
                    i._loadQueue.length && (t = i._loadQueue[0]).tileSource;

                  ) {
                    if ((i._loadQueue.splice(0, 1), t.options.replace)) {
                      var s = i.world.getIndexOfItem(t.options.replaceItem)
                      ;-1 !== s && (t.options.index = s),
                        i.world.removeItem(t.options.replaceItem)
                    }
                    ;(n = new e.TiledImage({
                      viewer: i,
                      source: t.tileSource,
                      viewport: i.viewport,
                      drawer: i.drawer,
                      tileCache: i.tileCache,
                      imageLoader: i.imageLoader,
                      x: t.options.x,
                      y: t.options.y,
                      width: t.options.width,
                      height: t.options.height,
                      fitBounds: t.options.fitBounds,
                      fitBoundsPlacement: t.options.fitBoundsPlacement,
                      clip: t.options.clip,
                      placeholderFillStyle: t.options.placeholderFillStyle,
                      opacity: t.options.opacity,
                      preload: t.options.preload,
                      degrees: t.options.degrees,
                      flipped: t.options.flipped,
                      compositeOperation: t.options.compositeOperation,
                      springStiffness: i.springStiffness,
                      animationTime: i.animationTime,
                      minZoomImageRatio: i.minZoomImageRatio,
                      wrapHorizontal: i.wrapHorizontal,
                      wrapVertical: i.wrapVertical,
                      immediateRender: i.immediateRender,
                      blendTime: i.blendTime,
                      alwaysBlend: i.alwaysBlend,
                      minPixelRatio: i.minPixelRatio,
                      smoothTileEdgesMinZoom: i.smoothTileEdgesMinZoom,
                      iOSDevice: i.iOSDevice,
                      crossOriginPolicy: t.options.crossOriginPolicy,
                      ajaxWithCredentials: t.options.ajaxWithCredentials,
                      loadTilesWithAjax: t.options.loadTilesWithAjax,
                      ajaxHeaders: t.options.ajaxHeaders,
                      debugMode: i.debugMode,
                      subPixelRoundingForTransparency:
                        i.subPixelRoundingForTransparency,
                    })),
                      i.collectionMode && i.world.setAutoRefigureSizes(!1),
                      i.navigator &&
                        ((o = e.extend({}, t.options, {
                          replace: !1,
                          originalTiledImage: n,
                          tileSource: t.tileSource,
                        })),
                        i.navigator.addTiledImage(o)),
                      i.world.addItem(n, { index: t.options.index }),
                      0 === i._loadQueue.length && r(t),
                      1 !== i.world.getItemCount() ||
                        i.preserveViewport ||
                        i.viewport.goHome(!0),
                      t.options.success && t.options.success({ item: n })
                  }
                }
                e.isArray(t.tileSource)
                  ? setTimeout(function () {
                      o({
                        message:
                          '[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.',
                        source: t.tileSource,
                        options: t,
                      })
                    })
                  : (this._loadQueue.push(n),
                    (function (t, i, n, o, r) {
                      var s = t
                      if ('string' === e.type(i))
                        if (i.match(/^\s*<.*>\s*$/)) i = e.parseXml(i)
                        else if (i.match(/^\s*[{[].*[}\]]\s*$/))
                          try {
                            var a = e.parseJSON(i)
                            i = a
                          } catch (e) {}
                      function l(e, t) {
                        e.ready
                          ? o(e)
                          : (e.addHandler('ready', function () {
                              o(e)
                            }),
                            e.addHandler('open-failed', function (e) {
                              r({ message: e.message, source: t })
                            }))
                      }
                      setTimeout(function () {
                        if ('string' === e.type(i))
                          (i = new e.TileSource({
                            url: i,
                            crossOriginPolicy:
                              void 0 !== n.crossOriginPolicy
                                ? n.crossOriginPolicy
                                : t.crossOriginPolicy,
                            ajaxWithCredentials: t.ajaxWithCredentials,
                            ajaxHeaders: n.ajaxHeaders
                              ? n.ajaxHeaders
                              : t.ajaxHeaders,
                            splitHashDataForPost: t.splitHashDataForPost,
                            useCanvas: t.useCanvas,
                            success: function (e) {
                              o(e.tileSource)
                            },
                          })).addHandler('open-failed', function (e) {
                            r(e)
                          })
                        else if (e.isPlainObject(i) || i.nodeType)
                          if (
                            (void 0 !== i.crossOriginPolicy ||
                              (void 0 === n.crossOriginPolicy &&
                                void 0 === t.crossOriginPolicy) ||
                              (i.crossOriginPolicy =
                                void 0 !== n.crossOriginPolicy
                                  ? n.crossOriginPolicy
                                  : t.crossOriginPolicy),
                            void 0 === i.ajaxWithCredentials &&
                              (i.ajaxWithCredentials = t.ajaxWithCredentials),
                            void 0 === i.useCanvas &&
                              (i.useCanvas = t.useCanvas),
                            e.isFunction(i.getTileUrl))
                          ) {
                            var a = new e.TileSource(i)
                            ;(a.getTileUrl = i.getTileUrl), o(a)
                          } else {
                            var c = e.TileSource.determineType(s, i)
                            if (!c)
                              return void r({
                                message: 'Unable to load TileSource',
                                source: i,
                              })
                            var h = c.prototype.configure.apply(s, [i])
                            l(new c(h), i)
                          }
                        else l(i, i)
                      })
                    })(
                      this,
                      t.tileSource,
                      t,
                      function (e) {
                        ;(n.tileSource = e), s()
                      },
                      function (e) {
                        ;(e.options = t), o(e), s()
                      }
                    ))
              },
              addSimpleImage: function (t) {
                e.console.assert(
                  t,
                  '[Viewer.addSimpleImage] options is required'
                ),
                  e.console.assert(
                    t.url,
                    '[Viewer.addSimpleImage] options.url is required'
                  )
                var i = e.extend({}, t, {
                  tileSource: { type: 'image', url: t.url },
                })
                delete i.url, this.addTiledImage(i)
              },
              addLayer: function (t) {
                var i = this
                e.console.error(
                  '[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead.'
                )
                var n = e.extend({}, t, {
                  success: function (e) {
                    i.raiseEvent('add-layer', { options: t, drawer: e.item })
                  },
                  error: function (e) {
                    i.raiseEvent('add-layer-failed', e)
                  },
                })
                return this.addTiledImage(n), this
              },
              getLayerAtLevel: function (t) {
                return (
                  e.console.error(
                    '[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead.'
                  ),
                  this.world.getItemAt(t)
                )
              },
              getLevelOfLayer: function (t) {
                return (
                  e.console.error(
                    '[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead.'
                  ),
                  this.world.getIndexOfItem(t)
                )
              },
              getLayersCount: function () {
                return (
                  e.console.error(
                    '[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead.'
                  ),
                  this.world.getItemCount()
                )
              },
              setLayerLevel: function (t, i) {
                return (
                  e.console.error(
                    '[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead.'
                  ),
                  this.world.setItemIndex(t, i)
                )
              },
              removeLayer: function (t) {
                return (
                  e.console.error(
                    '[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead.'
                  ),
                  this.world.removeItem(t)
                )
              },
              forceRedraw: function () {
                return (t[this.hash].forceRedraw = !0), this
              },
              bindSequenceControls: function () {
                var t = e.delegate(this, h),
                  i = e.delegate(this, u),
                  n = e.delegate(this, this.goToNextPage),
                  o = e.delegate(this, this.goToPreviousPage),
                  r = this.navImages,
                  s = !0
                return (
                  this.showSequenceControl &&
                    ((this.previousButton || this.nextButton) && (s = !1),
                    (this.previousButton = new e.Button({
                      element: this.previousButton
                        ? e.getElement(this.previousButton)
                        : null,
                      clickTimeThreshold: this.clickTimeThreshold,
                      clickDistThreshold: this.clickDistThreshold,
                      tooltip: e.getString('Tooltips.PreviousPage'),
                      srcRest: O(this.prefixUrl, r.previous.REST),
                      srcGroup: O(this.prefixUrl, r.previous.GROUP),
                      srcHover: O(this.prefixUrl, r.previous.HOVER),
                      srcDown: O(this.prefixUrl, r.previous.DOWN),
                      onRelease: o,
                      onFocus: t,
                      onBlur: i,
                    })),
                    (this.nextButton = new e.Button({
                      element: this.nextButton
                        ? e.getElement(this.nextButton)
                        : null,
                      clickTimeThreshold: this.clickTimeThreshold,
                      clickDistThreshold: this.clickDistThreshold,
                      tooltip: e.getString('Tooltips.NextPage'),
                      srcRest: O(this.prefixUrl, r.next.REST),
                      srcGroup: O(this.prefixUrl, r.next.GROUP),
                      srcHover: O(this.prefixUrl, r.next.HOVER),
                      srcDown: O(this.prefixUrl, r.next.DOWN),
                      onRelease: n,
                      onFocus: t,
                      onBlur: i,
                    })),
                    this.navPrevNextWrap || this.previousButton.disable(),
                    (this.tileSources && this.tileSources.length) ||
                      this.nextButton.disable(),
                    s &&
                      ((this.paging = new e.ButtonGroup({
                        buttons: [this.previousButton, this.nextButton],
                        clickTimeThreshold: this.clickTimeThreshold,
                        clickDistThreshold: this.clickDistThreshold,
                      })),
                      (this.pagingControl = this.paging.element),
                      this.toolbar
                        ? this.toolbar.addControl(this.pagingControl, {
                            anchor: e.ControlAnchor.BOTTOM_RIGHT,
                          })
                        : this.addControl(this.pagingControl, {
                            anchor:
                              this.sequenceControlAnchor ||
                              e.ControlAnchor.TOP_LEFT,
                          }))),
                  this
                )
              },
              bindStandardControls: function () {
                var t = e.delegate(this, I),
                  i = e.delegate(this, B),
                  n = e.delegate(this, z),
                  o = e.delegate(this, D),
                  r = e.delegate(this, M),
                  s = e.delegate(this, N),
                  a = e.delegate(this, A),
                  l = e.delegate(this, $),
                  c = e.delegate(this, j),
                  d = e.delegate(this, U),
                  p = e.delegate(this, h),
                  g = e.delegate(this, u),
                  m = this.navImages,
                  v = [],
                  f = !0
                return (
                  this.showNavigationControl &&
                    ((this.zoomInButton ||
                      this.zoomOutButton ||
                      this.homeButton ||
                      this.fullPageButton ||
                      this.rotateLeftButton ||
                      this.rotateRightButton ||
                      this.flipButton) &&
                      (f = !1),
                    this.showZoomControl &&
                      (v.push(
                        (this.zoomInButton = new e.Button({
                          element: this.zoomInButton
                            ? e.getElement(this.zoomInButton)
                            : null,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                          tooltip: e.getString('Tooltips.ZoomIn'),
                          srcRest: O(this.prefixUrl, m.zoomIn.REST),
                          srcGroup: O(this.prefixUrl, m.zoomIn.GROUP),
                          srcHover: O(this.prefixUrl, m.zoomIn.HOVER),
                          srcDown: O(this.prefixUrl, m.zoomIn.DOWN),
                          onPress: t,
                          onRelease: i,
                          onClick: n,
                          onEnter: t,
                          onExit: i,
                          onFocus: p,
                          onBlur: g,
                        }))
                      ),
                      v.push(
                        (this.zoomOutButton = new e.Button({
                          element: this.zoomOutButton
                            ? e.getElement(this.zoomOutButton)
                            : null,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                          tooltip: e.getString('Tooltips.ZoomOut'),
                          srcRest: O(this.prefixUrl, m.zoomOut.REST),
                          srcGroup: O(this.prefixUrl, m.zoomOut.GROUP),
                          srcHover: O(this.prefixUrl, m.zoomOut.HOVER),
                          srcDown: O(this.prefixUrl, m.zoomOut.DOWN),
                          onPress: o,
                          onRelease: i,
                          onClick: r,
                          onEnter: o,
                          onExit: i,
                          onFocus: p,
                          onBlur: g,
                        }))
                      )),
                    this.showHomeControl &&
                      v.push(
                        (this.homeButton = new e.Button({
                          element: this.homeButton
                            ? e.getElement(this.homeButton)
                            : null,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                          tooltip: e.getString('Tooltips.Home'),
                          srcRest: O(this.prefixUrl, m.home.REST),
                          srcGroup: O(this.prefixUrl, m.home.GROUP),
                          srcHover: O(this.prefixUrl, m.home.HOVER),
                          srcDown: O(this.prefixUrl, m.home.DOWN),
                          onRelease: s,
                          onFocus: p,
                          onBlur: g,
                        }))
                      ),
                    this.showFullPageControl &&
                      v.push(
                        (this.fullPageButton = new e.Button({
                          element: this.fullPageButton
                            ? e.getElement(this.fullPageButton)
                            : null,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                          tooltip: e.getString('Tooltips.FullPage'),
                          srcRest: O(this.prefixUrl, m.fullpage.REST),
                          srcGroup: O(this.prefixUrl, m.fullpage.GROUP),
                          srcHover: O(this.prefixUrl, m.fullpage.HOVER),
                          srcDown: O(this.prefixUrl, m.fullpage.DOWN),
                          onRelease: a,
                          onFocus: p,
                          onBlur: g,
                        }))
                      ),
                    this.showRotationControl &&
                      (v.push(
                        (this.rotateLeftButton = new e.Button({
                          element: this.rotateLeftButton
                            ? e.getElement(this.rotateLeftButton)
                            : null,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                          tooltip: e.getString('Tooltips.RotateLeft'),
                          srcRest: O(this.prefixUrl, m.rotateleft.REST),
                          srcGroup: O(this.prefixUrl, m.rotateleft.GROUP),
                          srcHover: O(this.prefixUrl, m.rotateleft.HOVER),
                          srcDown: O(this.prefixUrl, m.rotateleft.DOWN),
                          onRelease: l,
                          onFocus: p,
                          onBlur: g,
                        }))
                      ),
                      v.push(
                        (this.rotateRightButton = new e.Button({
                          element: this.rotateRightButton
                            ? e.getElement(this.rotateRightButton)
                            : null,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                          tooltip: e.getString('Tooltips.RotateRight'),
                          srcRest: O(this.prefixUrl, m.rotateright.REST),
                          srcGroup: O(this.prefixUrl, m.rotateright.GROUP),
                          srcHover: O(this.prefixUrl, m.rotateright.HOVER),
                          srcDown: O(this.prefixUrl, m.rotateright.DOWN),
                          onRelease: c,
                          onFocus: p,
                          onBlur: g,
                        }))
                      )),
                    this.showFlipControl &&
                      v.push(
                        (this.flipButton = new e.Button({
                          element: this.flipButton
                            ? e.getElement(this.flipButton)
                            : null,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                          tooltip: e.getString('Tooltips.Flip'),
                          srcRest: O(this.prefixUrl, m.flip.REST),
                          srcGroup: O(this.prefixUrl, m.flip.GROUP),
                          srcHover: O(this.prefixUrl, m.flip.HOVER),
                          srcDown: O(this.prefixUrl, m.flip.DOWN),
                          onRelease: d,
                          onFocus: p,
                          onBlur: g,
                        }))
                      ),
                    f
                      ? ((this.buttonGroup = new e.ButtonGroup({
                          buttons: v,
                          clickTimeThreshold: this.clickTimeThreshold,
                          clickDistThreshold: this.clickDistThreshold,
                        })),
                        (this.navControl = this.buttonGroup.element),
                        this.addHandler('open', e.delegate(this, F)),
                        this.toolbar
                          ? this.toolbar.addControl(this.navControl, {
                              anchor:
                                this.navigationControlAnchor ||
                                e.ControlAnchor.TOP_LEFT,
                            })
                          : this.addControl(this.navControl, {
                              anchor:
                                this.navigationControlAnchor ||
                                e.ControlAnchor.TOP_LEFT,
                            }))
                      : (this.customButtons = v)),
                  this
                )
              },
              currentPage: function () {
                return this._sequenceIndex
              },
              goToPage: function (e) {
                return (
                  this.tileSources &&
                    e >= 0 &&
                    e < this.tileSources.length &&
                    ((this._sequenceIndex = e),
                    this._updateSequenceButtons(e),
                    this.open(this.tileSources[e]),
                    this.referenceStrip && this.referenceStrip.setFocus(e),
                    this.raiseEvent('page', { page: e })),
                  this
                )
              },
              addOverlay: function (t, i, n, s) {
                var a
                if (
                  ((a = e.isPlainObject(t)
                    ? t
                    : { element: t, location: i, placement: n, onDraw: s }),
                  (t = e.getElement(a.element)),
                  r(this.currentOverlays, t) >= 0)
                )
                  return this
                var l = o(this, a)
                return (
                  this.currentOverlays.push(l),
                  l.drawHTML(this.overlaysContainer, this.viewport),
                  this.raiseEvent('add-overlay', {
                    element: t,
                    location: a.location,
                    placement: a.placement,
                  }),
                  this
                )
              },
              updateOverlay: function (i, n, o) {
                var s
                return (
                  (i = e.getElement(i)),
                  (s = r(this.currentOverlays, i)) >= 0 &&
                    (this.currentOverlays[s].update(n, o),
                    (t[this.hash].forceRedraw = !0),
                    this.raiseEvent('update-overlay', {
                      element: i,
                      location: n,
                      placement: o,
                    })),
                  this
                )
              },
              removeOverlay: function (i) {
                var n
                return (
                  (i = e.getElement(i)),
                  (n = r(this.currentOverlays, i)) >= 0 &&
                    (this.currentOverlays[n].destroy(),
                    this.currentOverlays.splice(n, 1),
                    (t[this.hash].forceRedraw = !0),
                    this.raiseEvent('remove-overlay', { element: i })),
                  this
                )
              },
              clearOverlays: function () {
                for (; this.currentOverlays.length > 0; )
                  this.currentOverlays.pop().destroy()
                return (
                  (t[this.hash].forceRedraw = !0),
                  this.raiseEvent('clear-overlay', {}),
                  this
                )
              },
              getOverlayById: function (t) {
                var i
                return (
                  (t = e.getElement(t)),
                  (i = r(this.currentOverlays, t)) >= 0
                    ? this.currentOverlays[i]
                    : null
                )
              },
              _updateSequenceButtons: function (e) {
                this.nextButton &&
                  (this.tileSources && this.tileSources.length - 1 !== e
                    ? this.nextButton.enable()
                    : this.navPrevNextWrap || this.nextButton.disable()),
                  this.previousButton &&
                    (e > 0
                      ? this.previousButton.enable()
                      : this.navPrevNextWrap || this.previousButton.disable())
              },
              _showMessage: function (t) {
                this._hideMessage()
                var i = e.makeNeutralElement('div')
                i.appendChild(document.createTextNode(t)),
                  (this.messageDiv = e.makeCenteredNode(i)),
                  e.addClass(this.messageDiv, 'openseadragon-message'),
                  this.container.appendChild(this.messageDiv)
              },
              _hideMessage: function () {
                var e = this.messageDiv
                e && (e.parentNode.removeChild(e), delete this.messageDiv)
              },
              gestureSettingsByDeviceType: function (e) {
                switch (e) {
                  case 'mouse':
                    return this.gestureSettingsMouse
                  case 'touch':
                    return this.gestureSettingsTouch
                  case 'pen':
                    return this.gestureSettingsPen
                  default:
                    return this.gestureSettingsUnknown
                }
              },
              _drawOverlays: function () {
                var e,
                  t = this.currentOverlays.length
                for (e = 0; e < t; e++)
                  this.currentOverlays[e].drawHTML(
                    this.overlaysContainer,
                    this.viewport
                  )
              },
              _cancelPendingImages: function () {
                this._loadQueue = []
              },
              removeReferenceStrip: function () {
                ;(this.showReferenceStrip = !1),
                  this.referenceStrip &&
                    (this.referenceStrip.destroy(),
                    (this.referenceStrip = null))
              },
              addReferenceStrip: function () {
                if (((this.showReferenceStrip = !0), this.sequenceMode)) {
                  if (this.referenceStrip) return
                  this.tileSources.length &&
                    this.tileSources.length > 1 &&
                    ((this.referenceStrip = new e.ReferenceStrip({
                      id: this.referenceStripElement,
                      position: this.referenceStripPosition,
                      sizeRatio: this.referenceStripSizeRatio,
                      scroll: this.referenceStripScroll,
                      height: this.referenceStripHeight,
                      width: this.referenceStripWidth,
                      tileSources: this.tileSources,
                      prefixUrl: this.prefixUrl,
                      useCanvas: this.useCanvas,
                      viewer: this,
                    })),
                    this.referenceStrip.setFocus(this._sequenceIndex))
                } else
                  e.console.warn(
                    'Attempting to display a reference strip while "sequenceMode" is off.'
                  )
              },
              _addUpdatePixelDensityRatioEvent: function () {
                ;(this._updatePixelDensityRatioBind = this._updatePixelDensityRatio.bind(
                  this
                )),
                  e.addEvent(
                    window,
                    'resize',
                    this._updatePixelDensityRatioBind
                  )
              },
              _removeUpdatePixelDensityRatioEvent: function () {
                e.removeEvent(
                  window,
                  'resize',
                  this._updatePixelDensityRatioBind
                )
              },
              _updatePixelDensityRatio: function () {
                var t = e.pixelDensityRatio,
                  i = e.getCurrentPixelDensityRatio()
                t !== i &&
                  ((e.pixelDensityRatio = i),
                  this.world.resetItems(),
                  this.forceRedraw())
              },
              goToPreviousPage: function () {
                var e = this._sequenceIndex - 1
                this.navPrevNextWrap && e < 0 && (e += this.tileSources.length),
                  this.goToPage(e)
              },
              goToNextPage: function () {
                var e = this._sequenceIndex + 1
                this.navPrevNextWrap && e >= this.tileSources.length && (e = 0),
                  this.goToPage(e)
              },
              isAnimating: function () {
                return t[this.hash].animating
              },
            }
          )
      })(t),
      (function (e) {
        function t(e) {
          var t = {
            tracker: e.eventSource,
            position: e.position,
            quick: e.quick,
            shift: e.shift,
            originalEvent: e.originalEvent,
            preventDefaultAction: !1,
          }
          if (
            (this.viewer.raiseEvent('navigator-click', t),
            !t.preventDefaultAction &&
              e.quick &&
              this.viewer.viewport &&
              (this.panVertical || this.panHorizontal))
          ) {
            this.viewer.viewport.flipped &&
              (e.position.x = this.viewport.getContainerSize().x - e.position.x)
            var i = this.viewport.pointFromPixel(e.position)
            this.panVertical
              ? this.panHorizontal ||
                (i.x = this.viewer.viewport.getCenter(!0).x)
              : (i.y = this.viewer.viewport.getCenter(!0).y),
              this.viewer.viewport.panTo(i),
              this.viewer.viewport.applyConstraints()
          }
        }
        function i(e) {
          var t = {
            tracker: e.eventSource,
            position: e.position,
            delta: e.delta,
            speed: e.speed,
            direction: e.direction,
            shift: e.shift,
            originalEvent: e.originalEvent,
            preventDefaultAction: !1,
          }
          this.viewer.raiseEvent('navigator-drag', t),
            !t.preventDefaultAction &&
              this.viewer.viewport &&
              (this.panHorizontal || (e.delta.x = 0),
              this.panVertical || (e.delta.y = 0),
              this.viewer.viewport.flipped && (e.delta.x = -e.delta.x),
              this.viewer.viewport.panBy(
                this.viewport.deltaPointsFromPixels(e.delta)
              ),
              this.viewer.constrainDuringPan &&
                this.viewer.viewport.applyConstraints())
        }
        function n(e) {
          e.insideElementPressed &&
            this.viewer.viewport &&
            this.viewer.viewport.applyConstraints()
        }
        function o(e) {
          var t = {
            tracker: e.eventSource,
            position: e.position,
            scroll: e.scroll,
            shift: e.shift,
            originalEvent: e.originalEvent,
            preventDefault: e.preventDefault,
          }
          this.viewer.raiseEvent('navigator-scroll', t),
            (e.preventDefault = t.preventDefault)
        }
        function r(e, t) {
          s(e, 'rotate(' + t + 'deg)')
        }
        function s(e, t) {
          ;(e.style.webkitTransform = t),
            (e.style.mozTransform = t),
            (e.style.msTransform = t),
            (e.style.oTransform = t),
            (e.style.transform = t)
        }
        ;(e.Navigator = function (s) {
          var a,
            l,
            c,
            h,
            u = s.viewer,
            d = this
          function p(e) {
            r(d.displayRegionContainer, e),
              r(d.displayRegion, -e),
              d.viewport.setRotation(e)
          }
          ;(s.id
            ? ((this.element = document.getElementById(s.id)),
              (s.controlOptions = {
                anchor: e.ControlAnchor.NONE,
                attachToViewer: !1,
                autoFade: !1,
              }))
            : ((s.id = 'navigator-' + e.now()),
              (this.element = e.makeNeutralElement('div')),
              (s.controlOptions = {
                anchor: e.ControlAnchor.TOP_RIGHT,
                attachToViewer: !0,
                autoFade: s.autoFade,
              }),
              s.position &&
                ('BOTTOM_RIGHT' === s.position
                  ? (s.controlOptions.anchor = e.ControlAnchor.BOTTOM_RIGHT)
                  : 'BOTTOM_LEFT' === s.position
                  ? (s.controlOptions.anchor = e.ControlAnchor.BOTTOM_LEFT)
                  : 'TOP_RIGHT' === s.position
                  ? (s.controlOptions.anchor = e.ControlAnchor.TOP_RIGHT)
                  : 'TOP_LEFT' === s.position
                  ? (s.controlOptions.anchor = e.ControlAnchor.TOP_LEFT)
                  : 'ABSOLUTE' === s.position &&
                    ((s.controlOptions.anchor = e.ControlAnchor.ABSOLUTE),
                    (s.controlOptions.top = s.top),
                    (s.controlOptions.left = s.left),
                    (s.controlOptions.height = s.height),
                    (s.controlOptions.width = s.width)))),
          (this.element.id = s.id),
          (this.element.className += ' navigator'),
          ((s = e.extend(
            !0,
            { sizeRatio: e.DEFAULT_SETTINGS.navigatorSizeRatio },
            s,
            {
              element: this.element,
              tabIndex: -1,
              showNavigator: !1,
              mouseNavEnabled: !1,
              showNavigationControl: !1,
              showSequenceControl: !1,
              immediateRender: !0,
              blendTime: 0,
              animationTime: 0,
              autoResize: s.autoResize,
              minZoomImageRatio: 1,
              background: s.background,
              opacity: s.opacity,
              borderColor: s.borderColor,
              displayRegionColor: s.displayRegionColor,
            }
          )).minPixelRatio = this.minPixelRatio = u.minPixelRatio),
          e.setElementTouchActionNone(this.element),
          (this.borderWidth = 2),
          (this.fudge = new e.Point(1, 1)),
          (this.totalBorderWidths = new e.Point(
            2 * this.borderWidth,
            2 * this.borderWidth
          ).minus(this.fudge)),
          s.controlOptions.anchor !== e.ControlAnchor.NONE &&
            ((c = this.element.style),
            (h = this.borderWidth),
            (c.margin = '0px'),
            (c.border = h + 'px solid ' + s.borderColor),
            (c.padding = '0px'),
            (c.background = s.background),
            (c.opacity = s.opacity),
            (c.overflow = 'hidden')),
          (this.displayRegion = e.makeNeutralElement('div')),
          (this.displayRegion.id = this.element.id + '-displayregion'),
          (this.displayRegion.className = 'displayregion'),
          (function (e, t) {
            ;(e.position = 'relative'),
              (e.top = '0px'),
              (e.left = '0px'),
              (e.fontSize = '0px'),
              (e.overflow = 'hidden'),
              (e.border = t + 'px solid ' + s.displayRegionColor),
              (e.margin = '0px'),
              (e.padding = '0px'),
              (e.background = 'transparent'),
              (e.float = 'left'),
              (e.cssFloat = 'left'),
              (e.styleFloat = 'left'),
              (e.zIndex = 999999999),
              (e.cursor = 'default')
          })(this.displayRegion.style, this.borderWidth),
          e.setElementPointerEventsNone(this.displayRegion),
          e.setElementTouchActionNone(this.displayRegion),
          (this.displayRegionContainer = e.makeNeutralElement('div')),
          (this.displayRegionContainer.id =
            this.element.id + '-displayregioncontainer'),
          (this.displayRegionContainer.className = 'displayregioncontainer'),
          (this.displayRegionContainer.style.width = '100%'),
          (this.displayRegionContainer.style.height = '100%'),
          e.setElementPointerEventsNone(this.displayRegionContainer),
          e.setElementTouchActionNone(this.displayRegionContainer),
          u.addControl(this.element, s.controlOptions),
          (this._resizeWithViewer =
            s.controlOptions.anchor !== e.ControlAnchor.ABSOLUTE &&
            s.controlOptions.anchor !== e.ControlAnchor.NONE),
          s.width && s.height
            ? (this.setWidth(s.width), this.setHeight(s.height))
            : this._resizeWithViewer &&
              ((a = e.getElementSize(u.element)),
              (this.element.style.height =
                Math.round(a.y * s.sizeRatio) + 'px'),
              (this.element.style.width = Math.round(a.x * s.sizeRatio) + 'px'),
              (this.oldViewerSize = a),
              (l = e.getElementSize(this.element)),
              (this.elementArea = l.x * l.y)),
          (this.oldContainerSize = new e.Point(0, 0)),
          e.Viewer.apply(this, [s]),
          this.displayRegionContainer.appendChild(this.displayRegion),
          this.element
            .getElementsByTagName('div')[0]
            .appendChild(this.displayRegionContainer),
          s.navigatorRotate) &&
            (p(
              s.viewer.viewport
                ? s.viewer.viewport.getRotation()
                : s.viewer.degrees || 0
            ),
            s.viewer.addHandler('rotate', function (e) {
              p(e.degrees)
            }))
          this.innerTracker.destroy(),
            (this.innerTracker = new e.MouseTracker({
              userData: 'Navigator.innerTracker',
              element: this.element,
              dragHandler: e.delegate(this, i),
              clickHandler: e.delegate(this, t),
              releaseHandler: e.delegate(this, n),
              scrollHandler: e.delegate(this, o),
              preProcessEventHandler: function (e) {
                'wheel' === e.eventType && (e.preventDefault = !0)
              },
            })),
            (this.outerTracker.userData = 'Navigator.outerTracker'),
            e.setElementPointerEventsNone(this.canvas),
            e.setElementPointerEventsNone(this.container),
            this.addHandler('reset-size', function () {
              d.viewport && d.viewport.goHome(!0)
            }),
            u.world.addHandler('item-index-change', function (e) {
              window.setTimeout(function () {
                var t = d.world.getItemAt(e.previousIndex)
                d.world.setItemIndex(t, e.newIndex)
              }, 1)
            }),
            u.world.addHandler('remove-item', function (e) {
              var t = e.item,
                i = d._getMatchingItem(t)
              i && d.world.removeItem(i)
            }),
            this.update(u.viewport)
        }),
          e.extend(
            e.Navigator.prototype,
            e.EventSource.prototype,
            e.Viewer.prototype,
            {
              updateSize: function () {
                if (this.viewport) {
                  var t = new e.Point(
                    0 === this.container.clientWidth
                      ? 1
                      : this.container.clientWidth,
                    0 === this.container.clientHeight
                      ? 1
                      : this.container.clientHeight
                  )
                  t.equals(this.oldContainerSize) ||
                    (this.viewport.resize(t, !0),
                    this.viewport.goHome(!0),
                    (this.oldContainerSize = t),
                    this.drawer.clear(),
                    this.world.draw())
                }
              },
              setWidth: function (e) {
                ;(this.width = e),
                  (this.element.style.width =
                    'number' == typeof e ? e + 'px' : e),
                  (this._resizeWithViewer = !1)
              },
              setHeight: function (e) {
                ;(this.height = e),
                  (this.element.style.height =
                    'number' == typeof e ? e + 'px' : e),
                  (this._resizeWithViewer = !1)
              },
              setFlip: function (e) {
                return (
                  this.viewport.setFlip(e),
                  this.setDisplayTransform(
                    this.viewer.viewport.getFlip()
                      ? 'scale(-1,1)'
                      : 'scale(1,1)'
                  ),
                  this
                )
              },
              setDisplayTransform: function (e) {
                s(this.displayRegion, e), s(this.canvas, e), s(this.element, e)
              },
              update: function (t) {
                var i, n, o, r, s, a
                if (
                  ((i = e.getElementSize(this.viewer.element)),
                  this._resizeWithViewer &&
                    i.x &&
                    i.y &&
                    !i.equals(this.oldViewerSize) &&
                    ((this.oldViewerSize = i),
                    this.maintainSizeRatio || !this.elementArea
                      ? ((n = i.x * this.sizeRatio), (o = i.y * this.sizeRatio))
                      : ((n = Math.sqrt(this.elementArea * (i.x / i.y))),
                        (o = this.elementArea / n)),
                    (this.element.style.width = Math.round(n) + 'px'),
                    (this.element.style.height = Math.round(o) + 'px'),
                    this.elementArea || (this.elementArea = n * o),
                    this.updateSize()),
                  t && this.viewport)
                ) {
                  ;(r = t.getBoundsNoRotate(!0)),
                    (s = this.viewport.pixelFromPointNoRotate(
                      r.getTopLeft(),
                      !1
                    )),
                    (a = this.viewport
                      .pixelFromPointNoRotate(r.getBottomRight(), !1)
                      .minus(this.totalBorderWidths))
                  var l = this.displayRegion.style
                  ;(l.display = this.world.getItemCount() ? 'block' : 'none'),
                    (l.top = Math.round(s.y) + 'px'),
                    (l.left = Math.round(s.x) + 'px')
                  var c = Math.abs(s.x - a.x),
                    h = Math.abs(s.y - a.y)
                  ;(l.width = Math.round(Math.max(c, 0)) + 'px'),
                    (l.height = Math.round(Math.max(h, 0)) + 'px')
                }
              },
              addTiledImage: function (t) {
                var i = this,
                  n = t.originalTiledImage
                delete t.original
                var o = e.extend({}, t, {
                  success: function (e) {
                    var t = e.item
                    function o() {
                      i._matchBounds(t, n)
                    }
                    ;(t._originalForNavigator = n),
                      i._matchBounds(t, n, !0),
                      i._matchOpacity(t, n),
                      i._matchCompositeOperation(t, n),
                      n.addHandler('bounds-change', o),
                      n.addHandler('clip-change', o),
                      n.addHandler('opacity-change', function () {
                        i._matchOpacity(t, n)
                      }),
                      n.addHandler('composite-operation-change', function () {
                        i._matchCompositeOperation(t, n)
                      })
                  },
                })
                return e.Viewer.prototype.addTiledImage.apply(this, [o])
              },
              destroy: function () {
                return e.Viewer.prototype.destroy.apply(this)
              },
              _getMatchingItem: function (e) {
                for (var t, i = this.world.getItemCount(), n = 0; n < i; n++)
                  if ((t = this.world.getItemAt(n))._originalForNavigator === e)
                    return t
                return null
              },
              _matchBounds: function (e, t, i) {
                var n = t.getBoundsNoRotate()
                e.setPosition(n.getTopLeft(), i),
                  e.setWidth(n.width, i),
                  e.setRotation(t.getRotation(), i),
                  e.setClip(t.getClip()),
                  e.setFlip(t.getFlip())
              },
              _matchOpacity: function (e, t) {
                e.setOpacity(t.opacity)
              },
              _matchCompositeOperation: function (e, t) {
                e.setCompositeOperation(t.compositeOperation)
              },
            }
          )
      })(t),
      (function (e) {
        var t = {
          Errors: {
            Dzc: "Sorry, we don't support Deep Zoom Collections!",
            Dzi: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
            Xml: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
            ImageFormat: "Sorry, we don't support {0}-based Deep Zoom Images.",
            Security:
              'It looks like a security restriction stopped us from loading this Deep Zoom Image.',
            Status: 'This space unintentionally left blank ({0} {1}).',
            OpenFailed: 'Unable to open {0}: {1}',
          },
          Tooltips: {
            FullPage: 'Toggle full page',
            Home: 'Go home',
            ZoomIn: 'Zoom in',
            ZoomOut: 'Zoom out',
            NextPage: 'Next page',
            PreviousPage: 'Previous page',
            RotateLeft: 'Rotate left',
            RotateRight: 'Rotate right',
            Flip: 'Flip Horizontally',
          },
        }
        e.extend(e, {
          getString: function (i) {
            var n,
              o = i.split('.'),
              r = null,
              s = arguments,
              a = t
            for (n = 0; n < o.length - 1; n++) a = a[o[n]] || {}
            return (
              'string' != typeof (r = a[o[n]]) &&
                (e.console.error('Untranslated source string:', i), (r = '')),
              r.replace(/\{\d+\}/g, function (e) {
                var t = parseInt(e.match(/\d+/), 10) + 1
                return t < s.length ? s[t] : ''
              })
            )
          },
          setString: function (e, i) {
            var n,
              o = e.split('.'),
              r = t
            for (n = 0; n < o.length - 1; n++)
              r[o[n]] || (r[o[n]] = {}), (r = r[o[n]])
            r[o[n]] = i
          },
        })
      })(t),
      (function (e) {
        ;(e.Point = function (e, t) {
          ;(this.x = 'number' == typeof e ? e : 0),
            (this.y = 'number' == typeof t ? t : 0)
        }),
          (e.Point.prototype = {
            clone: function () {
              return new e.Point(this.x, this.y)
            },
            plus: function (t) {
              return new e.Point(this.x + t.x, this.y + t.y)
            },
            minus: function (t) {
              return new e.Point(this.x - t.x, this.y - t.y)
            },
            times: function (t) {
              return new e.Point(this.x * t, this.y * t)
            },
            divide: function (t) {
              return new e.Point(this.x / t, this.y / t)
            },
            negate: function () {
              return new e.Point(-this.x, -this.y)
            },
            distanceTo: function (e) {
              return Math.sqrt(
                Math.pow(this.x - e.x, 2) + Math.pow(this.y - e.y, 2)
              )
            },
            squaredDistanceTo: function (e) {
              return Math.pow(this.x - e.x, 2) + Math.pow(this.y - e.y, 2)
            },
            apply: function (t) {
              return new e.Point(t(this.x), t(this.y))
            },
            equals: function (t) {
              return t instanceof e.Point && this.x === t.x && this.y === t.y
            },
            rotate: function (t, i) {
              var n, o
              if (((i = i || new e.Point(0, 0)), t % 90 == 0)) {
                switch (e.positiveModulo(t, 360)) {
                  case 0:
                    ;(n = 1), (o = 0)
                    break
                  case 90:
                    ;(n = 0), (o = 1)
                    break
                  case 180:
                    ;(n = -1), (o = 0)
                    break
                  case 270:
                    ;(n = 0), (o = -1)
                }
              } else {
                var r = (t * Math.PI) / 180
                ;(n = Math.cos(r)), (o = Math.sin(r))
              }
              var s = n * (this.x - i.x) - o * (this.y - i.y) + i.x,
                a = o * (this.x - i.x) + n * (this.y - i.y) + i.y
              return new e.Point(s, a)
            },
            toString: function () {
              return (
                '(' +
                Math.round(100 * this.x) / 100 +
                ',' +
                Math.round(100 * this.y) / 100 +
                ')'
              )
            },
          })
      })(t),
      (function (e) {
        ;(e.TileSource = function (t, i, n, o, r, s) {
          var a,
            l,
            c = this,
            h = arguments
          if (
            ((a = e.isPlainObject(t)
              ? t
              : {
                  width: h[0],
                  height: h[1],
                  tileSize: h[2],
                  tileOverlap: h[3],
                  minLevel: h[4],
                  maxLevel: h[5],
                }),
            e.EventSource.call(this),
            e.extend(!0, this, a),
            !this.success)
          )
            for (l = 0; l < arguments.length; l++)
              if (e.isFunction(arguments[l])) {
                this.success = arguments[l]
                break
              }
          this.success &&
            this.addHandler('ready', function (e) {
              c.success(e)
            }),
            'string' === e.type(arguments[0]) && (this.url = arguments[0]),
            this.url
              ? ((this.aspectRatio = 1),
                (this.dimensions = new e.Point(10, 10)),
                (this._tileWidth = 0),
                (this._tileHeight = 0),
                (this.tileOverlap = 0),
                (this.minLevel = 0),
                (this.maxLevel = 0),
                (this.ready = !1),
                this.getImageInfo(this.url))
              : ((this.ready = !0),
                (this.aspectRatio =
                  a.width && a.height ? a.width / a.height : 1),
                (this.dimensions = new e.Point(a.width, a.height)),
                this.tileSize
                  ? ((this._tileWidth = this._tileHeight = this.tileSize),
                    delete this.tileSize)
                  : (this.tileWidth
                      ? ((this._tileWidth = this.tileWidth),
                        delete this.tileWidth)
                      : (this._tileWidth = 0),
                    this.tileHeight
                      ? ((this._tileHeight = this.tileHeight),
                        delete this.tileHeight)
                      : (this._tileHeight = 0)),
                (this.tileOverlap = a.tileOverlap ? a.tileOverlap : 0),
                (this.minLevel = a.minLevel ? a.minLevel : 0),
                (this.maxLevel =
                  void 0 !== a.maxLevel && null !== a.maxLevel
                    ? a.maxLevel
                    : a.width && a.height
                    ? Math.ceil(
                        Math.log(Math.max(a.width, a.height)) / Math.log(2)
                      )
                    : 0),
                this.success &&
                  e.isFunction(this.success) &&
                  this.success(this))
        }),
          (e.TileSource.prototype = {
            getTileSize: function (t) {
              return (
                e.console.error(
                  '[TileSource.getTileSize] is deprecated. Use TileSource.getTileWidth() and TileSource.getTileHeight() instead'
                ),
                this._tileWidth
              )
            },
            getTileWidth: function (e) {
              return this._tileWidth ? this._tileWidth : this.getTileSize(e)
            },
            getTileHeight: function (e) {
              return this._tileHeight ? this._tileHeight : this.getTileSize(e)
            },
            setMaxLevel: function (e) {
              ;(this.maxLevel = e), this._memoizeLevelScale()
            },
            getLevelScale: function (e) {
              return this._memoizeLevelScale(), this.getLevelScale(e)
            },
            _memoizeLevelScale: function () {
              var e,
                t = {}
              for (e = 0; e <= this.maxLevel; e++)
                t[e] = 1 / Math.pow(2, this.maxLevel - e)
              this.getLevelScale = function (e) {
                return t[e]
              }
            },
            getNumTiles: function (t) {
              var i = this.getLevelScale(t),
                n = Math.ceil((i * this.dimensions.x) / this.getTileWidth(t)),
                o = Math.ceil((i * this.dimensions.y) / this.getTileHeight(t))
              return new e.Point(n, o)
            },
            getPixelRatio: function (t) {
              var i = this.dimensions.times(this.getLevelScale(t)),
                n = (1 / i.x) * e.pixelDensityRatio,
                o = (1 / i.y) * e.pixelDensityRatio
              return new e.Point(n, o)
            },
            getClosestLevel: function () {
              var e, t
              for (
                e = this.minLevel + 1;
                e <= this.maxLevel &&
                !((t = this.getNumTiles(e)).x > 1 || t.y > 1);
                e++
              );
              return e - 1
            },
            getTileAtPoint: function (t, i) {
              var n =
                i.x >= 0 && i.x <= 1 && i.y >= 0 && i.y <= 1 / this.aspectRatio
              e.console.assert(
                n,
                '[TileSource.getTileAtPoint] must be called with a valid point.'
              )
              var o = this.dimensions.x * this.getLevelScale(t),
                r = i.x * o,
                s = i.y * o,
                a = Math.floor(r / this.getTileWidth(t)),
                l = Math.floor(s / this.getTileHeight(t))
              i.x >= 1 && (a = this.getNumTiles(t).x - 1)
              return (
                i.y >= 1 / this.aspectRatio - 1e-15 &&
                  (l = this.getNumTiles(t).y - 1),
                new e.Point(a, l)
              )
            },
            getTileBounds: function (t, i, n, o) {
              var r = this.dimensions.times(this.getLevelScale(t)),
                s = this.getTileWidth(t),
                a = this.getTileHeight(t),
                l = 0 === i ? 0 : s * i - this.tileOverlap,
                c = 0 === n ? 0 : a * n - this.tileOverlap,
                h = s + (0 === i ? 1 : 2) * this.tileOverlap,
                u = a + (0 === n ? 1 : 2) * this.tileOverlap,
                d = 1 / r.x
              return (
                (h = Math.min(h, r.x - l)),
                (u = Math.min(u, r.y - c)),
                o
                  ? new e.Rect(0, 0, h, u)
                  : new e.Rect(l * d, c * d, h * d, u * d)
              )
            },
            getImageInfo: function (t) {
              var i,
                n,
                o,
                r,
                s,
                a,
                l,
                c = this
              t &&
                (l = (a = (s = t.split('/'))[s.length - 1]).lastIndexOf('.')) >
                  -1 &&
                (s[s.length - 1] = a.slice(0, l))
              var h = null
              if (this.splitHashDataForPost) {
                var u = t.indexOf('#')
                ;-1 !== u && ((h = t.substring(u + 1)), (t = t.substr(0, u)))
              }
              ;(n = function (i) {
                'string' == typeof i && (i = e.parseXml(i))
                var n = e.TileSource.determineType(c, i, t)
                n
                  ? (void 0 ===
                      (r = n.prototype.configure.apply(c, [i, t, h]))
                        .ajaxWithCredentials &&
                      (r.ajaxWithCredentials = c.ajaxWithCredentials),
                    (o = new n(r)),
                    (c.ready = !0),
                    c.raiseEvent('ready', { tileSource: o }))
                  : c.raiseEvent('open-failed', {
                      message: 'Unable to load TileSource',
                      source: t,
                    })
              }),
                t.match(/\.js$/)
                  ? ((i = t.split('/').pop().replace('.js', '')),
                    e.jsonp({
                      url: t,
                      async: !1,
                      callbackName: i,
                      callback: n,
                    }))
                  : e.makeAjaxRequest({
                      url: t,
                      postData: h,
                      withCredentials: this.ajaxWithCredentials,
                      headers: this.ajaxHeaders,
                      success: function (t) {
                        var i = (function (t) {
                          var i,
                            n,
                            o = t.responseText,
                            r = t.status
                          if (!t)
                            throw new Error(e.getString('Errors.Security'))
                          if (200 !== t.status && 0 !== t.status)
                            throw (
                              ((i =
                                404 === (r = t.status)
                                  ? 'Not Found'
                                  : t.statusText),
                              new Error(e.getString('Errors.Status', r, i)))
                            )
                          if (o.match(/\s*<.*/))
                            try {
                              n =
                                t.responseXML && t.responseXML.documentElement
                                  ? t.responseXML
                                  : e.parseXml(o)
                            } catch (e) {
                              n = t.responseText
                            }
                          else if (o.match(/\s*[{[].*/))
                            try {
                              n = e.parseJSON(o)
                            } catch (e) {
                              n = o
                            }
                          else n = o
                          return n
                        })(t)
                        n(i)
                      },
                      error: function (i, n) {
                        var o
                        try {
                          o =
                            'HTTP ' +
                            i.status +
                            ' attempting to load TileSource: ' +
                            t
                        } catch (e) {
                          o =
                            (void 0 !== n && n.toString
                              ? n.toString()
                              : 'Unknown error') +
                            ' attempting to load TileSource: ' +
                            t
                        }
                        e.console.error(o),
                          c.raiseEvent('open-failed', {
                            message: o,
                            source: t,
                            postData: h,
                          })
                      },
                    })
            },
            supports: function (e, t) {
              return !1
            },
            configure: function (e, t, i) {
              throw new Error('Method not implemented.')
            },
            getTileUrl: function (e, t, i) {
              throw new Error('Method not implemented.')
            },
            getTilePostData: function (e, t, i) {
              return null
            },
            getTileAjaxHeaders: function (e, t, i) {
              return {}
            },
            getTileHashKey: function (e, t, i, n, o, r) {
              return o ? n + '+' + JSON.stringify(o) : n
            },
            tileExists: function (e, t, i) {
              var n = this.getNumTiles(e)
              return (
                e >= this.minLevel &&
                e <= this.maxLevel &&
                t >= 0 &&
                i >= 0 &&
                t < n.x &&
                i < n.y
              )
            },
          }),
          e.extend(!0, e.TileSource.prototype, e.EventSource.prototype),
          (e.TileSource.determineType = function (i, n, o) {
            var r
            for (r in t)
              if (
                r.match(/.+TileSource$/) &&
                e.isFunction(t[r]) &&
                e.isFunction(t[r].prototype.supports) &&
                t[r].prototype.supports.call(i, n, o)
              )
                return t[r]
            return (
              e.console.error('No TileSource was able to open %s %s', o, n),
              null
            )
          })
      })(t),
      (function (e) {
        function t(t, i) {
          var n,
            o,
            r = i.Image,
            s = r.Url,
            a = r.Format,
            l = r.Size,
            c = r.DisplayRect || [],
            h = parseInt(l.Width, 10),
            u = parseInt(l.Height, 10),
            d = parseInt(r.TileSize, 10),
            p = parseInt(r.Overlap, 10),
            g = []
          for (o = 0; o < c.length; o++)
            (n = c[o].Rect),
              g.push(
                new e.DisplayRect(
                  parseInt(n.X, 10),
                  parseInt(n.Y, 10),
                  parseInt(n.Width, 10),
                  parseInt(n.Height, 10),
                  parseInt(n.MinLevel, 10),
                  parseInt(n.MaxLevel, 10)
                )
              )
          return e.extend(
            !0,
            {
              width: h,
              height: u,
              tileSize: d,
              tileOverlap: p,
              minLevel: null,
              maxLevel: null,
              tilesUrl: s,
              fileFormat: a,
              displayRects: g,
            },
            i
          )
        }
        ;(e.DziTileSource = function (t, i, n, o, r, s, a, l, c) {
          var h, u, d, p
          if (
            ((p = e.isPlainObject(t)
              ? t
              : {
                  width: arguments[0],
                  height: arguments[1],
                  tileSize: arguments[2],
                  tileOverlap: arguments[3],
                  tilesUrl: arguments[4],
                  fileFormat: arguments[5],
                  displayRects: arguments[6],
                  minLevel: arguments[7],
                  maxLevel: arguments[8],
                }),
            (this._levelRects = {}),
            (this.tilesUrl = p.tilesUrl),
            (this.fileFormat = p.fileFormat),
            (this.displayRects = p.displayRects),
            this.displayRects)
          )
            for (h = this.displayRects.length - 1; h >= 0; h--)
              for (
                d = (u = this.displayRects[h]).minLevel;
                d <= u.maxLevel;
                d++
              )
                this._levelRects[d] || (this._levelRects[d] = []),
                  this._levelRects[d].push(u)
          e.TileSource.apply(this, [p])
        }),
          e.extend(e.DziTileSource.prototype, e.TileSource.prototype, {
            supports: function (e, t) {
              var i
              return (
                e.Image
                  ? (i = e.Image.xmlns)
                  : e.documentElement &&
                    (('Image' !== e.documentElement.localName &&
                      'Image' !== e.documentElement.tagName) ||
                      (i = e.documentElement.namespaceURI)),
                -1 !==
                  (i = (i || '').toLowerCase()).indexOf(
                    'schemas.microsoft.com/deepzoom/2008'
                  ) || -1 !== i.indexOf('schemas.microsoft.com/deepzoom/2009')
              )
            },
            configure: function (i, n, o) {
              var r
              return (
                (r = e.isPlainObject(i)
                  ? t(this, i)
                  : (function (i, n) {
                      if (!n || !n.documentElement)
                        throw new Error(e.getString('Errors.Xml'))
                      var o,
                        r,
                        s,
                        a,
                        l,
                        c = n.documentElement,
                        h = c.localName || c.tagName,
                        u = n.documentElement.namespaceURI,
                        d = null,
                        p = []
                      if ('Image' === h)
                        try {
                          if (
                            (void 0 ===
                              (a = c.getElementsByTagName('Size')[0]) &&
                              (a = c.getElementsByTagNameNS(u, 'Size')[0]),
                            (d = {
                              Image: {
                                xmlns:
                                  'http://schemas.microsoft.com/deepzoom/2008',
                                Url: c.getAttribute('Url'),
                                Format: c.getAttribute('Format'),
                                DisplayRect: null,
                                Overlap: parseInt(
                                  c.getAttribute('Overlap'),
                                  10
                                ),
                                TileSize: parseInt(
                                  c.getAttribute('TileSize'),
                                  10
                                ),
                                Size: {
                                  Height: parseInt(
                                    a.getAttribute('Height'),
                                    10
                                  ),
                                  Width: parseInt(a.getAttribute('Width'), 10),
                                },
                              },
                            }),
                            !e.imageFormatSupported(d.Image.Format))
                          )
                            throw new Error(
                              e.getString(
                                'Errors.ImageFormat',
                                d.Image.Format.toUpperCase()
                              )
                            )
                          for (
                            void 0 ===
                              (o = c.getElementsByTagName('DisplayRect')) &&
                              (o = c.getElementsByTagNameNS(
                                u,
                                'DisplayRect'
                              )[0]),
                              l = 0;
                            l < o.length;
                            l++
                          )
                            void 0 ===
                              (s = (r = o[l]).getElementsByTagName(
                                'Rect'
                              )[0]) &&
                              (s = r.getElementsByTagNameNS(u, 'Rect')[0]),
                              p.push({
                                Rect: {
                                  X: parseInt(s.getAttribute('X'), 10),
                                  Y: parseInt(s.getAttribute('Y'), 10),
                                  Width: parseInt(s.getAttribute('Width'), 10),
                                  Height: parseInt(
                                    s.getAttribute('Height'),
                                    10
                                  ),
                                  MinLevel: parseInt(
                                    r.getAttribute('MinLevel'),
                                    10
                                  ),
                                  MaxLevel: parseInt(
                                    r.getAttribute('MaxLevel'),
                                    10
                                  ),
                                },
                              })
                          return p.length && (d.Image.DisplayRect = p), t(i, d)
                        } catch (t) {
                          throw t instanceof Error
                            ? t
                            : new Error(e.getString('Errors.Dzi'))
                        }
                      else {
                        if ('Collection' === h)
                          throw new Error(e.getString('Errors.Dzc'))
                        if ('Error' === h) {
                          var g = c.getElementsByTagName('Message')[0]
                            .firstChild.nodeValue
                          throw new Error(g)
                        }
                      }
                      throw new Error(e.getString('Errors.Dzi'))
                    })(this, i)),
                n &&
                  !r.tilesUrl &&
                  ((r.tilesUrl = n.replace(
                    /([^/]+?)(\.(dzi|xml|js)?(\?[^/]*)?)?\/?$/,
                    '$1_files/'
                  )),
                  -1 !== n.search(/\.(dzi|xml|js)\?/)
                    ? (r.queryParams = n.match(/\?.*/))
                    : (r.queryParams = '')),
                r
              )
            },
            getTileUrl: function (e, t, i) {
              return [
                this.tilesUrl,
                e,
                '/',
                t,
                '_',
                i,
                '.',
                this.fileFormat,
                this.queryParams,
              ].join('')
            },
            tileExists: function (e, t, i) {
              var n,
                o,
                r,
                s,
                a,
                l,
                c,
                h = this._levelRects[e]
              if (
                (this.minLevel && e < this.minLevel) ||
                (this.maxLevel && e > this.maxLevel)
              )
                return !1
              if (!h || !h.length) return !0
              for (c = h.length - 1; c >= 0; c--)
                if (
                  !(e < (n = h[c]).minLevel || e > n.maxLevel) &&
                  ((o = this.getLevelScale(e)),
                  (r = n.x * o),
                  (s = n.y * o),
                  (a = r + n.width * o),
                  (l = s + n.height * o),
                  (r = Math.floor(r / this._tileWidth)),
                  (s = Math.floor(s / this._tileWidth)),
                  (a = Math.ceil(a / this._tileWidth)),
                  (l = Math.ceil(l / this._tileWidth)),
                  r <= t && t < a && s <= i && i < l)
                )
                  return !0
              return !1
            },
          })
      })(t),
      (function (e) {
        function i(e) {
          var t = Array.isArray(e.profile) ? e.profile[0] : e.profile,
            i =
              -1 !==
              [
                'http://library.stanford.edu/iiif/image-api/compliance.html#level0',
                'http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0',
                'http://iiif.io/api/image/2/level0.json',
                'level0',
                'https://iiif.io/api/image/3/level0.json',
              ].indexOf(t),
            n = !1
          return (
            2 === e.version &&
              e.profile.length > 1 &&
              e.profile[1].supports &&
              (n = -1 !== e.profile[1].supports.indexOf('sizeByW')),
            3 === e.version &&
              e.extraFeatures &&
              (n = -1 !== e.extraFeatures.indexOf('sizeByWh')),
            !i || n
          )
        }
        function n(e) {
          for (var t = [], i = 0; i < e.sizes.length; i++)
            t.push({
              url:
                e['@id'] +
                '/full/' +
                e.sizes[i].width +
                ',' +
                (3 === e.version ? e.sizes[i].height : '') +
                '/0/default.' +
                e.tileFormat,
              width: e.sizes[i].width,
              height: e.sizes[i].height,
            })
          return t.sort(function (e, t) {
            return e.width - t.width
          })
        }
        ;(e.IIIFTileSource = function (t) {
          if (
            (e.extend(!0, this, t), !(this.height && this.width && this['@id']))
          )
            throw new Error('IIIF required parameters not provided.')
          if (
            ((t.tileSizePerScaleFactor = {}),
            (this.tileFormat = this.tileFormat || 'jpg'),
            (this.version = t.version),
            this.tile_width && this.tile_height)
          )
            (t.tileWidth = this.tile_width), (t.tileHeight = this.tile_height)
          else if (this.tile_width) t.tileSize = this.tile_width
          else if (this.tile_height) t.tileSize = this.tile_height
          else if (this.tiles)
            if (1 === this.tiles.length)
              (t.tileWidth = this.tiles[0].width),
                (t.tileHeight = this.tiles[0].height || this.tiles[0].width),
                (this.scale_factors = this.tiles[0].scaleFactors)
            else {
              this.scale_factors = []
              for (var o = 0; o < this.tiles.length; o++)
                for (var r = 0; r < this.tiles[o].scaleFactors.length; r++) {
                  var s = this.tiles[o].scaleFactors[r]
                  this.scale_factors.push(s),
                    (t.tileSizePerScaleFactor[s] = {
                      width: this.tiles[o].width,
                      height: this.tiles[o].height || this.tiles[o].width,
                    })
                }
            }
          else if (i(t)) {
            for (
              var a = Math.min(this.height, this.width),
                l = [256, 512, 1024],
                c = [],
                h = 0;
              h < l.length;
              h++
            )
              l[h] <= a && c.push(l[h])
            c.length > 0
              ? (t.tileSize = Math.max.apply(null, c))
              : (t.tileSize = a)
          } else
            this.sizes && this.sizes.length > 0
              ? ((this.emulateLegacyImagePyramid = !0),
                (t.levels = n(this)),
                e.extend(!0, t, {
                  width: t.levels[t.levels.length - 1].width,
                  height: t.levels[t.levels.length - 1].height,
                  tileSize: Math.max(t.height, t.width),
                  tileOverlap: 0,
                  minLevel: 0,
                  maxLevel: t.levels.length - 1,
                }),
                (this.levels = t.levels))
              : e.console.error(
                  'Nothing in the info.json to construct image pyramids from'
                )
          if (!t.maxLevel && !this.emulateLegacyImagePyramid)
            if (this.scale_factors) {
              var u = Math.max.apply(null, this.scale_factors)
              t.maxLevel = Math.round(Math.log(u) * Math.LOG2E)
            } else
              t.maxLevel = Number(
                Math.ceil(Math.log(Math.max(this.width, this.height), 2))
              )
          e.TileSource.apply(this, [t])
        }),
          e.extend(e.IIIFTileSource.prototype, e.TileSource.prototype, {
            supports: function (e, t) {
              return (
                !(!e.protocol || 'http://iiif.io/api/image' !== e.protocol) ||
                !(
                  !e['@context'] ||
                  ('http://library.stanford.edu/iiif/image-api/1.1/context.json' !==
                    e['@context'] &&
                    'http://iiif.io/api/image/1/context.json' !== e['@context'])
                ) ||
                !(
                  !e.profile ||
                  0 !==
                    e.profile.indexOf(
                      'http://library.stanford.edu/iiif/image-api/compliance.html'
                    )
                ) ||
                !!(e.identifier && e.width && e.height) ||
                !(
                  !e.documentElement ||
                  'info' !== e.documentElement.tagName ||
                  'http://library.stanford.edu/iiif/image-api/ns/' !==
                    e.documentElement.namespaceURI
                )
              )
            },
            configure: function (i, n, o) {
              if (e.isPlainObject(i)) {
                if (i['@context']) {
                  var r = i['@context']
                  if (Array.isArray(r))
                    for (var s = 0; s < r.length; s++)
                      if (
                        'string' == typeof r[s] &&
                        (/^http:\/\/iiif\.io\/api\/image\/[1-3]\/context\.json$/.test(
                          r[s]
                        ) ||
                          'http://library.stanford.edu/iiif/image-api/1.1/context.json' ===
                            r[s])
                      ) {
                        r = r[s]
                        break
                      }
                  switch (r) {
                    case 'http://iiif.io/api/image/1/context.json':
                    case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':
                      i.version = 1
                      break
                    case 'http://iiif.io/api/image/2/context.json':
                      i.version = 2
                      break
                    case 'http://iiif.io/api/image/3/context.json':
                      i.version = 3
                      break
                    default:
                      e.console.error(
                        'Data has a @context property which contains no known IIIF context URI.'
                      )
                  }
                } else
                  (i['@context'] = 'http://iiif.io/api/image/1.0/context.json'),
                    (i['@id'] = n.replace('/info.json', '')),
                    (i.version = 1)
                if (
                  (!i['@id'] && i.id && (i['@id'] = i.id), i.preferredFormats)
                )
                  for (var a = 0; a < i.preferredFormats.length; a++)
                    if (t.imageFormatSupported(i.preferredFormats[a])) {
                      i.tileFormat = i.preferredFormats[a]
                      break
                    }
                return i
              }
              var l = (function (t) {
                if (!t || !t.documentElement)
                  throw new Error(e.getString('Errors.Xml'))
                var i = t.documentElement,
                  n = i.tagName,
                  o = null
                if ('info' === n)
                  try {
                    return (
                      (function t(i, n, o) {
                        var r, s
                        if (3 === i.nodeType && o)
                          (s = i.nodeValue.trim()).match(/^\d*$/) &&
                            (s = Number(s)),
                            n[o]
                              ? (e.isArray(n[o]) || (n[o] = [n[o]]),
                                n[o].push(s))
                              : (n[o] = s)
                        else if (1 === i.nodeType)
                          for (r = 0; r < i.childNodes.length; r++)
                            t(i.childNodes[r], n, i.nodeName)
                      })(i, (o = {})),
                      o
                    )
                  } catch (t) {
                    throw t instanceof Error
                      ? t
                      : new Error(e.getString('Errors.IIIF'))
                  }
                throw new Error(e.getString('Errors.IIIF'))
              })(i)
              return (
                (l['@context'] = 'http://iiif.io/api/image/1.0/context.json'),
                (l['@id'] = n.replace('/info.xml', '')),
                (l.version = 1),
                l
              )
            },
            getTileWidth: function (t) {
              if (this.emulateLegacyImagePyramid)
                return e.TileSource.prototype.getTileWidth.call(this, t)
              var i = Math.pow(2, this.maxLevel - t)
              return this.tileSizePerScaleFactor &&
                this.tileSizePerScaleFactor[i]
                ? this.tileSizePerScaleFactor[i].width
                : this._tileWidth
            },
            getTileHeight: function (t) {
              if (this.emulateLegacyImagePyramid)
                return e.TileSource.prototype.getTileHeight.call(this, t)
              var i = Math.pow(2, this.maxLevel - t)
              return this.tileSizePerScaleFactor &&
                this.tileSizePerScaleFactor[i]
                ? this.tileSizePerScaleFactor[i].height
                : this._tileHeight
            },
            getLevelScale: function (t) {
              if (this.emulateLegacyImagePyramid) {
                var i = NaN
                return (
                  this.levels.length > 0 &&
                    t >= this.minLevel &&
                    t <= this.maxLevel &&
                    (i =
                      this.levels[t].width / this.levels[this.maxLevel].width),
                  i
                )
              }
              return e.TileSource.prototype.getLevelScale.call(this, t)
            },
            getNumTiles: function (t) {
              return this.emulateLegacyImagePyramid
                ? this.getLevelScale(t)
                  ? new e.Point(1, 1)
                  : new e.Point(0, 0)
                : e.TileSource.prototype.getNumTiles.call(this, t)
            },
            getTileAtPoint: function (t, i) {
              return this.emulateLegacyImagePyramid
                ? new e.Point(0, 0)
                : e.TileSource.prototype.getTileAtPoint.call(this, t, i)
            },
            getTileUrl: function (e, t, i) {
              if (this.emulateLegacyImagePyramid) {
                var n = null
                return (
                  this.levels.length > 0 &&
                    e >= this.minLevel &&
                    e <= this.maxLevel &&
                    (n = this.levels[e].url),
                  n
                )
              }
              var o,
                r,
                s,
                a,
                l,
                c,
                h,
                u,
                d,
                p,
                g,
                m,
                v,
                f = Math.pow(0.5, this.maxLevel - e),
                y = Math.ceil(this.width * f),
                w = Math.ceil(this.height * f)
              return (
                (o = this.getTileWidth(e)),
                (r = this.getTileHeight(e)),
                (s = Math.ceil(o / f)),
                (a = Math.ceil(r / f)),
                (v =
                  1 === this.version
                    ? 'native.' + this.tileFormat
                    : 'default.' + this.tileFormat),
                y < o && w < r
                  ? ((p =
                      2 === this.version && y === this.width
                        ? 'full'
                        : 3 === this.version &&
                          y === this.width &&
                          w === this.height
                        ? 'max'
                        : 3 === this.version
                        ? y + ',' + w
                        : y + ','),
                    (l = 'full'))
                  : ((c = t * s),
                    (h = i * a),
                    (u = Math.min(s, this.width - c)),
                    (d = Math.min(a, this.height - h)),
                    (l =
                      0 === t &&
                      0 === i &&
                      u === this.width &&
                      d === this.height
                        ? 'full'
                        : [c, h, u, d].join(',')),
                    (g = Math.ceil(u * f)),
                    (m = Math.ceil(d * f)),
                    (p =
                      2 === this.version && g === this.width
                        ? 'full'
                        : 3 === this.version &&
                          g === this.width &&
                          m === this.height
                        ? 'max'
                        : 3 === this.version
                        ? g + ',' + m
                        : g + ',')),
                [this['@id'], l, p, '0', v].join('/')
              )
            },
            __testonly__: { canBeTiled: i, constructLevels: n },
          })
      })(t),
      (function (e) {
        ;(e.OsmTileSource = function (t, i, n, o, r) {
          var s
          ;((s = e.isPlainObject(t)
            ? t
            : {
                width: arguments[0],
                height: arguments[1],
                tileSize: arguments[2],
                tileOverlap: arguments[3],
                tilesUrl: arguments[4],
              }).width &&
            s.height) ||
            ((s.width = 65572864), (s.height = 65572864)),
            s.tileSize || ((s.tileSize = 256), (s.tileOverlap = 0)),
            s.tilesUrl || (s.tilesUrl = 'http://tile.openstreetmap.org/'),
            (s.minLevel = 8),
            e.TileSource.apply(this, [s])
        }),
          e.extend(e.OsmTileSource.prototype, e.TileSource.prototype, {
            supports: function (e, t) {
              return e.type && 'openstreetmaps' === e.type
            },
            configure: function (e, t, i) {
              return e
            },
            getTileUrl: function (e, t, i) {
              return this.tilesUrl + (e - 8) + '/' + t + '/' + i + '.png'
            },
          })
      })(t),
      (function (e) {
        ;(e.TmsTileSource = function (t, i, n, o, r) {
          var s
          s = e.isPlainObject(t)
            ? t
            : {
                width: arguments[0],
                height: arguments[1],
                tileSize: arguments[2],
                tileOverlap: arguments[3],
                tilesUrl: arguments[4],
              }
          var a,
            l = 256 * Math.ceil(s.width / 256),
            c = 256 * Math.ceil(s.height / 256)
          ;(a = l > c ? l / 256 : c / 256),
            (s.maxLevel = Math.ceil(Math.log(a) / Math.log(2)) - 1),
            (s.tileSize = 256),
            (s.width = l),
            (s.height = c),
            e.TileSource.apply(this, [s])
        }),
          e.extend(e.TmsTileSource.prototype, e.TileSource.prototype, {
            supports: function (e, t) {
              return e.type && 'tiledmapservice' === e.type
            },
            configure: function (e, t, i) {
              return e
            },
            getTileUrl: function (e, t, i) {
              var n = this.getNumTiles(e).y - 1
              return this.tilesUrl + e + '/' + t + '/' + (n - i) + '.png'
            },
          })
      })(t),
      (function (e) {
        ;(e.ZoomifyTileSource = function (e) {
          void 0 === e.tileSize && (e.tileSize = 256),
            void 0 === e.fileFormat &&
              ((e.fileFormat = 'jpg'), (this.fileFormat = e.fileFormat))
          var i = { x: e.width, y: e.height }
          for (
            e.imageSizes = [{ x: e.width, y: e.height }],
              e.gridSize = [this._getGridSize(e.width, e.height, e.tileSize)];
            parseInt(i.x, 10) > e.tileSize || parseInt(i.y, 10) > e.tileSize;

          )
            (i.x = Math.floor(i.x / 2)),
              (i.y = Math.floor(i.y / 2)),
              e.imageSizes.push({ x: i.x, y: i.y }),
              e.gridSize.push(this._getGridSize(i.x, i.y, e.tileSize))
          e.imageSizes.reverse(),
            e.gridSize.reverse(),
            (e.minLevel = 0),
            (e.maxLevel = e.gridSize.length - 1),
            t.TileSource.apply(this, [e])
        }),
          e.extend(e.ZoomifyTileSource.prototype, e.TileSource.prototype, {
            _getGridSize: function (e, t, i) {
              return { x: Math.ceil(e / i), y: Math.ceil(t / i) }
            },
            _calculateAbsoluteTileNumber: function (e, t, i) {
              for (var n = 0, o = {}, r = 0; r < e; r++)
                n += (o = this.gridSize[r]).x * o.y
              return (n += (o = this.gridSize[e]).x * i + t)
            },
            supports: function (e, t) {
              return e.type && 'zoomifytileservice' === e.type
            },
            configure: function (e, t, i) {
              return e
            },
            getTileUrl: function (e, t, i) {
              var n,
                o = this._calculateAbsoluteTileNumber(e, t, i)
              return (
                (n = Math.floor(o / 256)),
                this.tilesUrl +
                  'TileGroup' +
                  n +
                  '/' +
                  e +
                  '-' +
                  t +
                  '-' +
                  i +
                  '.' +
                  this.fileFormat
              )
            },
          })
      })(t),
      (function (e) {
        function t(e, t) {
          return t.levels
        }
        ;(e.LegacyTileSource = function (t) {
          var i, n, o
          e.isArray(t) && (i = { type: 'legacy-image-pyramid', levels: t }),
            (i.levels = (function (t) {
              var i,
                n,
                o = []
              for (n = 0; n < t.length; n++)
                (i = t[n]).height && i.width && i.url
                  ? o.push({
                      url: i.url,
                      width: Number(i.width),
                      height: Number(i.height),
                    })
                  : e.console.error(
                      'Unsupported image format: %s',
                      i.url ? i.url : '<no URL>'
                    )
              return o.sort(function (e, t) {
                return e.height - t.height
              })
            })(i.levels)),
            i.levels.length > 0
              ? ((n = i.levels[i.levels.length - 1].width),
                (o = i.levels[i.levels.length - 1].height))
              : ((n = 0),
                (o = 0),
                e.console.error('No supported image formats found')),
            e.extend(!0, i, {
              width: n,
              height: o,
              tileSize: Math.max(o, n),
              tileOverlap: 0,
              minLevel: 0,
              maxLevel: i.levels.length > 0 ? i.levels.length - 1 : 0,
            }),
            e.TileSource.apply(this, [i]),
            (this.levels = i.levels)
        }),
          e.extend(e.LegacyTileSource.prototype, e.TileSource.prototype, {
            supports: function (e, t) {
              return (
                (e.type && 'legacy-image-pyramid' === e.type) ||
                (e.documentElement &&
                  'legacy-image-pyramid' ===
                    e.documentElement.getAttribute('type'))
              )
            },
            configure: function (i, n, o) {
              return e.isPlainObject(i)
                ? t(this, i)
                : (function (i, n) {
                    if (!n || !n.documentElement)
                      throw new Error(e.getString('Errors.Xml'))
                    var o,
                      r,
                      s = n.documentElement,
                      a = s.tagName,
                      l = null,
                      c = []
                    if ('image' === a)
                      try {
                        for (
                          l = { type: s.getAttribute('type'), levels: [] },
                            c = s.getElementsByTagName('level'),
                            r = 0;
                          r < c.length;
                          r++
                        )
                          (o = c[r]),
                            l.levels.push({
                              url: o.getAttribute('url'),
                              width: parseInt(o.getAttribute('width'), 10),
                              height: parseInt(o.getAttribute('height'), 10),
                            })
                        return t(i, l)
                      } catch (e) {
                        throw e instanceof Error
                          ? e
                          : new Error(
                              'Unknown error parsing Legacy Image Pyramid XML.'
                            )
                      }
                    else {
                      if ('collection' === a)
                        throw new Error(
                          'Legacy Image Pyramid Collections not yet supported.'
                        )
                      if ('error' === a) throw new Error('Error: ' + n)
                    }
                    throw new Error('Unknown element ' + a)
                  })(this, i)
            },
            getLevelScale: function (e) {
              var t = NaN
              return (
                this.levels.length > 0 &&
                  e >= this.minLevel &&
                  e <= this.maxLevel &&
                  (t = this.levels[e].width / this.levels[this.maxLevel].width),
                t
              )
            },
            getNumTiles: function (t) {
              return this.getLevelScale(t)
                ? new e.Point(1, 1)
                : new e.Point(0, 0)
            },
            getTileUrl: function (e, t, i) {
              var n = null
              return (
                this.levels.length > 0 &&
                  e >= this.minLevel &&
                  e <= this.maxLevel &&
                  (n = this.levels[e].url),
                n
              )
            },
          })
      })(t),
      (function (e) {
        ;(e.ImageTileSource = function (t) {
          ;(t = e.extend(
            {
              buildPyramid: !0,
              crossOriginPolicy: !1,
              ajaxWithCredentials: !1,
              useCanvas: !0,
            },
            t
          )),
            e.TileSource.apply(this, [t])
        }),
          e.extend(e.ImageTileSource.prototype, e.TileSource.prototype, {
            supports: function (e, t) {
              return e.type && 'image' === e.type
            },
            configure: function (e, t, i) {
              return e
            },
            getImageInfo: function (t) {
              var i = (this._image = new Image()),
                n = this
              this.crossOriginPolicy &&
                (i.crossOrigin = this.crossOriginPolicy),
                this.ajaxWithCredentials &&
                  (i.useCredentials = this.ajaxWithCredentials),
                e.addEvent(i, 'load', function () {
                  ;(n.width = i.naturalWidth),
                    (n.height = i.naturalHeight),
                    (n.aspectRatio = n.width / n.height),
                    (n.dimensions = new e.Point(n.width, n.height)),
                    (n._tileWidth = n.width),
                    (n._tileHeight = n.height),
                    (n.tileOverlap = 0),
                    (n.minLevel = 0),
                    (n.levels = n._buildLevels()),
                    (n.maxLevel = n.levels.length - 1),
                    (n.ready = !0),
                    n.raiseEvent('ready', { tileSource: n })
                }),
                e.addEvent(i, 'error', function () {
                  n.raiseEvent('open-failed', {
                    message: 'Error loading image at ' + t,
                    source: t,
                  })
                }),
                (i.src = t)
            },
            getLevelScale: function (e) {
              var t = NaN
              return (
                e >= this.minLevel &&
                  e <= this.maxLevel &&
                  (t = this.levels[e].width / this.levels[this.maxLevel].width),
                t
              )
            },
            getNumTiles: function (t) {
              return this.getLevelScale(t)
                ? new e.Point(1, 1)
                : new e.Point(0, 0)
            },
            getTileUrl: function (e, t, i) {
              var n = null
              return (
                e >= this.minLevel &&
                  e <= this.maxLevel &&
                  (n = this.levels[e].url),
                n
              )
            },
            getContext2D: function (e, t, i) {
              var n = null
              return (
                e >= this.minLevel &&
                  e <= this.maxLevel &&
                  (n = this.levels[e].context2D),
                n
              )
            },
            destroy: function () {
              this._freeupCanvasMemory()
            },
            _buildLevels: function () {
              var t = [
                {
                  url: this._image.src,
                  width: this._image.naturalWidth,
                  height: this._image.naturalHeight,
                },
              ]
              if (!this.buildPyramid || !e.supportsCanvas || !this.useCanvas)
                return delete this._image, t
              var i = this._image.naturalWidth,
                n = this._image.naturalHeight,
                o = document.createElement('canvas'),
                r = o.getContext('2d')
              if (
                ((o.width = i),
                (o.height = n),
                r.drawImage(this._image, 0, 0, i, n),
                (t[0].context2D = r),
                delete this._image,
                e.isCanvasTainted(o))
              )
                return t
              for (; i >= 2 && n >= 2; ) {
                ;(i = Math.floor(i / 2)), (n = Math.floor(n / 2))
                var s = document.createElement('canvas'),
                  a = s.getContext('2d')
                ;(s.width = i),
                  (s.height = n),
                  a.drawImage(o, 0, 0, i, n),
                  t.splice(0, 0, { context2D: a, width: i, height: n }),
                  (o = s),
                  (r = a)
              }
              return t
            },
            _freeupCanvasMemory: function () {
              for (var e = 0; e < this.levels.length; e++)
                this.levels[e].context2D &&
                  ((this.levels[e].context2D.canvas.height = 0),
                  (this.levels[e].context2D.canvas.width = 0))
            },
          })
      })(t),
      (function (e) {
        e.TileSourceCollection = function (t, i, n, o) {
          e.console.error(
            'TileSourceCollection is deprecated; use World instead'
          )
        }
      })(t),
      (function (e) {
        function t(i) {
          e.requestAnimationFrame(function () {
            !(function (i) {
              var n
              i.shouldFade &&
                ((n = 1 - (e.now() - i.fadeBeginTime) / i.fadeLength),
                (n = Math.min(1, n)),
                (n = Math.max(0, n)),
                i.imgGroup && e.setElementOpacity(i.imgGroup, n, !0),
                n > 0 && t(i))
            })(i)
          })
        }
        function i(t, i) {
          t.element.disabled ||
            (i >= e.ButtonState.GROUP &&
              t.currentState === e.ButtonState.REST &&
              (!(function (t) {
                ;(t.shouldFade = !1),
                  t.imgGroup && e.setElementOpacity(t.imgGroup, 1, !0)
              })(t),
              (t.currentState = e.ButtonState.GROUP)),
            i >= e.ButtonState.HOVER &&
              t.currentState === e.ButtonState.GROUP &&
              (t.imgHover && (t.imgHover.style.visibility = ''),
              (t.currentState = e.ButtonState.HOVER)),
            i >= e.ButtonState.DOWN &&
              t.currentState === e.ButtonState.HOVER &&
              (t.imgDown && (t.imgDown.style.visibility = ''),
              (t.currentState = e.ButtonState.DOWN)))
        }
        function n(i, n) {
          i.element.disabled ||
            (n <= e.ButtonState.HOVER &&
              i.currentState === e.ButtonState.DOWN &&
              (i.imgDown && (i.imgDown.style.visibility = 'hidden'),
              (i.currentState = e.ButtonState.HOVER)),
            n <= e.ButtonState.GROUP &&
              i.currentState === e.ButtonState.HOVER &&
              (i.imgHover && (i.imgHover.style.visibility = 'hidden'),
              (i.currentState = e.ButtonState.GROUP)),
            n <= e.ButtonState.REST &&
              i.currentState === e.ButtonState.GROUP &&
              (!(function (i) {
                ;(i.shouldFade = !0),
                  (i.fadeBeginTime = e.now() + i.fadeDelay),
                  window.setTimeout(function () {
                    t(i)
                  }, i.fadeDelay)
              })(i),
              (i.currentState = e.ButtonState.REST)))
        }
        ;(e.ButtonState = { REST: 0, GROUP: 1, HOVER: 2, DOWN: 3 }),
          (e.Button = function (t) {
            var o = this
            e.EventSource.call(this),
              e.extend(
                !0,
                this,
                {
                  tooltip: null,
                  srcRest: null,
                  srcGroup: null,
                  srcHover: null,
                  srcDown: null,
                  clickTimeThreshold: e.DEFAULT_SETTINGS.clickTimeThreshold,
                  clickDistThreshold: e.DEFAULT_SETTINGS.clickDistThreshold,
                  fadeDelay: 0,
                  fadeLength: 2e3,
                  onPress: null,
                  onRelease: null,
                  onClick: null,
                  onEnter: null,
                  onExit: null,
                  onFocus: null,
                  onBlur: null,
                  userData: null,
                },
                t
              ),
              (this.element = t.element || e.makeNeutralElement('div')),
              t.element ||
                ((this.imgRest = e.makeTransparentImage(this.srcRest)),
                (this.imgGroup = e.makeTransparentImage(this.srcGroup)),
                (this.imgHover = e.makeTransparentImage(this.srcHover)),
                (this.imgDown = e.makeTransparentImage(this.srcDown)),
                (this.imgRest.alt = this.imgGroup.alt = this.imgHover.alt = this.imgDown.alt = this.tooltip),
                e.setElementPointerEventsNone(this.imgRest),
                e.setElementPointerEventsNone(this.imgGroup),
                e.setElementPointerEventsNone(this.imgHover),
                e.setElementPointerEventsNone(this.imgDown),
                (this.element.style.position = 'relative'),
                e.setElementTouchActionNone(this.element),
                (this.imgGroup.style.position = this.imgHover.style.position = this.imgDown.style.position =
                  'absolute'),
                (this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top =
                  '0px'),
                (this.imgGroup.style.left = this.imgHover.style.left = this.imgDown.style.left =
                  '0px'),
                (this.imgHover.style.visibility = this.imgDown.style.visibility =
                  'hidden'),
                e.Browser.vendor === e.BROWSERS.FIREFOX &&
                  e.Browser.version < 3 &&
                  (this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top =
                    ''),
                this.element.appendChild(this.imgRest),
                this.element.appendChild(this.imgGroup),
                this.element.appendChild(this.imgHover),
                this.element.appendChild(this.imgDown)),
              this.addHandler('press', this.onPress),
              this.addHandler('release', this.onRelease),
              this.addHandler('click', this.onClick),
              this.addHandler('enter', this.onEnter),
              this.addHandler('exit', this.onExit),
              this.addHandler('focus', this.onFocus),
              this.addHandler('blur', this.onBlur),
              (this.currentState = e.ButtonState.GROUP),
              (this.fadeBeginTime = null),
              (this.shouldFade = !1),
              (this.element.style.display = 'inline-block'),
              (this.element.style.position = 'relative'),
              (this.element.title = this.tooltip),
              (this.tracker = new e.MouseTracker({
                userData: 'Button.tracker',
                element: this.element,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                enterHandler: function (t) {
                  t.insideElementPressed
                    ? (i(o, e.ButtonState.DOWN),
                      o.raiseEvent('enter', { originalEvent: t.originalEvent }))
                    : t.buttonDownAny || i(o, e.ButtonState.HOVER)
                },
                focusHandler: function (e) {
                  o.tracker.enterHandler(e),
                    o.raiseEvent('focus', { originalEvent: e.originalEvent })
                },
                leaveHandler: function (t) {
                  n(o, e.ButtonState.GROUP),
                    t.insideElementPressed &&
                      o.raiseEvent('exit', { originalEvent: t.originalEvent })
                },
                blurHandler: function (e) {
                  o.tracker.leaveHandler(e),
                    o.raiseEvent('blur', { originalEvent: e.originalEvent })
                },
                pressHandler: function (t) {
                  i(o, e.ButtonState.DOWN),
                    o.raiseEvent('press', { originalEvent: t.originalEvent })
                },
                releaseHandler: function (t) {
                  t.insideElementPressed && t.insideElementReleased
                    ? (n(o, e.ButtonState.HOVER),
                      o.raiseEvent('release', {
                        originalEvent: t.originalEvent,
                      }))
                    : t.insideElementPressed
                    ? n(o, e.ButtonState.GROUP)
                    : i(o, e.ButtonState.HOVER)
                },
                clickHandler: function (e) {
                  e.quick &&
                    o.raiseEvent('click', { originalEvent: e.originalEvent })
                },
                keyHandler: function (e) {
                  13 === e.keyCode
                    ? (o.raiseEvent('click', {
                        originalEvent: e.originalEvent,
                      }),
                      o.raiseEvent('release', {
                        originalEvent: e.originalEvent,
                      }),
                      (e.preventDefault = !0))
                    : (e.preventDefault = !1)
                },
              })),
              n(this, e.ButtonState.REST)
          }),
          e.extend(e.Button.prototype, e.EventSource.prototype, {
            notifyGroupEnter: function () {
              i(this, e.ButtonState.GROUP)
            },
            notifyGroupExit: function () {
              n(this, e.ButtonState.REST)
            },
            disable: function () {
              this.notifyGroupExit(),
                (this.element.disabled = !0),
                e.setElementOpacity(this.element, 0.2, !0)
            },
            enable: function () {
              ;(this.element.disabled = !1),
                e.setElementOpacity(this.element, 1, !0),
                this.notifyGroupEnter()
            },
            destroy: function () {
              this.imgRest &&
                (this.element.removeChild(this.imgRest), (this.imgRest = null)),
                this.imgGroup &&
                  (this.element.removeChild(this.imgGroup),
                  (this.imgGroup = null)),
                this.imgHover &&
                  (this.element.removeChild(this.imgHover),
                  (this.imgHover = null)),
                this.imgDown &&
                  (this.element.removeChild(this.imgDown),
                  (this.imgDown = null)),
                this.removeAllHandlers(),
                this.tracker.destroy(),
                (this.element = null)
            },
          })
      })(t),
      (function (e) {
        ;(e.ButtonGroup = function (t) {
          e.extend(
            !0,
            this,
            {
              buttons: [],
              clickTimeThreshold: e.DEFAULT_SETTINGS.clickTimeThreshold,
              clickDistThreshold: e.DEFAULT_SETTINGS.clickDistThreshold,
              labelText: '',
            },
            t
          )
          var i,
            n = this.buttons.concat([]),
            o = this
          if (
            ((this.element = t.element || e.makeNeutralElement('div')),
            !t.group)
          )
            for (
              this.element.style.display = 'inline-block', i = 0;
              i < n.length;
              i++
            )
              this.element.appendChild(n[i].element)
          e.setElementTouchActionNone(this.element),
            (this.tracker = new e.MouseTracker({
              userData: 'ButtonGroup.tracker',
              element: this.element,
              clickTimeThreshold: this.clickTimeThreshold,
              clickDistThreshold: this.clickDistThreshold,
              enterHandler: function (e) {
                var t
                for (t = 0; t < o.buttons.length; t++)
                  o.buttons[t].notifyGroupEnter()
              },
              leaveHandler: function (e) {
                var t
                if (!e.insideElementPressed)
                  for (t = 0; t < o.buttons.length; t++)
                    o.buttons[t].notifyGroupExit()
              },
            }))
        }),
          (e.ButtonGroup.prototype = {
            emulateEnter: function () {
              this.tracker.enterHandler({ eventSource: this.tracker })
            },
            emulateLeave: function () {
              this.tracker.leaveHandler({ eventSource: this.tracker })
            },
            destroy: function () {
              for (; this.buttons.length; ) {
                var e = this.buttons.pop()
                this.element.removeChild(e.element), e.destroy()
              }
              this.tracker.destroy(), (this.element = null)
            },
          })
      })(t),
      (function (e) {
        ;(e.Rect = function (t, i, n, o, r) {
          var s, a
          ;(this.x = 'number' == typeof t ? t : 0),
            (this.y = 'number' == typeof i ? i : 0),
            (this.width = 'number' == typeof n ? n : 0),
            (this.height = 'number' == typeof o ? o : 0),
            (this.degrees = 'number' == typeof r ? r : 0),
            (this.degrees = e.positiveModulo(this.degrees, 360)),
            this.degrees >= 270
              ? ((s = this.getTopRight()),
                (this.x = s.x),
                (this.y = s.y),
                (a = this.height),
                (this.height = this.width),
                (this.width = a),
                (this.degrees -= 270))
              : this.degrees >= 180
              ? ((s = this.getBottomRight()),
                (this.x = s.x),
                (this.y = s.y),
                (this.degrees -= 180))
              : this.degrees >= 90 &&
                ((s = this.getBottomLeft()),
                (this.x = s.x),
                (this.y = s.y),
                (a = this.height),
                (this.height = this.width),
                (this.width = a),
                (this.degrees -= 90))
        }),
          (e.Rect.fromSummits = function (t, i, n) {
            var o = t.distanceTo(i),
              r = t.distanceTo(n),
              s = i.minus(t),
              a = Math.atan(s.y / s.x)
            return (
              s.x < 0 ? (a += Math.PI) : s.y < 0 && (a += 2 * Math.PI),
              new e.Rect(t.x, t.y, o, r, (a / Math.PI) * 180)
            )
          }),
          (e.Rect.prototype = {
            clone: function () {
              return new e.Rect(
                this.x,
                this.y,
                this.width,
                this.height,
                this.degrees
              )
            },
            getAspectRatio: function () {
              return this.width / this.height
            },
            getTopLeft: function () {
              return new e.Point(this.x, this.y)
            },
            getBottomRight: function () {
              return new e.Point(
                this.x + this.width,
                this.y + this.height
              ).rotate(this.degrees, this.getTopLeft())
            },
            getTopRight: function () {
              return new e.Point(this.x + this.width, this.y).rotate(
                this.degrees,
                this.getTopLeft()
              )
            },
            getBottomLeft: function () {
              return new e.Point(this.x, this.y + this.height).rotate(
                this.degrees,
                this.getTopLeft()
              )
            },
            getCenter: function () {
              return new e.Point(
                this.x + this.width / 2,
                this.y + this.height / 2
              ).rotate(this.degrees, this.getTopLeft())
            },
            getSize: function () {
              return new e.Point(this.width, this.height)
            },
            equals: function (t) {
              return (
                t instanceof e.Rect &&
                this.x === t.x &&
                this.y === t.y &&
                this.width === t.width &&
                this.height === t.height &&
                this.degrees === t.degrees
              )
            },
            times: function (t) {
              return new e.Rect(
                this.x * t,
                this.y * t,
                this.width * t,
                this.height * t,
                this.degrees
              )
            },
            translate: function (t) {
              return new e.Rect(
                this.x + t.x,
                this.y + t.y,
                this.width,
                this.height,
                this.degrees
              )
            },
            union: function (t) {
              var i = this.getBoundingBox(),
                n = t.getBoundingBox(),
                o = Math.min(i.x, n.x),
                r = Math.min(i.y, n.y),
                s = Math.max(i.x + i.width, n.x + n.width),
                a = Math.max(i.y + i.height, n.y + n.height)
              return new e.Rect(o, r, s - o, a - r)
            },
            intersection: function (t) {
              var i = 1e-10,
                n = [],
                o = this.getTopLeft()
              t.containsPoint(o, i) && n.push(o)
              var r = this.getTopRight()
              t.containsPoint(r, i) && n.push(r)
              var s = this.getBottomLeft()
              t.containsPoint(s, i) && n.push(s)
              var a = this.getBottomRight()
              t.containsPoint(a, i) && n.push(a)
              var l = t.getTopLeft()
              this.containsPoint(l, i) && n.push(l)
              var c = t.getTopRight()
              this.containsPoint(c, i) && n.push(c)
              var h = t.getBottomLeft()
              this.containsPoint(h, i) && n.push(h)
              var u = t.getBottomRight()
              this.containsPoint(u, i) && n.push(u)
              for (
                var d = this._getSegments(), p = t._getSegments(), g = 0;
                g < d.length;
                g++
              )
                for (var m = d[g], v = 0; v < p.length; v++) {
                  var f = p[v],
                    y = w(m[0], m[1], f[0], f[1])
                  y && n.push(y)
                }
              function w(t, n, o, r) {
                var s = n.minus(t),
                  a = r.minus(o),
                  l = -a.x * s.y + s.x * a.y
                if (0 === l) return null
                var c = (s.x * (t.y - o.y) - s.y * (t.x - o.x)) / l,
                  h = (a.x * (t.y - o.y) - a.y * (t.x - o.x)) / l
                return -1e-10 <= c && c <= 1 - i && -1e-10 <= h && h <= 1 - i
                  ? new e.Point(t.x + h * s.x, t.y + h * s.y)
                  : null
              }
              if (0 === n.length) return null
              for (
                var T = n[0].x, x = n[0].x, _ = n[0].y, S = n[0].y, E = 1;
                E < n.length;
                E++
              ) {
                var P = n[E]
                P.x < T && (T = P.x),
                  P.x > x && (x = P.x),
                  P.y < _ && (_ = P.y),
                  P.y > S && (S = P.y)
              }
              return new e.Rect(T, _, x - T, S - _)
            },
            _getSegments: function () {
              var e = this.getTopLeft(),
                t = this.getTopRight(),
                i = this.getBottomLeft(),
                n = this.getBottomRight()
              return [
                [e, t],
                [t, n],
                [n, i],
                [i, e],
              ]
            },
            rotate: function (t, i) {
              if (0 === (t = e.positiveModulo(t, 360))) return this.clone()
              i = i || this.getCenter()
              var n = this.getTopLeft().rotate(t, i),
                o = this.getTopRight().rotate(t, i).minus(n)
              o = o.apply(function (e) {
                return Math.abs(e) < 1e-15 ? 0 : e
              })
              var r = Math.atan(o.y / o.x)
              return (
                o.x < 0 ? (r += Math.PI) : o.y < 0 && (r += 2 * Math.PI),
                new e.Rect(
                  n.x,
                  n.y,
                  this.width,
                  this.height,
                  (r / Math.PI) * 180
                )
              )
            },
            getBoundingBox: function () {
              if (0 === this.degrees) return this.clone()
              var t = this.getTopLeft(),
                i = this.getTopRight(),
                n = this.getBottomLeft(),
                o = this.getBottomRight(),
                r = Math.min(t.x, i.x, n.x, o.x),
                s = Math.max(t.x, i.x, n.x, o.x),
                a = Math.min(t.y, i.y, n.y, o.y),
                l = Math.max(t.y, i.y, n.y, o.y)
              return new e.Rect(r, a, s - r, l - a)
            },
            getIntegerBoundingBox: function () {
              var t = this.getBoundingBox(),
                i = Math.floor(t.x),
                n = Math.floor(t.y),
                o = Math.ceil(t.width + t.x - i),
                r = Math.ceil(t.height + t.y - n)
              return new e.Rect(i, n, o, r)
            },
            containsPoint: function (e, t) {
              t = t || 0
              var i = this.getTopLeft(),
                n = this.getTopRight(),
                o = this.getBottomLeft(),
                r = n.minus(i),
                s = o.minus(i)
              return (
                (e.x - i.x) * r.x + (e.y - i.y) * r.y >= -t &&
                (e.x - n.x) * r.x + (e.y - n.y) * r.y <= t &&
                (e.x - i.x) * s.x + (e.y - i.y) * s.y >= -t &&
                (e.x - o.x) * s.x + (e.y - o.y) * s.y <= t
              )
            },
            toString: function () {
              return (
                '[' +
                Math.round(100 * this.x) / 100 +
                ', ' +
                Math.round(100 * this.y) / 100 +
                ', ' +
                Math.round(100 * this.width) / 100 +
                'x' +
                Math.round(100 * this.height) / 100 +
                ', ' +
                Math.round(100 * this.degrees) / 100 +
                'deg]'
              )
            },
          })
      })(t),
      (function (e) {
        var t = {}
        function i(e) {
          var t
          e.quick &&
            ((t =
              'horizontal' === this.scroll
                ? Math.floor(e.position.x / this.panelWidth)
                : Math.floor(e.position.y / this.panelHeight)),
            this.viewer.goToPage(t))
          this.element.focus()
        }
        function n(t) {
          if (((this.dragging = !0), this.element)) {
            var i = Number(this.element.style.marginLeft.replace('px', '')),
              n = Number(this.element.style.marginTop.replace('px', '')),
              o = Number(this.element.style.width.replace('px', '')),
              s = Number(this.element.style.height.replace('px', '')),
              a = e.getElementSize(this.viewer.canvas)
            'horizontal' === this.scroll
              ? -t.delta.x > 0
                ? i > -(o - a.x) &&
                  ((this.element.style.marginLeft = i + 2 * t.delta.x + 'px'),
                  r(this, a.x, i + 2 * t.delta.x))
                : -t.delta.x < 0 &&
                  i < 0 &&
                  ((this.element.style.marginLeft = i + 2 * t.delta.x + 'px'),
                  r(this, a.x, i + 2 * t.delta.x))
              : -t.delta.y > 0
              ? n > -(s - a.y) &&
                ((this.element.style.marginTop = n + 2 * t.delta.y + 'px'),
                r(this, a.y, n + 2 * t.delta.y))
              : -t.delta.y < 0 &&
                n < 0 &&
                ((this.element.style.marginTop = n + 2 * t.delta.y + 'px'),
                r(this, a.y, n + 2 * t.delta.y))
          }
        }
        function o(t) {
          if (this.element) {
            var i = Number(this.element.style.marginLeft.replace('px', '')),
              n = Number(this.element.style.marginTop.replace('px', '')),
              o = Number(this.element.style.width.replace('px', '')),
              s = Number(this.element.style.height.replace('px', '')),
              a = e.getElementSize(this.viewer.canvas)
            'horizontal' === this.scroll
              ? t.scroll > 0
                ? i > -(o - a.x) &&
                  ((this.element.style.marginLeft = i - 60 * t.scroll + 'px'),
                  r(this, a.x, i - 60 * t.scroll))
                : t.scroll < 0 &&
                  i < 0 &&
                  ((this.element.style.marginLeft = i - 60 * t.scroll + 'px'),
                  r(this, a.x, i - 60 * t.scroll))
              : t.scroll < 0
              ? n > a.y - s &&
                ((this.element.style.marginTop = n + 60 * t.scroll + 'px'),
                r(this, a.y, n + 60 * t.scroll))
              : t.scroll > 0 &&
                n < 0 &&
                ((this.element.style.marginTop = n + 60 * t.scroll + 'px'),
                r(this, a.y, n + 60 * t.scroll)),
              (t.preventDefault = !0)
          }
        }
        function r(t, i, n) {
          var o, r, s, a, l, c
          for (
            o = 'horizontal' === t.scroll ? t.panelWidth : t.panelHeight,
              r = Math.ceil(i / o) + 5,
              l = r =
                (r = (s = Math.ceil((Math.abs(n) + i) / o) + 1) - r) < 0
                  ? 0
                  : r;
            l < s && l < t.panels.length;
            l++
          )
            if (!(c = t.panels[l]).activePanel) {
              var h,
                u = t.viewer.tileSources[l]
              ;(h = u.referenceStripThumbnailUrl
                ? { type: 'image', url: u.referenceStripThumbnailUrl }
                : u),
                (a = new e.Viewer({
                  id: c.id,
                  tileSources: [h],
                  element: c,
                  navigatorSizeRatio: t.sizeRatio,
                  showNavigator: !1,
                  mouseNavEnabled: !1,
                  showNavigationControl: !1,
                  showSequenceControl: !1,
                  immediateRender: !0,
                  blendTime: 0,
                  animationTime: 0,
                  loadTilesWithAjax: t.viewer.loadTilesWithAjax,
                  ajaxHeaders: t.viewer.ajaxHeaders,
                  useCanvas: t.useCanvas,
                })),
                e.setElementPointerEventsNone(a.canvas),
                e.setElementPointerEventsNone(a.container),
                a.innerTracker.setTracking(!1),
                a.outerTracker.setTracking(!1),
                (t.miniViewers[c.id] = a),
                (c.activePanel = !0)
            }
        }
        function s(e) {
          var t = e.eventSource.element
          'horizontal' === this.scroll
            ? (t.style.marginBottom = '0px')
            : (t.style.marginLeft = '0px')
        }
        function a(t) {
          var i = t.eventSource.element
          'horizontal' === this.scroll
            ? (i.style.marginBottom = '-' + e.getElementSize(i).y / 2 + 'px')
            : (i.style.marginLeft = '-' + e.getElementSize(i).x / 2 + 'px')
        }
        function l(e) {
          if (e.ctrl || e.alt || e.meta) e.preventDefault = !1
          else
            switch (e.keyCode) {
              case 38:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: 1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              case 40:
              case 37:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: -1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              case 39:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: 1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              default:
                e.preventDefault = !1
            }
        }
        function c(e) {
          if (e.ctrl || e.alt || e.meta) e.preventDefault = !1
          else
            switch (e.keyCode) {
              case 61:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: 1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              case 45:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: -1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              case 48:
              case 119:
              case 87:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: 1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              case 115:
              case 83:
              case 97:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: -1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              case 100:
                o.call(this, {
                  eventSource: this.tracker,
                  position: null,
                  scroll: 1,
                  shift: null,
                }),
                  (e.preventDefault = !0)
                break
              default:
                e.preventDefault = !1
            }
        }
        ;(e.ReferenceStrip = function (h) {
          var u,
            d,
            p,
            g = h.viewer,
            m = e.getElementSize(g.element)
          for (
            h.id ||
              ((h.id = 'referencestrip-' + e.now()),
              (this.element = e.makeNeutralElement('div')),
              (this.element.id = h.id),
              (this.element.className = 'referencestrip')),
              h = e.extend(
                !0,
                {
                  sizeRatio: e.DEFAULT_SETTINGS.referenceStripSizeRatio,
                  position: e.DEFAULT_SETTINGS.referenceStripPosition,
                  scroll: e.DEFAULT_SETTINGS.referenceStripScroll,
                  clickTimeThreshold: e.DEFAULT_SETTINGS.clickTimeThreshold,
                },
                h,
                { element: this.element }
              ),
              e.extend(this, h),
              t[this.id] = { animating: !1 },
              this.minPixelRatio = this.viewer.minPixelRatio,
              this.element.tabIndex = 0,
              (d = this.element.style).marginTop = '0px',
              d.marginRight = '0px',
              d.marginBottom = '0px',
              d.marginLeft = '0px',
              d.left = '0px',
              d.bottom = '0px',
              d.border = '0px',
              d.background = '#000',
              d.position = 'relative',
              e.setElementTouchActionNone(this.element),
              e.setElementOpacity(this.element, 0.8),
              this.viewer = g,
              this.tracker = new e.MouseTracker({
                userData: 'ReferenceStrip.tracker',
                element: this.element,
                clickHandler: e.delegate(this, i),
                dragHandler: e.delegate(this, n),
                scrollHandler: e.delegate(this, o),
                enterHandler: e.delegate(this, s),
                leaveHandler: e.delegate(this, a),
                keyDownHandler: e.delegate(this, l),
                keyHandler: e.delegate(this, c),
                preProcessEventHandler: function (e) {
                  'wheel' === e.eventType && (e.preventDefault = !0)
                },
              }),
              h.width && h.height
                ? ((this.element.style.width = h.width + 'px'),
                  (this.element.style.height = h.height + 'px'),
                  g.addControl(this.element, {
                    anchor: e.ControlAnchor.BOTTOM_LEFT,
                  }))
                : 'horizontal' === h.scroll
                ? ((this.element.style.width =
                    m.x * h.sizeRatio * g.tileSources.length +
                    12 * g.tileSources.length +
                    'px'),
                  (this.element.style.height = m.y * h.sizeRatio + 'px'),
                  g.addControl(this.element, {
                    anchor: e.ControlAnchor.BOTTOM_LEFT,
                  }))
                : ((this.element.style.height =
                    m.y * h.sizeRatio * g.tileSources.length +
                    12 * g.tileSources.length +
                    'px'),
                  (this.element.style.width = m.x * h.sizeRatio + 'px'),
                  g.addControl(this.element, {
                    anchor: e.ControlAnchor.TOP_LEFT,
                  })),
              this.panelWidth = m.x * this.sizeRatio + 8,
              this.panelHeight = m.y * this.sizeRatio + 8,
              this.panels = [],
              this.miniViewers = {},
              p = 0;
            p < g.tileSources.length;
            p++
          )
            ((u = e.makeNeutralElement('div')).id = this.element.id + '-' + p),
              (u.style.width = this.panelWidth + 'px'),
              (u.style.height = this.panelHeight + 'px'),
              (u.style.display = 'inline'),
              (u.style.float = 'left'),
              (u.style.cssFloat = 'left'),
              (u.style.styleFloat = 'left'),
              (u.style.padding = '2px'),
              e.setElementTouchActionNone(u),
              e.setElementPointerEventsNone(u),
              this.element.appendChild(u),
              (u.activePanel = !1),
              this.panels.push(u)
          r(this, 'vertical' === this.scroll ? m.y : m.x, 0), this.setFocus(0)
        }),
          (e.ReferenceStrip.prototype = {
            setFocus: function (t) {
              var i,
                n = this.element.querySelector('#' + this.element.id + '-' + t),
                o = e.getElementSize(this.viewer.canvas),
                a = Number(this.element.style.width.replace('px', '')),
                l = Number(this.element.style.height.replace('px', '')),
                c = -Number(this.element.style.marginLeft.replace('px', '')),
                h = -Number(this.element.style.marginTop.replace('px', ''))
              this.currentSelected !== n &&
                (this.currentSelected &&
                  (this.currentSelected.style.background = '#000'),
                (this.currentSelected = n),
                (this.currentSelected.style.background = '#999'),
                'horizontal' === this.scroll
                  ? (i = Number(t) * (this.panelWidth + 3)) >
                    c + o.x - this.panelWidth
                    ? ((i = Math.min(i, a - o.x)),
                      (this.element.style.marginLeft = -i + 'px'),
                      r(this, o.x, -i))
                    : i < c &&
                      ((i = Math.max(0, i - o.x / 2)),
                      (this.element.style.marginLeft = -i + 'px'),
                      r(this, o.x, -i))
                  : (i = Number(t) * (this.panelHeight + 3)) >
                    h + o.y - this.panelHeight
                  ? ((i = Math.min(i, l - o.y)),
                    (this.element.style.marginTop = -i + 'px'),
                    r(this, o.y, -i))
                  : i < h &&
                    ((i = Math.max(0, i - o.y / 2)),
                    (this.element.style.marginTop = -i + 'px'),
                    r(this, o.y, -i)),
                (this.currentPage = t),
                s.call(this, { eventSource: this.tracker }))
            },
            update: function () {
              return !!t[this.id].animating
            },
            destroy: function () {
              if (this.miniViewers)
                for (var e in this.miniViewers) this.miniViewers[e].destroy()
              this.tracker.destroy(),
                this.element && this.viewer.removeControl(this.element)
            },
          })
      })(t),
      (function (e) {
        ;(e.DisplayRect = function (t, i, n, o, r, s) {
          e.Rect.apply(this, [t, i, n, o]),
            (this.minLevel = r),
            (this.maxLevel = s)
        }),
          e.extend(e.DisplayRect.prototype, e.Rect.prototype)
      })(t),
      (function (e) {
        ;(e.Spring = function (t) {
          var i = arguments
          'object' != typeof t &&
            (t = {
              initial: i.length && 'number' == typeof i[0] ? i[0] : void 0,
              springStiffness: i.length > 1 ? i[1].springStiffness : 5,
              animationTime: i.length > 1 ? i[1].animationTime : 1.5,
            }),
            e.console.assert(
              'number' == typeof t.springStiffness && 0 !== t.springStiffness,
              '[OpenSeadragon.Spring] options.springStiffness must be a non-zero number'
            ),
            e.console.assert(
              'number' == typeof t.animationTime && t.animationTime >= 0,
              '[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0'
            ),
            t.exponential && ((this._exponential = !0), delete t.exponential),
            e.extend(!0, this, t),
            (this.current = {
              value:
                'number' == typeof this.initial
                  ? this.initial
                  : this._exponential
                  ? 0
                  : 1,
              time: e.now(),
            }),
            e.console.assert(
              !this._exponential || 0 !== this.current.value,
              '[OpenSeadragon.Spring] value must be non-zero for exponential springs'
            ),
            (this.start = {
              value: this.current.value,
              time: this.current.time,
            }),
            (this.target = {
              value: this.current.value,
              time: this.current.time,
            }),
            this._exponential &&
              ((this.start._logValue = Math.log(this.start.value)),
              (this.target._logValue = Math.log(this.target.value)),
              (this.current._logValue = Math.log(this.current.value)))
        }),
          (e.Spring.prototype = {
            resetTo: function (t) {
              e.console.assert(
                !this._exponential || 0 !== t,
                '[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs'
              ),
                (this.start.value = this.target.value = this.current.value = t),
                (this.start.time = this.target.time = this.current.time = e.now()),
                this._exponential &&
                  ((this.start._logValue = Math.log(this.start.value)),
                  (this.target._logValue = Math.log(this.target.value)),
                  (this.current._logValue = Math.log(this.current.value)))
            },
            springTo: function (t) {
              e.console.assert(
                !this._exponential || 0 !== t,
                '[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs'
              ),
                (this.start.value = this.current.value),
                (this.start.time = this.current.time),
                (this.target.value = t),
                (this.target.time = this.start.time + 1e3 * this.animationTime),
                this._exponential &&
                  ((this.start._logValue = Math.log(this.start.value)),
                  (this.target._logValue = Math.log(this.target.value)))
            },
            shiftBy: function (t) {
              ;(this.start.value += t),
                (this.target.value += t),
                this._exponential &&
                  (e.console.assert(
                    0 !== this.target.value && 0 !== this.start.value,
                    '[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs'
                  ),
                  (this.start._logValue = Math.log(this.start.value)),
                  (this.target._logValue = Math.log(this.target.value)))
            },
            setExponential: function (t) {
              ;(this._exponential = t),
                this._exponential &&
                  (e.console.assert(
                    0 !== this.current.value &&
                      0 !== this.target.value &&
                      0 !== this.start.value,
                    '[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs'
                  ),
                  (this.start._logValue = Math.log(this.start.value)),
                  (this.target._logValue = Math.log(this.target.value)),
                  (this.current._logValue = Math.log(this.current.value)))
            },
            update: function () {
              var t, i
              ;(this.current.time = e.now()),
                this._exponential
                  ? ((t = this.start._logValue), (i = this.target._logValue))
                  : ((t = this.start.value), (i = this.target.value))
              var n,
                o,
                r =
                  this.current.time >= this.target.time
                    ? i
                    : t +
                      (i - t) *
                        ((n = this.springStiffness),
                        (o =
                          (this.current.time - this.start.time) /
                          (this.target.time - this.start.time)),
                        (1 - Math.exp(n * -o)) / (1 - Math.exp(-n))),
                s = this.current.value
              return (
                this._exponential
                  ? (this.current.value = Math.exp(r))
                  : (this.current.value = r),
                s !== this.current.value
              )
            },
            isAtTargetValue: function () {
              return this.current.value === this.target.value
            },
          })
      })(t),
      (function (e) {
        function t(t) {
          e.extend(
            !0,
            this,
            { timeout: e.DEFAULT_SETTINGS.timeout, jobId: null },
            t
          ),
            (this.image = null)
        }
        ;(t.prototype = {
          errorMsg: null,
          start: function () {
            var t = this,
              i = this.abort
            ;(this.image = new Image()),
              (this.image.onload = function () {
                t.finish(!0)
              }),
              (this.image.onabort = this.image.onerror = function () {
                ;(t.errorMsg = 'Image load aborted'), t.finish(!1)
              }),
              (this.jobId = window.setTimeout(function () {
                ;(t.errorMsg =
                  'Image load exceeded timeout (' + t.timeout + ' ms)'),
                  t.finish(!1)
              }, this.timeout)),
              this.loadWithAjax
                ? ((this.request = e.makeAjaxRequest({
                    url: this.src,
                    withCredentials: this.ajaxWithCredentials,
                    headers: this.ajaxHeaders,
                    responseType: 'arraybuffer',
                    postData: this.postData,
                    success: function (e) {
                      var i
                      try {
                        i = new window.Blob([e.response])
                      } catch (t) {
                        var n =
                          window.BlobBuilder ||
                          window.WebKitBlobBuilder ||
                          window.MozBlobBuilder ||
                          window.MSBlobBuilder
                        if ('TypeError' === t.name && n) {
                          var o = new n()
                          o.append(e.response), (i = o.getBlob())
                        }
                      }
                      0 === i.size &&
                        ((t.errorMsg = 'Empty image response.'), t.finish(!1))
                      var r = (window.URL || window.webkitURL).createObjectURL(
                        i
                      )
                      t.image.src = r
                    },
                    error: function (e) {
                      ;(t.errorMsg =
                        'Image load aborted - XHR error: Ajax returned ' +
                        e.status),
                        t.finish(!1)
                    },
                  })),
                  (this.abort = function () {
                    t.request.abort(), 'function' == typeof i && i()
                  }))
                : (!1 !== this.crossOriginPolicy &&
                    (this.image.crossOrigin = this.crossOriginPolicy),
                  (this.image.src = this.src))
          },
          finish: function (e) {
            ;(this.image.onload = this.image.onerror = this.image.onabort = null),
              e || (this.image = null),
              this.jobId && window.clearTimeout(this.jobId),
              this.callback(this)
          },
        }),
          (e.ImageLoader = function (t) {
            e.extend(
              !0,
              this,
              {
                jobLimit: e.DEFAULT_SETTINGS.imageLoaderLimit,
                timeout: e.DEFAULT_SETTINGS.timeout,
                jobQueue: [],
                jobsInProgress: 0,
              },
              t
            )
          }),
          (e.ImageLoader.prototype = {
            addJob: function (e) {
              var i = this,
                n = new t({
                  src: e.src,
                  loadWithAjax: e.loadWithAjax,
                  ajaxHeaders: e.loadWithAjax ? e.ajaxHeaders : null,
                  crossOriginPolicy: e.crossOriginPolicy,
                  ajaxWithCredentials: e.ajaxWithCredentials,
                  postData: e.postData,
                  callback: function (t) {
                    !(function (e, t, i) {
                      e.jobsInProgress--,
                        (!e.jobLimit || e.jobsInProgress < e.jobLimit) &&
                          e.jobQueue.length > 0 &&
                          (e.jobQueue.shift().start(), e.jobsInProgress++)
                      i(t.image, t.errorMsg, t.request)
                    })(i, t, e.callback)
                  },
                  abort: e.abort,
                  timeout: this.timeout,
                })
              !this.jobLimit || this.jobsInProgress < this.jobLimit
                ? (n.start(), this.jobsInProgress++)
                : this.jobQueue.push(n)
            },
            clear: function () {
              for (var e = 0; e < this.jobQueue.length; e++) {
                var t = this.jobQueue[e]
                'function' == typeof t.abort && t.abort()
              }
              this.jobQueue = []
            },
          })
      })(t),
      (function (e) {
        ;(e.Tile = function (t, i, n, o, r, s, a, l, c, h, u, d) {
          ;(this.level = t),
            (this.x = i),
            (this.y = n),
            (this.bounds = o),
            (this.sourceBounds = h),
            (this.exists = r),
            (this.url = s),
            (this.postData = u),
            (this.context2D = a),
            (this.loadWithAjax = l),
            (this.ajaxHeaders = c),
            void 0 === d &&
              (e.console.error(
                "Tile constructor needs 'cacheKey' variable: creation tile cache in Tile class is deprecated. TileSource.prototype.getTileHashKey will be used."
              ),
              (d = e.TileSource.prototype.getTileHashKey(t, i, n, s, c, u))),
            (this.cacheKey = d),
            (this.loaded = !1),
            (this.loading = !1),
            (this.element = null),
            (this.imgElement = null),
            (this.image = null),
            (this.style = null),
            (this.position = null),
            (this.size = null),
            (this.flipped = !1),
            (this.blendStart = null),
            (this.opacity = null),
            (this.squaredDistance = null),
            (this.visibility = null),
            (this.beingDrawn = !1),
            (this.lastTouchTime = 0),
            (this.isRightMost = !1),
            (this.isBottomMost = !1)
        }),
          (e.Tile.prototype = {
            toString: function () {
              return this.level + '/' + this.x + '_' + this.y
            },
            _hasTransparencyChannel: function () {
              return !!this.context2D || this.url.match('.png')
            },
            drawHTML: function (t) {
              this.cacheImageRecord
                ? this.loaded
                  ? (this.element ||
                      ((this.element = e.makeNeutralElement('div')),
                      (this.imgElement = this.cacheImageRecord
                        .getImage()
                        .cloneNode()),
                      (this.imgElement.style.msInterpolationMode =
                        'nearest-neighbor'),
                      (this.imgElement.style.width = '100%'),
                      (this.imgElement.style.height = '100%'),
                      (this.style = this.element.style),
                      (this.style.position = 'absolute')),
                    this.element.parentNode !== t &&
                      t.appendChild(this.element),
                    this.imgElement.parentNode !== this.element &&
                      this.element.appendChild(this.imgElement),
                    (this.style.top = this.position.y + 'px'),
                    (this.style.left = this.position.x + 'px'),
                    (this.style.height = this.size.y + 'px'),
                    (this.style.width = this.size.x + 'px'),
                    this.flipped && (this.style.transform = 'scaleX(-1)'),
                    e.setElementOpacity(this.element, this.opacity))
                  : e.console.warn(
                      "Attempting to draw tile %s when it's not yet loaded.",
                      this.toString()
                    )
                : e.console.warn(
                    "[Tile.drawHTML] attempting to draw tile %s when it's not cached",
                    this.toString()
                  )
            },
            drawCanvas: function (t, i, n, o, r) {
              var s,
                a,
                l,
                c = this.position.times(e.pixelDensityRatio),
                h = this.size.times(e.pixelDensityRatio)
              this.context2D || this.cacheImageRecord
                ? ((s =
                    this.context2D ||
                    this.cacheImageRecord.getRenderedContext()),
                  this.loaded && s
                    ? (t.save(),
                      (t.globalAlpha = this.opacity),
                      'number' == typeof n &&
                        1 !== n &&
                        ((c = c.times(n)), (h = h.times(n))),
                      o instanceof e.Point && (c = c.plus(o)),
                      1 === t.globalAlpha &&
                        this._hasTransparencyChannel() &&
                        (r &&
                          ((c.x = Math.round(c.x)),
                          (c.y = Math.round(c.y)),
                          (h.x = Math.round(h.x)),
                          (h.y = Math.round(h.y))),
                        t.clearRect(c.x, c.y, h.x, h.y)),
                      i({ context: t, tile: this, rendered: s }),
                      this.sourceBounds
                        ? ((a = Math.min(
                            this.sourceBounds.width,
                            s.canvas.width
                          )),
                          (l = Math.min(
                            this.sourceBounds.height,
                            s.canvas.height
                          )))
                        : ((a = s.canvas.width), (l = s.canvas.height)),
                      t.translate(c.x + h.x / 2, 0),
                      this.flipped && t.scale(-1, 1),
                      t.drawImage(
                        s.canvas,
                        0,
                        0,
                        a,
                        l,
                        -h.x / 2,
                        c.y,
                        h.x,
                        h.y
                      ),
                      t.restore())
                    : e.console.warn(
                        "Attempting to draw tile %s when it's not yet loaded.",
                        this.toString()
                      ))
                : e.console.warn(
                    "[Tile.drawCanvas] attempting to draw tile %s when it's not cached",
                    this.toString()
                  )
            },
            getScaleForEdgeSmoothing: function () {
              var t
              if (this.cacheImageRecord)
                t = this.cacheImageRecord.getRenderedContext()
              else {
                if (!this.context2D)
                  return (
                    e.console.warn(
                      "[Tile.drawCanvas] attempting to get tile scale %s when tile's not cached",
                      this.toString()
                    ),
                    1
                  )
                t = this.context2D
              }
              return t.canvas.width / (this.size.x * e.pixelDensityRatio)
            },
            getTranslationForEdgeSmoothing: function (t, i, n) {
              var o = Math.max(1, Math.ceil((n.x - i.x) / 2)),
                r = Math.max(1, Math.ceil((n.y - i.y) / 2))
              return new e.Point(o, r).minus(
                this.position
                  .times(e.pixelDensityRatio)
                  .times(t || 1)
                  .apply(function (e) {
                    return e % 1
                  })
              )
            },
            unload: function () {
              this.imgElement &&
                this.imgElement.parentNode &&
                this.imgElement.parentNode.removeChild(this.imgElement),
                this.element &&
                  this.element.parentNode &&
                  this.element.parentNode.removeChild(this.element),
                (this.element = null),
                (this.imgElement = null),
                (this.loaded = !1),
                (this.loading = !1)
            },
          })
      })(t),
      (function (e) {
        ;(e.OverlayPlacement = e.Placement),
          (e.OverlayRotationMode = e.freezeObject({
            NO_ROTATION: 1,
            EXACT: 2,
            BOUNDING_BOX: 3,
          })),
          (e.Overlay = function (t, i, n) {
            var o
            ;(o = e.isPlainObject(t)
              ? t
              : { element: t, location: i, placement: n }),
              (this.element = o.element),
              (this.style = o.element.style),
              this._init(o)
          }),
          (e.Overlay.prototype = {
            _init: function (t) {
              ;(this.location = t.location),
                (this.placement =
                  void 0 === t.placement ? e.Placement.TOP_LEFT : t.placement),
                (this.onDraw = t.onDraw),
                (this.checkResize = void 0 === t.checkResize || t.checkResize),
                (this.width = void 0 === t.width ? null : t.width),
                (this.height = void 0 === t.height ? null : t.height),
                (this.rotationMode =
                  t.rotationMode || e.OverlayRotationMode.EXACT),
                this.location instanceof e.Rect &&
                  ((this.width = this.location.width),
                  (this.height = this.location.height),
                  (this.location = this.location.getTopLeft()),
                  (this.placement = e.Placement.TOP_LEFT)),
                (this.scales = null !== this.width && null !== this.height),
                (this.bounds = new e.Rect(
                  this.location.x,
                  this.location.y,
                  this.width,
                  this.height
                )),
                (this.position = this.location)
            },
            adjust: function (t, i) {
              var n = e.Placement.properties[this.placement]
              n &&
                (n.isHorizontallyCentered
                  ? (t.x -= i.x / 2)
                  : n.isRight && (t.x -= i.x),
                n.isVerticallyCentered
                  ? (t.y -= i.y / 2)
                  : n.isBottom && (t.y -= i.y))
            },
            destroy: function () {
              var t = this.element,
                i = this.style
              t.parentNode &&
                (t.parentNode.removeChild(t),
                t.prevElementParent &&
                  ((i.display = 'none'), document.body.appendChild(t))),
                (this.onDraw = null),
                (i.top = ''),
                (i.left = ''),
                (i.position = ''),
                null !== this.width && (i.width = ''),
                null !== this.height && (i.height = '')
              var n = e.getCssPropertyWithVendorPrefix('transformOrigin'),
                o = e.getCssPropertyWithVendorPrefix('transform')
              n && o && ((i[n] = ''), (i[o] = ''))
            },
            drawHTML: function (t, i) {
              var n = this.element
              n.parentNode !== t &&
                ((n.prevElementParent = n.parentNode),
                (n.prevNextSibling = n.nextSibling),
                t.appendChild(n),
                (this.style.position = 'absolute'),
                (this.size = e.getElementSize(n)))
              var o = this._getOverlayPositionAndSize(i),
                r = o.position,
                s = (this.size = o.size),
                a = o.rotate
              if (this.onDraw) this.onDraw(r, s, this.element)
              else {
                var l = this.style
                ;(l.left = r.x + 'px'),
                  (l.top = r.y + 'px'),
                  null !== this.width && (l.width = s.x + 'px'),
                  null !== this.height && (l.height = s.y + 'px')
                var c = e.getCssPropertyWithVendorPrefix('transformOrigin'),
                  h = e.getCssPropertyWithVendorPrefix('transform')
                c &&
                  h &&
                  (a
                    ? ((l[c] = this._getTransformOrigin()),
                      (l[h] = 'rotate(' + a + 'deg)'))
                    : ((l[c] = ''), (l[h] = ''))),
                  (l.display = 'block')
              }
            },
            _getOverlayPositionAndSize: function (t) {
              var i = t.pixelFromPoint(this.location, !0),
                n = this._getSizeInPixels(t)
              this.adjust(i, n)
              var o = 0
              if (
                t.degrees &&
                this.rotationMode !== e.OverlayRotationMode.NO_ROTATION
              )
                if (
                  this.rotationMode === e.OverlayRotationMode.BOUNDING_BOX &&
                  null !== this.width &&
                  null !== this.height
                ) {
                  var r = new e.Rect(i.x, i.y, n.x, n.y),
                    s = this._getBoundingBox(r, t.degrees)
                  ;(i = s.getTopLeft()), (n = s.getSize())
                } else o = t.degrees
              return { position: i, size: n, rotate: o }
            },
            _getSizeInPixels: function (t) {
              var i = this.size.x,
                n = this.size.y
              if (null !== this.width || null !== this.height) {
                var o = t.deltaPixelsFromPointsNoRotate(
                  new e.Point(this.width || 0, this.height || 0),
                  !0
                )
                null !== this.width && (i = o.x),
                  null !== this.height && (n = o.y)
              }
              if (
                this.checkResize &&
                (null === this.width || null === this.height)
              ) {
                var r = (this.size = e.getElementSize(this.element))
                null === this.width && (i = r.x),
                  null === this.height && (n = r.y)
              }
              return new e.Point(i, n)
            },
            _getBoundingBox: function (e, t) {
              var i = this._getPlacementPoint(e)
              return e.rotate(t, i).getBoundingBox()
            },
            _getPlacementPoint: function (t) {
              var i = new e.Point(t.x, t.y),
                n = e.Placement.properties[this.placement]
              return (
                n &&
                  (n.isHorizontallyCentered
                    ? (i.x += t.width / 2)
                    : n.isRight && (i.x += t.width),
                  n.isVerticallyCentered
                    ? (i.y += t.height / 2)
                    : n.isBottom && (i.y += t.height)),
                i
              )
            },
            _getTransformOrigin: function () {
              var t = '',
                i = e.Placement.properties[this.placement]
              return i
                ? (i.isLeft ? (t = 'left') : i.isRight && (t = 'right'),
                  i.isTop ? (t += ' top') : i.isBottom && (t += ' bottom'),
                  t)
                : t
            },
            update: function (t, i) {
              var n = e.isPlainObject(t) ? t : { location: t, placement: i }
              this._init({
                location: n.location || this.location,
                placement:
                  void 0 !== n.placement ? n.placement : this.placement,
                onDraw: n.onDraw || this.onDraw,
                checkResize: n.checkResize || this.checkResize,
                width: void 0 !== n.width ? n.width : this.width,
                height: void 0 !== n.height ? n.height : this.height,
                rotationMode: n.rotationMode || this.rotationMode,
              })
            },
            getBounds: function (t) {
              e.console.assert(
                t,
                'A viewport must now be passed to Overlay.getBounds.'
              )
              var i = this.width,
                n = this.height
              if (null === i || null === n) {
                var o = t.deltaPointsFromPixelsNoRotate(this.size, !0)
                null === i && (i = o.x), null === n && (n = o.y)
              }
              var r = this.location.clone()
              return (
                this.adjust(r, new e.Point(i, n)),
                this._adjustBoundsForRotation(t, new e.Rect(r.x, r.y, i, n))
              )
            },
            _adjustBoundsForRotation: function (t, i) {
              if (
                !t ||
                0 === t.degrees ||
                this.rotationMode === e.OverlayRotationMode.EXACT
              )
                return i
              if (this.rotationMode === e.OverlayRotationMode.BOUNDING_BOX) {
                if (null === this.width || null === this.height) return i
                var n = this._getOverlayPositionAndSize(t)
                return t.viewerElementToViewportRectangle(
                  new e.Rect(n.position.x, n.position.y, n.size.x, n.size.y)
                )
              }
              return i.rotate(-t.degrees, this._getPlacementPoint(i))
            },
          })
      })(t),
      (function (e) {
        ;(e.Drawer = function (t) {
          e.console.assert(t.viewer, '[Drawer] options.viewer is required')
          var i = arguments
          if (
            (e.isPlainObject(t) ||
              (t = { source: i[0], viewport: i[1], element: i[2] }),
            e.console.assert(
              t.viewport,
              '[Drawer] options.viewport is required'
            ),
            e.console.assert(t.element, '[Drawer] options.element is required'),
            t.source &&
              e.console.error(
                '[Drawer] options.source is no longer accepted; use TiledImage instead'
              ),
            (this.viewer = t.viewer),
            (this.viewport = t.viewport),
            (this.debugGridColor =
              'string' == typeof t.debugGridColor
                ? [t.debugGridColor]
                : t.debugGridColor || e.DEFAULT_SETTINGS.debugGridColor),
            t.opacity &&
              e.console.error(
                '[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead'
              ),
            (this.useCanvas =
              e.supportsCanvas && (!this.viewer || this.viewer.useCanvas)),
            (this.container = e.getElement(t.element)),
            (this.canvas = e.makeNeutralElement(
              this.useCanvas ? 'canvas' : 'div'
            )),
            (this.context = this.useCanvas
              ? this.canvas.getContext('2d')
              : null),
            (this.sketchCanvas = null),
            (this.sketchContext = null),
            (this.element = this.container),
            (this.container.dir = 'ltr'),
            this.useCanvas)
          ) {
            var n = this._calculateCanvasSize()
            ;(this.canvas.width = n.x), (this.canvas.height = n.y)
          }
          ;(this.canvas.style.width = '100%'),
            (this.canvas.style.height = '100%'),
            (this.canvas.style.position = 'absolute'),
            e.setElementOpacity(this.canvas, this.opacity, !0),
            e.setElementPointerEventsNone(this.canvas),
            e.setElementTouchActionNone(this.canvas),
            (this.container.style.textAlign = 'left'),
            this.container.appendChild(this.canvas),
            (this._imageSmoothingEnabled = !0)
        }),
          (e.Drawer.prototype = {
            addOverlay: function (t, i, n, o) {
              return (
                e.console.error(
                  'drawer.addOverlay is deprecated. Use viewer.addOverlay instead.'
                ),
                this.viewer.addOverlay(t, i, n, o),
                this
              )
            },
            updateOverlay: function (t, i, n) {
              return (
                e.console.error(
                  'drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.'
                ),
                this.viewer.updateOverlay(t, i, n),
                this
              )
            },
            removeOverlay: function (t) {
              return (
                e.console.error(
                  'drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.'
                ),
                this.viewer.removeOverlay(t),
                this
              )
            },
            clearOverlays: function () {
              return (
                e.console.error(
                  'drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.'
                ),
                this.viewer.clearOverlays(),
                this
              )
            },
            viewportCoordToDrawerCoord: function (t) {
              var i = this.viewport.pixelFromPointNoRotate(t, !0)
              return new e.Point(
                i.x * e.pixelDensityRatio,
                i.y * e.pixelDensityRatio
              )
            },
            clipWithPolygons: function (e, t) {
              if (this.useCanvas) {
                var i = this._getContext(t)
                i.beginPath(),
                  e.forEach(function (e) {
                    e.forEach(function (e, t) {
                      i[0 === t ? 'moveTo' : 'lineTo'](e.x, e.y)
                    })
                  }),
                  i.clip()
              }
            },
            setOpacity: function (t) {
              e.console.error(
                'drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.'
              )
              for (var i = this.viewer.world, n = 0; n < i.getItemCount(); n++)
                i.getItemAt(n).setOpacity(t)
              return this
            },
            getOpacity: function () {
              e.console.error(
                'drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.'
              )
              for (
                var t = this.viewer.world, i = 0, n = 0;
                n < t.getItemCount();
                n++
              ) {
                var o = t.getItemAt(n).getOpacity()
                o > i && (i = o)
              }
              return i
            },
            needsUpdate: function () {
              return (
                e.console.error(
                  '[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead.'
                ),
                this.viewer.world.needsDraw()
              )
            },
            numTilesLoaded: function () {
              return (
                e.console.error(
                  '[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead.'
                ),
                this.viewer.tileCache.numTilesLoaded()
              )
            },
            reset: function () {
              return (
                e.console.error(
                  '[Drawer.reset] this function is deprecated. Use World.resetItems instead.'
                ),
                this.viewer.world.resetItems(),
                this
              )
            },
            update: function () {
              return (
                e.console.error(
                  '[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead.'
                ),
                this.clear(),
                this.viewer.world.draw(),
                this
              )
            },
            canRotate: function () {
              return this.useCanvas
            },
            destroy: function () {
              ;(this.canvas.width = 1),
                (this.canvas.height = 1),
                (this.sketchCanvas = null),
                (this.sketchContext = null)
            },
            clear: function () {
              if (((this.canvas.innerHTML = ''), this.useCanvas)) {
                var e = this._calculateCanvasSize()
                if (
                  (this.canvas.width !== e.x || this.canvas.height !== e.y) &&
                  ((this.canvas.width = e.x),
                  (this.canvas.height = e.y),
                  this._updateImageSmoothingEnabled(this.context),
                  null !== this.sketchCanvas)
                ) {
                  var t = this._calculateSketchCanvasSize()
                  ;(this.sketchCanvas.width = t.x),
                    (this.sketchCanvas.height = t.y),
                    this._updateImageSmoothingEnabled(this.sketchContext)
                }
                this._clear()
              }
            },
            _clear: function (e, t) {
              if (this.useCanvas) {
                var i = this._getContext(e)
                if (t) i.clearRect(t.x, t.y, t.width, t.height)
                else {
                  var n = i.canvas
                  i.clearRect(0, 0, n.width, n.height)
                }
              }
            },
            viewportToDrawerRectangle: function (t) {
              var i = this.viewport.pixelFromPointNoRotate(t.getTopLeft(), !0),
                n = this.viewport.deltaPixelsFromPointsNoRotate(t.getSize(), !0)
              return new e.Rect(
                i.x * e.pixelDensityRatio,
                i.y * e.pixelDensityRatio,
                n.x * e.pixelDensityRatio,
                n.y * e.pixelDensityRatio
              )
            },
            drawTile: function (t, i, n, o, r, s) {
              if (
                (e.console.assert(t, '[Drawer.drawTile] tile is required'),
                e.console.assert(
                  i,
                  '[Drawer.drawTile] drawingHandler is required'
                ),
                this.useCanvas)
              ) {
                var a = this._getContext(n)
                ;(o = o || 1), t.drawCanvas(a, i, o, r, s)
              } else t.drawHTML(this.canvas)
            },
            _getContext: function (e) {
              var t = this.context
              if (e) {
                if (null === this.sketchCanvas) {
                  this.sketchCanvas = document.createElement('canvas')
                  var i = this._calculateSketchCanvasSize()
                  if (
                    ((this.sketchCanvas.width = i.x),
                    (this.sketchCanvas.height = i.y),
                    (this.sketchContext = this.sketchCanvas.getContext('2d')),
                    0 === this.viewport.getRotation())
                  ) {
                    var n = this
                    this.viewer.addHandler('rotate', function e() {
                      if (0 !== n.viewport.getRotation()) {
                        n.viewer.removeHandler('rotate', e)
                        var t = n._calculateSketchCanvasSize()
                        ;(n.sketchCanvas.width = t.x),
                          (n.sketchCanvas.height = t.y)
                      }
                    })
                  }
                  this._updateImageSmoothingEnabled(this.sketchContext)
                }
                t = this.sketchContext
              }
              return t
            },
            saveContext: function (e) {
              this.useCanvas && this._getContext(e).save()
            },
            restoreContext: function (e) {
              this.useCanvas && this._getContext(e).restore()
            },
            setClip: function (e, t) {
              if (this.useCanvas) {
                var i = this._getContext(t)
                i.beginPath(), i.rect(e.x, e.y, e.width, e.height), i.clip()
              }
            },
            drawRectangle: function (e, t, i) {
              if (this.useCanvas) {
                var n = this._getContext(i)
                n.save(),
                  (n.fillStyle = t),
                  n.fillRect(e.x, e.y, e.width, e.height),
                  n.restore()
              }
            },
            blendSketch: function (t, i, n, o) {
              var r = t
              if (
                (e.isPlainObject(r) ||
                  (r = {
                    opacity: t,
                    scale: i,
                    translate: n,
                    compositeOperation: o,
                  }),
                this.useCanvas && this.sketchCanvas)
              ) {
                ;(t = r.opacity), (o = r.compositeOperation)
                var s = r.bounds
                if (
                  (this.context.save(),
                  (this.context.globalAlpha = t),
                  o && (this.context.globalCompositeOperation = o),
                  s)
                )
                  s.x < 0 && ((s.width += s.x), (s.x = 0)),
                    s.x + s.width > this.canvas.width &&
                      (s.width = this.canvas.width - s.x),
                    s.y < 0 && ((s.height += s.y), (s.y = 0)),
                    s.y + s.height > this.canvas.height &&
                      (s.height = this.canvas.height - s.y),
                    this.context.drawImage(
                      this.sketchCanvas,
                      s.x,
                      s.y,
                      s.width,
                      s.height,
                      s.x,
                      s.y,
                      s.width,
                      s.height
                    )
                else {
                  i = r.scale || 1
                  var a =
                      (n = r.translate) instanceof e.Point
                        ? n
                        : new e.Point(0, 0),
                    l = 0,
                    c = 0
                  if (n) {
                    var h = this.sketchCanvas.width - this.canvas.width,
                      u = this.sketchCanvas.height - this.canvas.height
                    ;(l = Math.round(h / 2)), (c = Math.round(u / 2))
                  }
                  this.context.drawImage(
                    this.sketchCanvas,
                    a.x - l * i,
                    a.y - c * i,
                    (this.canvas.width + 2 * l) * i,
                    (this.canvas.height + 2 * c) * i,
                    -l,
                    -c,
                    this.canvas.width + 2 * l,
                    this.canvas.height + 2 * c
                  )
                }
                this.context.restore()
              }
            },
            drawDebugInfo: function (t, i, n, o) {
              if (this.useCanvas) {
                var r =
                    this.viewer.world.getIndexOfItem(o) %
                    this.debugGridColor.length,
                  s = this.context
                s.save(),
                  (s.lineWidth = 2 * e.pixelDensityRatio),
                  (s.font =
                    'small-caps bold ' + 13 * e.pixelDensityRatio + 'px arial'),
                  (s.strokeStyle = this.debugGridColor[r]),
                  (s.fillStyle = this.debugGridColor[r]),
                  0 !== this.viewport.degrees &&
                    this._offsetForRotation({ degrees: this.viewport.degrees }),
                  o.getRotation(!0) % 360 != 0 &&
                    this._offsetForRotation({
                      degrees: o.getRotation(!0),
                      point: o.viewport.pixelFromPointNoRotate(
                        o._getRotationPoint(!0),
                        !0
                      ),
                    }),
                  0 === o.viewport.degrees &&
                    o.getRotation(!0) % 360 == 0 &&
                    o._drawer.viewer.viewport.getFlip() &&
                    o._drawer._flip(),
                  s.strokeRect(
                    t.position.x * e.pixelDensityRatio,
                    t.position.y * e.pixelDensityRatio,
                    t.size.x * e.pixelDensityRatio,
                    t.size.y * e.pixelDensityRatio
                  )
                var a = (t.position.x + t.size.x / 2) * e.pixelDensityRatio,
                  l = (t.position.y + t.size.y / 2) * e.pixelDensityRatio
                s.translate(a, l),
                  s.rotate((Math.PI / 180) * -this.viewport.degrees),
                  s.translate(-a, -l),
                  0 === t.x &&
                    0 === t.y &&
                    (s.fillText(
                      'Zoom: ' + this.viewport.getZoom(),
                      t.position.x * e.pixelDensityRatio,
                      (t.position.y - 30) * e.pixelDensityRatio
                    ),
                    s.fillText(
                      'Pan: ' + this.viewport.getBounds().toString(),
                      t.position.x * e.pixelDensityRatio,
                      (t.position.y - 20) * e.pixelDensityRatio
                    )),
                  s.fillText(
                    'Level: ' + t.level,
                    (t.position.x + 10) * e.pixelDensityRatio,
                    (t.position.y + 20) * e.pixelDensityRatio
                  ),
                  s.fillText(
                    'Column: ' + t.x,
                    (t.position.x + 10) * e.pixelDensityRatio,
                    (t.position.y + 30) * e.pixelDensityRatio
                  ),
                  s.fillText(
                    'Row: ' + t.y,
                    (t.position.x + 10) * e.pixelDensityRatio,
                    (t.position.y + 40) * e.pixelDensityRatio
                  ),
                  s.fillText(
                    'Order: ' + n + ' of ' + i,
                    (t.position.x + 10) * e.pixelDensityRatio,
                    (t.position.y + 50) * e.pixelDensityRatio
                  ),
                  s.fillText(
                    'Size: ' + t.size.toString(),
                    (t.position.x + 10) * e.pixelDensityRatio,
                    (t.position.y + 60) * e.pixelDensityRatio
                  ),
                  s.fillText(
                    'Position: ' + t.position.toString(),
                    (t.position.x + 10) * e.pixelDensityRatio,
                    (t.position.y + 70) * e.pixelDensityRatio
                  ),
                  0 !== this.viewport.degrees && this._restoreRotationChanges(),
                  o.getRotation(!0) % 360 != 0 &&
                    this._restoreRotationChanges(),
                  0 === o.viewport.degrees &&
                    o.getRotation(!0) % 360 == 0 &&
                    o._drawer.viewer.viewport.getFlip() &&
                    o._drawer._flip(),
                  s.restore()
              }
            },
            debugRect: function (t) {
              if (this.useCanvas) {
                var i = this.context
                i.save(),
                  (i.lineWidth = 2 * e.pixelDensityRatio),
                  (i.strokeStyle = this.debugGridColor[0]),
                  (i.fillStyle = this.debugGridColor[0]),
                  i.strokeRect(
                    t.x * e.pixelDensityRatio,
                    t.y * e.pixelDensityRatio,
                    t.width * e.pixelDensityRatio,
                    t.height * e.pixelDensityRatio
                  ),
                  i.restore()
              }
            },
            setImageSmoothingEnabled: function (e) {
              this.useCanvas &&
                ((this._imageSmoothingEnabled = e),
                this._updateImageSmoothingEnabled(this.context),
                this.viewer.forceRedraw())
            },
            _updateImageSmoothingEnabled: function (e) {
              ;(e.msImageSmoothingEnabled = this._imageSmoothingEnabled),
                (e.imageSmoothingEnabled = this._imageSmoothingEnabled)
            },
            getCanvasSize: function (t) {
              var i = this._getContext(t).canvas
              return new e.Point(i.width, i.height)
            },
            getCanvasCenter: function () {
              return new e.Point(this.canvas.width / 2, this.canvas.height / 2)
            },
            _offsetForRotation: function (t) {
              var i = t.point
                  ? t.point.times(e.pixelDensityRatio)
                  : this.getCanvasCenter(),
                n = this._getContext(t.useSketch)
              n.save(),
                n.translate(i.x, i.y),
                this.viewer.viewport.flipped
                  ? (n.rotate((Math.PI / 180) * -t.degrees), n.scale(-1, 1))
                  : n.rotate((Math.PI / 180) * t.degrees),
                n.translate(-i.x, -i.y)
            },
            _flip: function (t) {
              var i = (t = t || {}).point
                  ? t.point.times(e.pixelDensityRatio)
                  : this.getCanvasCenter(),
                n = this._getContext(t.useSketch)
              n.translate(i.x, 0), n.scale(-1, 1), n.translate(-i.x, 0)
            },
            _restoreRotationChanges: function (e) {
              this._getContext(e).restore()
            },
            _calculateCanvasSize: function () {
              var t = e.pixelDensityRatio,
                i = this.viewport.getContainerSize()
              return { x: Math.round(i.x * t), y: Math.round(i.y * t) }
            },
            _calculateSketchCanvasSize: function () {
              var e = this._calculateCanvasSize()
              if (0 === this.viewport.getRotation()) return e
              var t = Math.ceil(Math.sqrt(e.x * e.x + e.y * e.y))
              return { x: t, y: t }
            },
          })
      })(t),
      (function (e) {
        ;(e.Viewport = function (t) {
          var i = arguments
          i.length &&
            i[0] instanceof e.Point &&
            (t = { containerSize: i[0], contentSize: i[1], config: i[2] }),
            t.config && (e.extend(!0, t, t.config), delete t.config),
            (this._margins = e.extend(
              { left: 0, top: 0, right: 0, bottom: 0 },
              t.margins || {}
            )),
            delete t.margins,
            e.extend(
              !0,
              this,
              {
                containerSize: null,
                contentSize: null,
                zoomPoint: null,
                viewer: null,
                springStiffness: e.DEFAULT_SETTINGS.springStiffness,
                animationTime: e.DEFAULT_SETTINGS.animationTime,
                minZoomImageRatio: e.DEFAULT_SETTINGS.minZoomImageRatio,
                maxZoomPixelRatio: e.DEFAULT_SETTINGS.maxZoomPixelRatio,
                visibilityRatio: e.DEFAULT_SETTINGS.visibilityRatio,
                wrapHorizontal: e.DEFAULT_SETTINGS.wrapHorizontal,
                wrapVertical: e.DEFAULT_SETTINGS.wrapVertical,
                defaultZoomLevel: e.DEFAULT_SETTINGS.defaultZoomLevel,
                minZoomLevel: e.DEFAULT_SETTINGS.minZoomLevel,
                maxZoomLevel: e.DEFAULT_SETTINGS.maxZoomLevel,
                degrees: e.DEFAULT_SETTINGS.degrees,
                flipped: e.DEFAULT_SETTINGS.flipped,
                homeFillsViewer: e.DEFAULT_SETTINGS.homeFillsViewer,
                silenceMultiImageWarnings:
                  e.DEFAULT_SETTINGS.silenceMultiImageWarnings,
              },
              t
            ),
            this._updateContainerInnerSize(),
            (this.centerSpringX = new e.Spring({
              initial: 0,
              springStiffness: this.springStiffness,
              animationTime: this.animationTime,
            })),
            (this.centerSpringY = new e.Spring({
              initial: 0,
              springStiffness: this.springStiffness,
              animationTime: this.animationTime,
            })),
            (this.zoomSpring = new e.Spring({
              exponential: !0,
              initial: 1,
              springStiffness: this.springStiffness,
              animationTime: this.animationTime,
            })),
            (this._oldCenterX = this.centerSpringX.current.value),
            (this._oldCenterY = this.centerSpringY.current.value),
            (this._oldZoom = this.zoomSpring.current.value),
            this._setContentBounds(new e.Rect(0, 0, 1, 1), 1),
            this.goHome(!0),
            this.update()
        }),
          (e.Viewport.prototype = {
            resetContentSize: function (t) {
              return (
                e.console.assert(
                  t,
                  '[Viewport.resetContentSize] contentSize is required'
                ),
                e.console.assert(
                  t instanceof e.Point,
                  '[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point'
                ),
                e.console.assert(
                  t.x > 0,
                  '[Viewport.resetContentSize] contentSize.x must be greater than 0'
                ),
                e.console.assert(
                  t.y > 0,
                  '[Viewport.resetContentSize] contentSize.y must be greater than 0'
                ),
                this._setContentBounds(new e.Rect(0, 0, 1, t.y / t.x), t.x),
                this
              )
            },
            setHomeBounds: function (t, i) {
              e.console.error(
                '[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.'
              ),
                this._setContentBounds(t, i)
            },
            _setContentBounds: function (t, i) {
              e.console.assert(
                t,
                '[Viewport._setContentBounds] bounds is required'
              ),
                e.console.assert(
                  t instanceof e.Rect,
                  '[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect'
                ),
                e.console.assert(
                  t.width > 0,
                  '[Viewport._setContentBounds] bounds.width must be greater than 0'
                ),
                e.console.assert(
                  t.height > 0,
                  '[Viewport._setContentBounds] bounds.height must be greater than 0'
                ),
                (this._contentBoundsNoRotate = t.clone()),
                (this._contentSizeNoRotate = this._contentBoundsNoRotate
                  .getSize()
                  .times(i)),
                (this._contentBounds = t.rotate(this.degrees).getBoundingBox()),
                (this._contentSize = this._contentBounds.getSize().times(i)),
                (this._contentAspectRatio =
                  this._contentSize.x / this._contentSize.y),
                this.viewer &&
                  this.viewer.raiseEvent('reset-size', {
                    contentSize: this._contentSizeNoRotate.clone(),
                    contentFactor: i,
                    homeBounds: this._contentBoundsNoRotate.clone(),
                    contentBounds: this._contentBounds.clone(),
                  })
            },
            getHomeZoom: function () {
              if (this.defaultZoomLevel) return this.defaultZoomLevel
              var e = this._contentAspectRatio / this.getAspectRatio()
              return (
                (this.homeFillsViewer ? (e >= 1 ? e : 1) : e >= 1 ? 1 : e) /
                this._contentBounds.width
              )
            },
            getHomeBounds: function () {
              return this.getHomeBoundsNoRotate().rotate(-this.getRotation())
            },
            getHomeBoundsNoRotate: function () {
              var t = this._contentBounds.getCenter(),
                i = 1 / this.getHomeZoom(),
                n = i / this.getAspectRatio()
              return new e.Rect(t.x - i / 2, t.y - n / 2, i, n)
            },
            goHome: function (e) {
              return (
                this.viewer &&
                  this.viewer.raiseEvent('home', { immediately: e }),
                this.fitBounds(this.getHomeBounds(), e)
              )
            },
            getMinZoom: function () {
              var e = this.getHomeZoom()
              return this.minZoomLevel
                ? this.minZoomLevel
                : this.minZoomImageRatio * e
            },
            getMaxZoom: function () {
              var e = this.maxZoomLevel
              return (
                e ||
                  ((e =
                    (this._contentSize.x * this.maxZoomPixelRatio) /
                    this._containerInnerSize.x),
                  (e /= this._contentBounds.width)),
                Math.max(e, this.getHomeZoom())
              )
            },
            getAspectRatio: function () {
              return this._containerInnerSize.x / this._containerInnerSize.y
            },
            getContainerSize: function () {
              return new e.Point(this.containerSize.x, this.containerSize.y)
            },
            getMargins: function () {
              return e.extend({}, this._margins)
            },
            setMargins: function (t) {
              e.console.assert(
                'object' === e.type(t),
                '[Viewport.setMargins] margins must be an object'
              ),
                (this._margins = e.extend(
                  { left: 0, top: 0, right: 0, bottom: 0 },
                  t
                )),
                this._updateContainerInnerSize(),
                this.viewer && this.viewer.forceRedraw()
            },
            getBounds: function (e) {
              return this.getBoundsNoRotate(e).rotate(-this.getRotation())
            },
            getBoundsNoRotate: function (t) {
              var i = this.getCenter(t),
                n = 1 / this.getZoom(t),
                o = n / this.getAspectRatio()
              return new e.Rect(i.x - n / 2, i.y - o / 2, n, o)
            },
            getBoundsWithMargins: function (e) {
              return this.getBoundsNoRotateWithMargins(e).rotate(
                -this.getRotation(),
                this.getCenter(e)
              )
            },
            getBoundsNoRotateWithMargins: function (e) {
              var t = this.getBoundsNoRotate(e),
                i = this._containerInnerSize.x * this.getZoom(e)
              return (
                (t.x -= this._margins.left / i),
                (t.y -= this._margins.top / i),
                (t.width += (this._margins.left + this._margins.right) / i),
                (t.height += (this._margins.top + this._margins.bottom) / i),
                t
              )
            },
            getCenter: function (t) {
              var i,
                n,
                o,
                r,
                s,
                a,
                l = new e.Point(
                  this.centerSpringX.current.value,
                  this.centerSpringY.current.value
                ),
                c = new e.Point(
                  this.centerSpringX.target.value,
                  this.centerSpringY.target.value
                )
              return t
                ? l
                : this.zoomPoint
                ? ((i = this.pixelFromPoint(this.zoomPoint, !0)),
                  (r = (o = 1 / (n = this.getZoom())) / this.getAspectRatio()),
                  (s = new e.Rect(l.x - o / 2, l.y - r / 2, o, r)),
                  (a = this._pixelFromPoint(this.zoomPoint, s)
                    .minus(i)
                    .divide(this._containerInnerSize.x * n)),
                  c.plus(a))
                : c
            },
            getZoom: function (e) {
              return e
                ? this.zoomSpring.current.value
                : this.zoomSpring.target.value
            },
            _applyZoomConstraints: function (e) {
              return Math.max(Math.min(e, this.getMaxZoom()), this.getMinZoom())
            },
            _applyBoundaryConstraints: function (t) {
              var i = new e.Rect(t.x, t.y, t.width, t.height)
              if (this.wrapHorizontal);
              else {
                var n = this.visibilityRatio * i.width,
                  o = i.x + i.width,
                  r =
                    this._contentBoundsNoRotate.x +
                    this._contentBoundsNoRotate.width,
                  s = this._contentBoundsNoRotate.x - o + n,
                  a = r - i.x - n
                n > this._contentBoundsNoRotate.width
                  ? (i.x += (s + a) / 2)
                  : a < 0
                  ? (i.x += a)
                  : s > 0 && (i.x += s)
              }
              if (this.wrapVertical);
              else {
                var l = this.visibilityRatio * i.height,
                  c = i.y + i.height,
                  h =
                    this._contentBoundsNoRotate.y +
                    this._contentBoundsNoRotate.height,
                  u = this._contentBoundsNoRotate.y - c + l,
                  d = h - i.y - l
                l > this._contentBoundsNoRotate.height
                  ? (i.y += (u + d) / 2)
                  : d < 0
                  ? (i.y += d)
                  : u > 0 && (i.y += u)
              }
              return i
            },
            _raiseConstraintsEvent: function (e) {
              this.viewer &&
                this.viewer.raiseEvent('constrain', { immediately: e })
            },
            applyConstraints: function (e) {
              var t = this.getZoom(),
                i = this._applyZoomConstraints(t)
              t !== i && this.zoomTo(i, this.zoomPoint, e)
              var n = this.getBoundsNoRotate(),
                o = this._applyBoundaryConstraints(n)
              return (
                this._raiseConstraintsEvent(e),
                (n.x !== o.x || n.y !== o.y || e) &&
                  this.fitBounds(o.rotate(-this.getRotation()), e),
                this
              )
            },
            ensureVisible: function (e) {
              return this.applyConstraints(e)
            },
            _fitBounds: function (t, i) {
              var n = (i = i || {}).immediately || !1,
                o = i.constraints || !1,
                r = this.getAspectRatio(),
                s = t.getCenter(),
                a = new e.Rect(
                  t.x,
                  t.y,
                  t.width,
                  t.height,
                  t.degrees + this.getRotation()
                ).getBoundingBox()
              a.getAspectRatio() >= r
                ? (a.height = a.width / r)
                : (a.width = a.height * r),
                (a.x = s.x - a.width / 2),
                (a.y = s.y - a.height / 2)
              var l = 1 / a.width
              if (o) {
                var c = a.getAspectRatio(),
                  h = this._applyZoomConstraints(l)
                l !== h &&
                  ((l = h),
                  (a.width = 1 / l),
                  (a.x = s.x - a.width / 2),
                  (a.height = a.width / c),
                  (a.y = s.y - a.height / 2)),
                  (s = (a = this._applyBoundaryConstraints(a)).getCenter()),
                  this._raiseConstraintsEvent(n)
              }
              if (n) return this.panTo(s, !0), this.zoomTo(l, null, !0)
              this.panTo(this.getCenter(!0), !0),
                this.zoomTo(this.getZoom(!0), null, !0)
              var u = this.getBounds(),
                d = this.getZoom()
              if (0 === d || Math.abs(l / d - 1) < 1e-8)
                return this.zoomTo(l, !0), this.panTo(s, n)
              var p = (a = a.rotate(-this.getRotation()))
                .getTopLeft()
                .times(l)
                .minus(u.getTopLeft().times(d))
                .divide(l - d)
              return this.zoomTo(l, p, n)
            },
            fitBounds: function (e, t) {
              return this._fitBounds(e, { immediately: t, constraints: !1 })
            },
            fitBoundsWithConstraints: function (e, t) {
              return this._fitBounds(e, { immediately: t, constraints: !0 })
            },
            fitVertically: function (t) {
              var i = new e.Rect(
                this._contentBounds.x + this._contentBounds.width / 2,
                this._contentBounds.y,
                0,
                this._contentBounds.height
              )
              return this.fitBounds(i, t)
            },
            fitHorizontally: function (t) {
              var i = new e.Rect(
                this._contentBounds.x,
                this._contentBounds.y + this._contentBounds.height / 2,
                this._contentBounds.width,
                0
              )
              return this.fitBounds(i, t)
            },
            getConstrainedBounds: function (e) {
              var t
              return (t = this.getBounds(e)), this._applyBoundaryConstraints(t)
            },
            panBy: function (t, i) {
              var n = new e.Point(
                this.centerSpringX.target.value,
                this.centerSpringY.target.value
              )
              return this.panTo(n.plus(t), i)
            },
            panTo: function (e, t) {
              return (
                t
                  ? (this.centerSpringX.resetTo(e.x),
                    this.centerSpringY.resetTo(e.y))
                  : (this.centerSpringX.springTo(e.x),
                    this.centerSpringY.springTo(e.y)),
                this.viewer &&
                  this.viewer.raiseEvent('pan', { center: e, immediately: t }),
                this
              )
            },
            zoomBy: function (e, t, i) {
              return this.zoomTo(this.zoomSpring.target.value * e, t, i)
            },
            zoomTo: function (t, i, n) {
              var o = this
              return (
                (this.zoomPoint =
                  i instanceof e.Point && !isNaN(i.x) && !isNaN(i.y)
                    ? i
                    : null),
                n
                  ? this._adjustCenterSpringsForZoomPoint(function () {
                      o.zoomSpring.resetTo(t)
                    })
                  : this.zoomSpring.springTo(t),
                this.viewer &&
                  this.viewer.raiseEvent('zoom', {
                    zoom: t,
                    refPoint: i,
                    immediately: n,
                  }),
                this
              )
            },
            setRotation: function (t) {
              return this.viewer && this.viewer.drawer.canRotate()
                ? ((this.degrees = e.positiveModulo(t, 360)),
                  this._setContentBounds(
                    this.viewer.world.getHomeBounds(),
                    this.viewer.world.getContentFactor()
                  ),
                  this.viewer.forceRedraw(),
                  this.viewer.raiseEvent('rotate', { degrees: t }),
                  this)
                : this
            },
            getRotation: function () {
              return this.degrees
            },
            resize: function (e, t) {
              var i,
                n = this.getBoundsNoRotate(),
                o = n
              return (
                (this.containerSize.x = e.x),
                (this.containerSize.y = e.y),
                this._updateContainerInnerSize(),
                t &&
                  ((i = e.x / this.containerSize.x),
                  (o.width = n.width * i),
                  (o.height = o.width / this.getAspectRatio())),
                this.viewer &&
                  this.viewer.raiseEvent('resize', {
                    newContainerSize: e,
                    maintain: t,
                  }),
                this.fitBounds(o, !0)
              )
            },
            _updateContainerInnerSize: function () {
              this._containerInnerSize = new e.Point(
                Math.max(
                  1,
                  this.containerSize.x -
                    (this._margins.left + this._margins.right)
                ),
                Math.max(
                  1,
                  this.containerSize.y -
                    (this._margins.top + this._margins.bottom)
                )
              )
            },
            update: function () {
              var e = this
              this._adjustCenterSpringsForZoomPoint(function () {
                e.zoomSpring.update()
              }),
                this.centerSpringX.update(),
                this.centerSpringY.update()
              var t =
                this.centerSpringX.current.value !== this._oldCenterX ||
                this.centerSpringY.current.value !== this._oldCenterY ||
                this.zoomSpring.current.value !== this._oldZoom
              return (
                (this._oldCenterX = this.centerSpringX.current.value),
                (this._oldCenterY = this.centerSpringY.current.value),
                (this._oldZoom = this.zoomSpring.current.value),
                t
              )
            },
            _adjustCenterSpringsForZoomPoint: function (e) {
              if (this.zoomPoint) {
                var t = this.pixelFromPoint(this.zoomPoint, !0)
                e()
                var i = this.pixelFromPoint(this.zoomPoint, !0).minus(t),
                  n = this.deltaPointsFromPixels(i, !0)
                this.centerSpringX.shiftBy(n.x),
                  this.centerSpringY.shiftBy(n.y),
                  this.zoomSpring.isAtTargetValue() && (this.zoomPoint = null)
              } else e()
            },
            deltaPixelsFromPointsNoRotate: function (e, t) {
              return e.times(this._containerInnerSize.x * this.getZoom(t))
            },
            deltaPixelsFromPoints: function (e, t) {
              return this.deltaPixelsFromPointsNoRotate(
                e.rotate(this.getRotation()),
                t
              )
            },
            deltaPointsFromPixelsNoRotate: function (e, t) {
              return e.divide(this._containerInnerSize.x * this.getZoom(t))
            },
            deltaPointsFromPixels: function (e, t) {
              return this.deltaPointsFromPixelsNoRotate(e, t).rotate(
                -this.getRotation()
              )
            },
            pixelFromPointNoRotate: function (e, t) {
              return this._pixelFromPointNoRotate(e, this.getBoundsNoRotate(t))
            },
            pixelFromPoint: function (e, t) {
              return this._pixelFromPoint(e, this.getBoundsNoRotate(t))
            },
            _pixelFromPointNoRotate: function (t, i) {
              return t
                .minus(i.getTopLeft())
                .times(this._containerInnerSize.x / i.width)
                .plus(new e.Point(this._margins.left, this._margins.top))
            },
            _pixelFromPoint: function (e, t) {
              return this._pixelFromPointNoRotate(
                e.rotate(this.getRotation(), this.getCenter(!0)),
                t
              )
            },
            pointFromPixelNoRotate: function (t, i) {
              var n = this.getBoundsNoRotate(i)
              return t
                .minus(new e.Point(this._margins.left, this._margins.top))
                .divide(this._containerInnerSize.x / n.width)
                .plus(n.getTopLeft())
            },
            pointFromPixel: function (e, t) {
              return this.pointFromPixelNoRotate(e, t).rotate(
                -this.getRotation(),
                this.getCenter(!0)
              )
            },
            _viewportToImageDelta: function (t, i) {
              var n = this._contentBoundsNoRotate.width
              return new e.Point(
                (t * this._contentSizeNoRotate.x) / n,
                (i * this._contentSizeNoRotate.x) / n
              )
            },
            viewportToImageCoordinates: function (t, i) {
              if (t instanceof e.Point)
                return this.viewportToImageCoordinates(t.x, t.y)
              if (this.viewer) {
                var n = this.viewer.world.getItemCount()
                if (n > 1)
                  this.silenceMultiImageWarnings ||
                    e.console.error(
                      '[Viewport.viewportToImageCoordinates] is not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.'
                    )
                else if (1 === n) {
                  return this.viewer.world
                    .getItemAt(0)
                    .viewportToImageCoordinates(t, i, !0)
                }
              }
              return this._viewportToImageDelta(
                t - this._contentBoundsNoRotate.x,
                i - this._contentBoundsNoRotate.y
              )
            },
            _imageToViewportDelta: function (t, i) {
              var n = this._contentBoundsNoRotate.width
              return new e.Point(
                (t / this._contentSizeNoRotate.x) * n,
                (i / this._contentSizeNoRotate.x) * n
              )
            },
            imageToViewportCoordinates: function (t, i) {
              if (t instanceof e.Point)
                return this.imageToViewportCoordinates(t.x, t.y)
              if (this.viewer) {
                var n = this.viewer.world.getItemCount()
                if (n > 1)
                  this.silenceMultiImageWarnings ||
                    e.console.error(
                      '[Viewport.imageToViewportCoordinates] is not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.'
                    )
                else if (1 === n) {
                  return this.viewer.world
                    .getItemAt(0)
                    .imageToViewportCoordinates(t, i, !0)
                }
              }
              var o = this._imageToViewportDelta(t, i)
              return (
                (o.x += this._contentBoundsNoRotate.x),
                (o.y += this._contentBoundsNoRotate.y),
                o
              )
            },
            imageToViewportRectangle: function (t, i, n, o) {
              var r = t
              if (
                (r instanceof e.Rect || (r = new e.Rect(t, i, n, o)),
                this.viewer)
              ) {
                var s = this.viewer.world.getItemCount()
                if (s > 1)
                  this.silenceMultiImageWarnings ||
                    e.console.error(
                      '[Viewport.imageToViewportRectangle] is not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.'
                    )
                else if (1 === s) {
                  return this.viewer.world
                    .getItemAt(0)
                    .imageToViewportRectangle(t, i, n, o, !0)
                }
              }
              var a = this.imageToViewportCoordinates(r.x, r.y),
                l = this._imageToViewportDelta(r.width, r.height)
              return new e.Rect(a.x, a.y, l.x, l.y, r.degrees)
            },
            viewportToImageRectangle: function (t, i, n, o) {
              var r = t
              if (
                (r instanceof e.Rect || (r = new e.Rect(t, i, n, o)),
                this.viewer)
              ) {
                var s = this.viewer.world.getItemCount()
                if (s > 1)
                  this.silenceMultiImageWarnings ||
                    e.console.error(
                      '[Viewport.viewportToImageRectangle] is not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.'
                    )
                else if (1 === s) {
                  return this.viewer.world
                    .getItemAt(0)
                    .viewportToImageRectangle(t, i, n, o, !0)
                }
              }
              var a = this.viewportToImageCoordinates(r.x, r.y),
                l = this._viewportToImageDelta(r.width, r.height)
              return new e.Rect(a.x, a.y, l.x, l.y, r.degrees)
            },
            viewerElementToImageCoordinates: function (e) {
              var t = this.pointFromPixel(e, !0)
              return this.viewportToImageCoordinates(t)
            },
            imageToViewerElementCoordinates: function (e) {
              var t = this.imageToViewportCoordinates(e)
              return this.pixelFromPoint(t, !0)
            },
            windowToImageCoordinates: function (t) {
              e.console.assert(
                this.viewer,
                '[Viewport.windowToImageCoordinates] the viewport must have a viewer.'
              )
              var i = t.minus(e.getElementPosition(this.viewer.element))
              return this.viewerElementToImageCoordinates(i)
            },
            imageToWindowCoordinates: function (t) {
              return (
                e.console.assert(
                  this.viewer,
                  '[Viewport.imageToWindowCoordinates] the viewport must have a viewer.'
                ),
                this.imageToViewerElementCoordinates(t).plus(
                  e.getElementPosition(this.viewer.element)
                )
              )
            },
            viewerElementToViewportCoordinates: function (e) {
              return this.pointFromPixel(e, !0)
            },
            viewportToViewerElementCoordinates: function (e) {
              return this.pixelFromPoint(e, !0)
            },
            viewerElementToViewportRectangle: function (t) {
              return e.Rect.fromSummits(
                this.pointFromPixel(t.getTopLeft(), !0),
                this.pointFromPixel(t.getTopRight(), !0),
                this.pointFromPixel(t.getBottomLeft(), !0)
              )
            },
            viewportToViewerElementRectangle: function (t) {
              return e.Rect.fromSummits(
                this.pixelFromPoint(t.getTopLeft(), !0),
                this.pixelFromPoint(t.getTopRight(), !0),
                this.pixelFromPoint(t.getBottomLeft(), !0)
              )
            },
            windowToViewportCoordinates: function (t) {
              e.console.assert(
                this.viewer,
                '[Viewport.windowToViewportCoordinates] the viewport must have a viewer.'
              )
              var i = t.minus(e.getElementPosition(this.viewer.element))
              return this.viewerElementToViewportCoordinates(i)
            },
            viewportToWindowCoordinates: function (t) {
              return (
                e.console.assert(
                  this.viewer,
                  '[Viewport.viewportToWindowCoordinates] the viewport must have a viewer.'
                ),
                this.viewportToViewerElementCoordinates(t).plus(
                  e.getElementPosition(this.viewer.element)
                )
              )
            },
            viewportToImageZoom: function (t) {
              if (this.viewer) {
                var i = this.viewer.world.getItemCount()
                if (i > 1)
                  this.silenceMultiImageWarnings ||
                    e.console.error(
                      '[Viewport.viewportToImageZoom] is not accurate with multi-image.'
                    )
                else if (1 === i) {
                  return this.viewer.world.getItemAt(0).viewportToImageZoom(t)
                }
              }
              var n = this._contentSizeNoRotate.x
              return (
                t *
                ((this._containerInnerSize.x / n) *
                  this._contentBoundsNoRotate.width)
              )
            },
            imageToViewportZoom: function (t) {
              if (this.viewer) {
                var i = this.viewer.world.getItemCount()
                if (i > 1)
                  this.silenceMultiImageWarnings ||
                    e.console.error(
                      '[Viewport.imageToViewportZoom] is not accurate with multi-image.'
                    )
                else if (1 === i) {
                  return this.viewer.world.getItemAt(0).imageToViewportZoom(t)
                }
              }
              return (
                t *
                (this._contentSizeNoRotate.x /
                  this._containerInnerSize.x /
                  this._contentBoundsNoRotate.width)
              )
            },
            toggleFlip: function () {
              return this.setFlip(!this.getFlip()), this
            },
            getFlip: function () {
              return this.flipped
            },
            setFlip: function (e) {
              return (
                this.flipped === e ||
                  ((this.flipped = e),
                  this.viewer.navigator &&
                    this.viewer.navigator.setFlip(this.getFlip()),
                  this.viewer.forceRedraw(),
                  this.viewer.raiseEvent('flip', { flipped: e })),
                this
              )
            },
          })
      })(t),
      (function (e) {
        ;(e.TiledImage = function (i) {
          var n = this
          e.console.assert(
            i.tileCache,
            '[TiledImage] options.tileCache is required'
          ),
            e.console.assert(
              i.drawer,
              '[TiledImage] options.drawer is required'
            ),
            e.console.assert(
              i.viewer,
              '[TiledImage] options.viewer is required'
            ),
            e.console.assert(
              i.imageLoader,
              '[TiledImage] options.imageLoader is required'
            ),
            e.console.assert(
              i.source,
              '[TiledImage] options.source is required'
            ),
            e.console.assert(
              !i.clip || i.clip instanceof e.Rect,
              '[TiledImage] options.clip must be an OpenSeadragon.Rect if present'
            ),
            e.EventSource.call(this),
            (this._tileCache = i.tileCache),
            delete i.tileCache,
            (this._drawer = i.drawer),
            delete i.drawer,
            (this._imageLoader = i.imageLoader),
            delete i.imageLoader,
            i.clip instanceof e.Rect && (this._clip = i.clip.clone()),
            delete i.clip
          var o = i.x || 0
          delete i.x
          var r = i.y || 0
          delete i.y,
            (this.normHeight = i.source.dimensions.y / i.source.dimensions.x),
            (this.contentAspectX =
              i.source.dimensions.x / i.source.dimensions.y)
          var s = 1
          i.width
            ? ((s = i.width),
              delete i.width,
              i.height &&
                (e.console.error(
                  'specifying both width and height to a tiledImage is not supported'
                ),
                delete i.height))
            : i.height && ((s = i.height / this.normHeight), delete i.height)
          var a = i.fitBounds
          delete i.fitBounds
          var l = i.fitBoundsPlacement || t.Placement.CENTER
          delete i.fitBoundsPlacement
          var c = i.degrees || 0
          delete i.degrees,
            e.extend(
              !0,
              this,
              {
                viewer: null,
                tilesMatrix: {},
                coverage: {},
                loadingCoverage: {},
                lastDrawn: [],
                lastResetTime: 0,
                _midDraw: !1,
                _needsDraw: !0,
                _hasOpaqueTile: !1,
                _tilesLoading: 0,
                springStiffness: e.DEFAULT_SETTINGS.springStiffness,
                animationTime: e.DEFAULT_SETTINGS.animationTime,
                minZoomImageRatio: e.DEFAULT_SETTINGS.minZoomImageRatio,
                wrapHorizontal: e.DEFAULT_SETTINGS.wrapHorizontal,
                wrapVertical: e.DEFAULT_SETTINGS.wrapVertical,
                immediateRender: e.DEFAULT_SETTINGS.immediateRender,
                blendTime: e.DEFAULT_SETTINGS.blendTime,
                alwaysBlend: e.DEFAULT_SETTINGS.alwaysBlend,
                minPixelRatio: e.DEFAULT_SETTINGS.minPixelRatio,
                smoothTileEdgesMinZoom:
                  e.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,
                iOSDevice: e.DEFAULT_SETTINGS.iOSDevice,
                debugMode: e.DEFAULT_SETTINGS.debugMode,
                crossOriginPolicy: e.DEFAULT_SETTINGS.crossOriginPolicy,
                ajaxWithCredentials: e.DEFAULT_SETTINGS.ajaxWithCredentials,
                placeholderFillStyle: e.DEFAULT_SETTINGS.placeholderFillStyle,
                opacity: e.DEFAULT_SETTINGS.opacity,
                preload: e.DEFAULT_SETTINGS.preload,
                compositeOperation: e.DEFAULT_SETTINGS.compositeOperation,
                subPixelRoundingForTransparency:
                  e.DEFAULT_SETTINGS.subPixelRoundingForTransparency,
              },
              i
            ),
            (this._preload = this.preload),
            delete this.preload,
            (this._fullyLoaded = !1),
            (this._xSpring = new e.Spring({
              initial: o,
              springStiffness: this.springStiffness,
              animationTime: this.animationTime,
            })),
            (this._ySpring = new e.Spring({
              initial: r,
              springStiffness: this.springStiffness,
              animationTime: this.animationTime,
            })),
            (this._scaleSpring = new e.Spring({
              initial: s,
              springStiffness: this.springStiffness,
              animationTime: this.animationTime,
            })),
            (this._degreesSpring = new e.Spring({
              initial: c,
              springStiffness: this.springStiffness,
              animationTime: this.animationTime,
            })),
            this._updateForScale(),
            a && this.fitBounds(a, l, !0),
            (this._drawingHandler = function (t) {
              n.viewer.raiseEvent(
                'tile-drawing',
                e.extend({ tiledImage: n }, t)
              )
            })
        }),
          e.extend(e.TiledImage.prototype, e.EventSource.prototype, {
            needsDraw: function () {
              return this._needsDraw
            },
            getFullyLoaded: function () {
              return this._fullyLoaded
            },
            _setFullyLoaded: function (e) {
              e !== this._fullyLoaded &&
                ((this._fullyLoaded = e),
                this.raiseEvent('fully-loaded-change', {
                  fullyLoaded: this._fullyLoaded,
                }))
            },
            reset: function () {
              this._tileCache.clearTilesFor(this),
                (this.lastResetTime = e.now()),
                (this._needsDraw = !0)
            },
            update: function () {
              var e = this._xSpring.update(),
                t = this._ySpring.update(),
                i = this._scaleSpring.update(),
                n = this._degreesSpring.update()
              return (
                !!(e || t || i || n) &&
                (this._updateForScale(), (this._needsDraw = !0), !0)
              )
            },
            draw: function () {
              0 !== this.opacity || this._preload
                ? ((this._midDraw = !0),
                  this._updateViewport(),
                  (this._midDraw = !1))
                : (this._needsDraw = !1)
            },
            destroy: function () {
              this.reset(), this.source.destroy && this.source.destroy()
            },
            getBounds: function (e) {
              return this.getBoundsNoRotate(e).rotate(
                this.getRotation(e),
                this._getRotationPoint(e)
              )
            },
            getBoundsNoRotate: function (t) {
              return t
                ? new e.Rect(
                    this._xSpring.current.value,
                    this._ySpring.current.value,
                    this._worldWidthCurrent,
                    this._worldHeightCurrent
                  )
                : new e.Rect(
                    this._xSpring.target.value,
                    this._ySpring.target.value,
                    this._worldWidthTarget,
                    this._worldHeightTarget
                  )
            },
            getWorldBounds: function () {
              return (
                e.console.error(
                  '[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead'
                ),
                this.getBounds()
              )
            },
            getClippedBounds: function (t) {
              var i = this.getBoundsNoRotate(t)
              if (this._clip) {
                var n =
                    (t ? this._worldWidthCurrent : this._worldWidthTarget) /
                    this.source.dimensions.x,
                  o = this._clip.times(n)
                i = new e.Rect(i.x + o.x, i.y + o.y, o.width, o.height)
              }
              return i.rotate(this.getRotation(t), this._getRotationPoint(t))
            },
            getTileBounds: function (e, t, i) {
              var n = this.source.getNumTiles(e),
                o = (n.x + (t % n.x)) % n.x,
                r = (n.y + (i % n.y)) % n.y,
                s = this.source.getTileBounds(e, o, r)
              return (
                this.getFlip() && (s.x = 1 - s.x - s.width),
                (s.x += (t - o) / n.x),
                (s.y +=
                  (this._worldHeightCurrent / this._worldWidthCurrent) *
                  ((i - r) / n.y)),
                s
              )
            },
            getContentSize: function () {
              return new e.Point(
                this.source.dimensions.x,
                this.source.dimensions.y
              )
            },
            getSizeInWindowCoordinates: function () {
              var t = this.imageToWindowCoordinates(new e.Point(0, 0)),
                i = this.imageToWindowCoordinates(this.getContentSize())
              return new e.Point(i.x - t.x, i.y - t.y)
            },
            _viewportToImageDelta: function (t, i, n) {
              var o = n
                ? this._scaleSpring.current.value
                : this._scaleSpring.target.value
              return new e.Point(
                t * (this.source.dimensions.x / o),
                i * ((this.source.dimensions.y * this.contentAspectX) / o)
              )
            },
            viewportToImageCoordinates: function (t, i, n) {
              var o
              return (
                t instanceof e.Point
                  ? ((n = i), (o = t))
                  : (o = new e.Point(t, i)),
                (o = o.rotate(-this.getRotation(n), this._getRotationPoint(n))),
                n
                  ? this._viewportToImageDelta(
                      o.x - this._xSpring.current.value,
                      o.y - this._ySpring.current.value
                    )
                  : this._viewportToImageDelta(
                      o.x - this._xSpring.target.value,
                      o.y - this._ySpring.target.value
                    )
              )
            },
            _imageToViewportDelta: function (t, i, n) {
              var o = n
                ? this._scaleSpring.current.value
                : this._scaleSpring.target.value
              return new e.Point(
                (t / this.source.dimensions.x) * o,
                (i / this.source.dimensions.y / this.contentAspectX) * o
              )
            },
            imageToViewportCoordinates: function (t, i, n) {
              t instanceof e.Point && ((n = i), (i = t.y), (t = t.x))
              var o = this._imageToViewportDelta(t, i)
              return (
                n
                  ? ((o.x += this._xSpring.current.value),
                    (o.y += this._ySpring.current.value))
                  : ((o.x += this._xSpring.target.value),
                    (o.y += this._ySpring.target.value)),
                o.rotate(this.getRotation(n), this._getRotationPoint(n))
              )
            },
            imageToViewportRectangle: function (t, i, n, o, r) {
              var s = t
              s instanceof e.Rect ? (r = i) : (s = new e.Rect(t, i, n, o))
              var a = this.imageToViewportCoordinates(s.getTopLeft(), r),
                l = this._imageToViewportDelta(s.width, s.height, r)
              return new e.Rect(
                a.x,
                a.y,
                l.x,
                l.y,
                s.degrees + this.getRotation(r)
              )
            },
            viewportToImageRectangle: function (t, i, n, o, r) {
              var s = t
              t instanceof e.Rect ? (r = i) : (s = new e.Rect(t, i, n, o))
              var a = this.viewportToImageCoordinates(s.getTopLeft(), r),
                l = this._viewportToImageDelta(s.width, s.height, r)
              return new e.Rect(
                a.x,
                a.y,
                l.x,
                l.y,
                s.degrees - this.getRotation(r)
              )
            },
            viewerElementToImageCoordinates: function (e) {
              var t = this.viewport.pointFromPixel(e, !0)
              return this.viewportToImageCoordinates(t)
            },
            imageToViewerElementCoordinates: function (e) {
              var t = this.imageToViewportCoordinates(e)
              return this.viewport.pixelFromPoint(t, !0)
            },
            windowToImageCoordinates: function (e) {
              var i = e.minus(t.getElementPosition(this.viewer.element))
              return this.viewerElementToImageCoordinates(i)
            },
            imageToWindowCoordinates: function (e) {
              return this.imageToViewerElementCoordinates(e).plus(
                t.getElementPosition(this.viewer.element)
              )
            },
            _viewportToTiledImageRectangle: function (t) {
              var i = this._scaleSpring.current.value
              return (
                (t = t.rotate(
                  -this.getRotation(!0),
                  this._getRotationPoint(!0)
                )),
                new e.Rect(
                  (t.x - this._xSpring.current.value) / i,
                  (t.y - this._ySpring.current.value) / i,
                  t.width / i,
                  t.height / i,
                  t.degrees
                )
              )
            },
            viewportToImageZoom: function (e) {
              return (
                ((this._scaleSpring.current.value *
                  this.viewport._containerInnerSize.x) /
                  this.source.dimensions.x) *
                e
              )
            },
            imageToViewportZoom: function (e) {
              return (
                e /
                ((this._scaleSpring.current.value *
                  this.viewport._containerInnerSize.x) /
                  this.source.dimensions.x)
              )
            },
            setPosition: function (e, t) {
              var i =
                this._xSpring.target.value === e.x &&
                this._ySpring.target.value === e.y
              if (t) {
                if (
                  i &&
                  this._xSpring.current.value === e.x &&
                  this._ySpring.current.value === e.y
                )
                  return
                this._xSpring.resetTo(e.x),
                  this._ySpring.resetTo(e.y),
                  (this._needsDraw = !0)
              } else {
                if (i) return
                this._xSpring.springTo(e.x),
                  this._ySpring.springTo(e.y),
                  (this._needsDraw = !0)
              }
              i || this._raiseBoundsChange()
            },
            setWidth: function (e, t) {
              this._setScale(e, t)
            },
            setHeight: function (e, t) {
              this._setScale(e / this.normHeight, t)
            },
            setCroppingPolygons: function (t) {
              var i = function (t) {
                return t.map(function (t) {
                  try {
                    if (
                      (function (t) {
                        return (
                          t instanceof e.Point ||
                          ('number' == typeof t.x && 'number' == typeof t.y)
                        )
                      })(t)
                    )
                      return { x: t.x, y: t.y }
                    throw new Error()
                  } catch (e) {
                    throw new Error(
                      'A Provided cropping polygon point is not supported'
                    )
                  }
                })
              }
              try {
                if (!e.isArray(t))
                  throw new Error('Provided cropping polygon is not an array')
                this._croppingPolygons = t.map(function (e) {
                  return i(e)
                })
              } catch (t) {
                e.console.error(
                  '[TiledImage.setCroppingPolygons] Cropping polygon format not supported'
                ),
                  e.console.error(t),
                  (this._croppingPolygons = null)
              }
            },
            resetCroppingPolygons: function () {
              this._croppingPolygons = null
            },
            fitBounds: function (t, i, n) {
              i = i || e.Placement.CENTER
              var o = e.Placement.properties[i],
                r = this.contentAspectX,
                s = 0,
                a = 0,
                l = 1,
                c = 1
              if (
                (this._clip &&
                  ((r = this._clip.getAspectRatio()),
                  (l = this._clip.width / this.source.dimensions.x),
                  (c = this._clip.height / this.source.dimensions.y),
                  t.getAspectRatio() > r
                    ? ((s = (this._clip.x / this._clip.height) * t.height),
                      (a = (this._clip.y / this._clip.height) * t.height))
                    : ((s = (this._clip.x / this._clip.width) * t.width),
                      (a = (this._clip.y / this._clip.width) * t.width))),
                t.getAspectRatio() > r)
              ) {
                var h = t.height / c,
                  u = 0
                o.isHorizontallyCentered
                  ? (u = (t.width - t.height * r) / 2)
                  : o.isRight && (u = t.width - t.height * r),
                  this.setPosition(new e.Point(t.x - s + u, t.y - a), n),
                  this.setHeight(h, n)
              } else {
                var d = t.width / l,
                  p = 0
                o.isVerticallyCentered
                  ? (p = (t.height - t.width / r) / 2)
                  : o.isBottom && (p = t.height - t.width / r),
                  this.setPosition(new e.Point(t.x - s, t.y - a + p), n),
                  this.setWidth(d, n)
              }
            },
            getClip: function () {
              return this._clip ? this._clip.clone() : null
            },
            setClip: function (t) {
              e.console.assert(
                !t || t instanceof e.Rect,
                '[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null'
              ),
                t instanceof e.Rect
                  ? (this._clip = t.clone())
                  : (this._clip = null),
                (this._needsDraw = !0),
                this.raiseEvent('clip-change')
            },
            getFlip: function () {
              return !!this.flipped
            },
            setFlip: function (e) {
              ;(this.flipped = !!e),
                (this._needsDraw = !0),
                this._raiseBoundsChange()
            },
            getOpacity: function () {
              return this.opacity
            },
            setOpacity: function (e) {
              e !== this.opacity &&
                ((this.opacity = e),
                (this._needsDraw = !0),
                this.raiseEvent('opacity-change', { opacity: this.opacity }))
            },
            getPreload: function () {
              return this._preload
            },
            setPreload: function (e) {
              ;(this._preload = !!e), (this._needsDraw = !0)
            },
            getRotation: function (e) {
              return e
                ? this._degreesSpring.current.value
                : this._degreesSpring.target.value
            },
            setRotation: function (e, t) {
              ;(this._degreesSpring.target.value === e &&
                this._degreesSpring.isAtTargetValue()) ||
                (t
                  ? this._degreesSpring.resetTo(e)
                  : this._degreesSpring.springTo(e),
                (this._needsDraw = !0),
                this._raiseBoundsChange())
            },
            _getRotationPoint: function (e) {
              return this.getBoundsNoRotate(e).getCenter()
            },
            getCompositeOperation: function () {
              return this.compositeOperation
            },
            setCompositeOperation: function (e) {
              e !== this.compositeOperation &&
                ((this.compositeOperation = e),
                (this._needsDraw = !0),
                this.raiseEvent('composite-operation-change', {
                  compositeOperation: this.compositeOperation,
                }))
            },
            _setScale: function (e, t) {
              var i = this._scaleSpring.target.value === e
              if (t) {
                if (i && this._scaleSpring.current.value === e) return
                this._scaleSpring.resetTo(e),
                  this._updateForScale(),
                  (this._needsDraw = !0)
              } else {
                if (i) return
                this._scaleSpring.springTo(e),
                  this._updateForScale(),
                  (this._needsDraw = !0)
              }
              i || this._raiseBoundsChange()
            },
            _updateForScale: function () {
              ;(this._worldWidthTarget = this._scaleSpring.target.value),
                (this._worldHeightTarget =
                  this.normHeight * this._scaleSpring.target.value),
                (this._worldWidthCurrent = this._scaleSpring.current.value),
                (this._worldHeightCurrent =
                  this.normHeight * this._scaleSpring.current.value)
            },
            _raiseBoundsChange: function () {
              this.raiseEvent('bounds-change')
            },
            _isBottomItem: function () {
              return this.viewer.world.getItemAt(0) === this
            },
            _getLevelsInterval: function () {
              var e = Math.max(
                  this.source.minLevel,
                  Math.floor(Math.log(this.minZoomImageRatio) / Math.log(2))
                ),
                t =
                  this.viewport.deltaPixelsFromPointsNoRotate(
                    this.source.getPixelRatio(0),
                    !0
                  ).x * this._scaleSpring.current.value,
                i = Math.min(
                  Math.abs(this.source.maxLevel),
                  Math.abs(
                    Math.floor(Math.log(t / this.minPixelRatio) / Math.log(2))
                  )
                )
              return (
                (i = Math.max(i, this.source.minLevel || 0)),
                { lowestLevel: (e = Math.min(e, i)), highestLevel: i }
              )
            },
            _updateViewport: function () {
              for (
                this._needsDraw = !1,
                  this._tilesLoading = 0,
                  this.loadingCoverage = {};
                this.lastDrawn.length > 0;

              ) {
                this.lastDrawn.pop().beingDrawn = !1
              }
              var t = this.viewport,
                i = this._viewportToTiledImageRectangle(
                  t.getBoundsWithMargins(!0)
                )
              if (!this.wrapHorizontal && !this.wrapVertical) {
                var n = this._viewportToTiledImageRectangle(
                  this.getClippedBounds(!0)
                )
                if (null === (i = i.intersection(n))) return
              }
              for (
                var o = this._getLevelsInterval(),
                  r = o.lowestLevel,
                  s = o.highestLevel,
                  a = null,
                  l = !1,
                  c = e.now(),
                  h = s;
                h >= r;
                h--
              ) {
                var u = !1,
                  d =
                    t.deltaPixelsFromPointsNoRotate(
                      this.source.getPixelRatio(h),
                      !0
                    ).x * this._scaleSpring.current.value
                if (h === r || (!l && d >= this.minPixelRatio))
                  (u = !0), (l = !0)
                else if (!l) continue
                var p =
                    t.deltaPixelsFromPointsNoRotate(
                      this.source.getPixelRatio(h),
                      !1
                    ).x * this._scaleSpring.current.value,
                  g =
                    t.deltaPixelsFromPointsNoRotate(
                      this.source.getPixelRatio(
                        Math.max(this.source.getClosestLevel(), 0)
                      ),
                      !1
                    ).x * this._scaleSpring.current.value,
                  m = this.immediateRender ? 1 : g,
                  v = Math.min(1, (d - 0.5) / 0.5),
                  f = m / Math.abs(m - p)
                if (
                  ((a = this._updateLevel(l, u, h, v, f, i, c, a)),
                  this._providesCoverage(this.coverage, h))
                )
                  break
              }
              this._drawTiles(this.lastDrawn),
                a && !a.context2D
                  ? (this._loadTile(a, c),
                    (this._needsDraw = !0),
                    this._setFullyLoaded(!1))
                  : this._setFullyLoaded(0 === this._tilesLoading)
            },
            _getCornerTiles: function (t, i, n) {
              var o, r, s, a
              this.wrapHorizontal
                ? ((o = e.positiveModulo(i.x, 1)),
                  (r = e.positiveModulo(n.x, 1)))
                : ((o = Math.max(0, i.x)), (r = Math.min(1, n.x)))
              var l = 1 / this.source.aspectRatio
              this.wrapVertical
                ? ((s = e.positiveModulo(i.y, l)),
                  (a = e.positiveModulo(n.y, l)))
                : ((s = Math.max(0, i.y)), (a = Math.min(l, n.y)))
              var c = this.source.getTileAtPoint(t, new e.Point(o, s)),
                h = this.source.getTileAtPoint(t, new e.Point(r, a)),
                u = this.source.getNumTiles(t)
              return (
                this.wrapHorizontal &&
                  ((c.x += u.x * Math.floor(i.x)),
                  (h.x += u.x * Math.floor(n.x))),
                this.wrapVertical &&
                  ((c.y += u.y * Math.floor(i.y / l)),
                  (h.y += u.y * Math.floor(n.y / l))),
                { topLeft: c, bottomRight: h }
              )
            },
            _updateLevel: function (e, t, i, n, o, r, s, a) {
              var l = r.getBoundingBox().getTopLeft(),
                c = r.getBoundingBox().getBottomRight()
              this.viewer &&
                this.viewer.raiseEvent('update-level', {
                  tiledImage: this,
                  havedrawn: e,
                  level: i,
                  opacity: n,
                  visibility: o,
                  drawArea: r,
                  topleft: l,
                  bottomright: c,
                  currenttime: s,
                  best: a,
                }),
                this._resetCoverage(this.coverage, i),
                this._resetCoverage(this.loadingCoverage, i)
              var h = this._getCornerTiles(i, l, c),
                u = h.topLeft,
                d = h.bottomRight,
                p = this.source.getNumTiles(i),
                g = this.viewport.pixelFromPoint(this.viewport.getCenter())
              this.getFlip() &&
                ((d.x += 1),
                this.wrapHorizontal || (d.x = Math.min(d.x, p.x - 1)))
              for (var m = u.x; m <= d.x; m++)
                for (var v = u.y; v <= d.y; v++) {
                  var f
                  if (this.getFlip()) {
                    var y = (p.x + (m % p.x)) % p.x
                    f = m + p.x - y - y - 1
                  } else f = m
                  null !== r.intersection(this.getTileBounds(i, f, v)) &&
                    (a = this._updateTile(t, e, f, v, i, n, o, g, p, s, a))
                }
              return a
            },
            _updateTile: function (e, t, i, n, o, r, s, a, l, c, h) {
              var u = this._getTile(
                  i,
                  n,
                  o,
                  c,
                  l,
                  this._worldWidthCurrent,
                  this._worldHeightCurrent
                ),
                d = t
              this.viewer &&
                this.viewer.raiseEvent('update-tile', {
                  tiledImage: this,
                  tile: u,
                }),
                this._setCoverage(this.coverage, o, i, n, !1)
              var p =
                u.loaded ||
                u.loading ||
                this._isCovered(this.loadingCoverage, o, i, n)
              if (
                (this._setCoverage(this.loadingCoverage, o, i, n, p), !u.exists)
              )
                return h
              if (
                (e &&
                  !d &&
                  (this._isCovered(this.coverage, o, i, n)
                    ? this._setCoverage(this.coverage, o, i, n, !0)
                    : (d = !0)),
                !d)
              )
                return h
              if (
                (this._positionTile(
                  u,
                  this.source.tileOverlap,
                  this.viewport,
                  a,
                  s
                ),
                !u.loaded)
              )
                if (u.context2D) this._setTileLoaded(u)
                else {
                  var g = this._tileCache.getImageRecord(u.cacheKey)
                  if (g) {
                    var m = g.getImage()
                    this._setTileLoaded(u, m)
                  }
                }
              u.loaded
                ? this._blendTile(u, i, n, o, r, c) && (this._needsDraw = !0)
                : u.loading
                ? this._tilesLoading++
                : p || (h = this._compareTiles(h, u))
              return h
            },
            _getTile: function (t, i, n, o, r, s, a) {
              var l,
                c,
                h,
                u,
                d,
                p,
                g,
                m,
                v,
                f,
                y = this.tilesMatrix,
                w = this.source
              return (
                y[n] || (y[n] = {}),
                y[n][t] || (y[n][t] = {}),
                (y[n][t][i] && !y[n][t][i].flipped == !this.flipped) ||
                  ((l = (r.x + (t % r.x)) % r.x),
                  (c = (r.y + (i % r.y)) % r.y),
                  (h = this.getTileBounds(n, t, i)),
                  (u = w.getTileBounds(n, l, c, !0)),
                  (d = w.tileExists(n, l, c)),
                  (p = w.getTileUrl(n, l, c)),
                  (g = w.getTilePostData(n, l, c)),
                  this.loadTilesWithAjax
                    ? ((m = w.getTileAjaxHeaders(n, l, c)),
                      e.isPlainObject(this.ajaxHeaders) &&
                        (m = e.extend({}, this.ajaxHeaders, m)))
                    : (m = null),
                  (v = w.getContext2D ? w.getContext2D(n, l, c) : void 0),
                  (f = new e.Tile(
                    n,
                    t,
                    i,
                    h,
                    d,
                    p,
                    v,
                    this.loadTilesWithAjax,
                    m,
                    u,
                    g,
                    w.getTileHashKey(n, l, c, p, m, g)
                  )),
                  this.getFlip()
                    ? 0 === l && (f.isRightMost = !0)
                    : l === r.x - 1 && (f.isRightMost = !0),
                  c === r.y - 1 && (f.isBottomMost = !0),
                  (f.flipped = this.flipped),
                  (y[n][t][i] = f)),
                ((f = y[n][t][i]).lastTouchTime = o),
                f
              )
            },
            _loadTile: function (e, t) {
              var i = this
              ;(e.loading = !0),
                this._imageLoader.addJob({
                  src: e.url,
                  postData: e.postData,
                  loadWithAjax: e.loadWithAjax,
                  ajaxHeaders: e.ajaxHeaders,
                  crossOriginPolicy: this.crossOriginPolicy,
                  ajaxWithCredentials: this.ajaxWithCredentials,
                  callback: function (n, o, r) {
                    i._onTileLoad(e, t, n, o, r)
                  },
                  abort: function () {
                    e.loading = !1
                  },
                })
            },
            _onTileLoad: function (t, i, n, o, r) {
              if (!n)
                return (
                  e.console.error(
                    'Tile %s failed to load: %s - error: %s',
                    t,
                    t.url,
                    o
                  ),
                  this.viewer.raiseEvent('tile-load-failed', {
                    tile: t,
                    tiledImage: this,
                    time: i,
                    message: o,
                    tileRequest: r,
                  }),
                  (t.loading = !1),
                  void (t.exists = !1)
                )
              if (i < this.lastResetTime)
                return (
                  e.console.warn(
                    'Ignoring tile %s loaded before reset: %s',
                    t,
                    t.url
                  ),
                  void (t.loading = !1)
                )
              var s = this,
                a = function () {
                  var e = s.source.getClosestLevel()
                  s._setTileLoaded(t, n, e, r)
                }
              this._midDraw ? window.setTimeout(a, 1) : a()
            },
            _setTileLoaded: function (e, t, i, n) {
              var o = 0,
                r = this
              function s() {
                return o++, a
              }
              function a() {
                0 === --o &&
                  ((e.loading = !1),
                  (e.loaded = !0),
                  e.context2D ||
                    r._tileCache.cacheTile({
                      image: t,
                      tile: e,
                      cutoff: i,
                      tiledImage: r,
                    }),
                  (r._needsDraw = !0))
              }
              this.viewer.raiseEvent('tile-loaded', {
                tile: e,
                tiledImage: this,
                tileRequest: n,
                image: t,
                getCompletionCallback: s,
              }),
                s()()
            },
            _positionTile: function (t, i, n, o, r) {
              var s = t.bounds.getTopLeft()
              ;(s.x *= this._scaleSpring.current.value),
                (s.y *= this._scaleSpring.current.value),
                (s.x += this._xSpring.current.value),
                (s.y += this._ySpring.current.value)
              var a = t.bounds.getSize()
              ;(a.x *= this._scaleSpring.current.value),
                (a.y *= this._scaleSpring.current.value)
              var l = n.pixelFromPointNoRotate(s, !0),
                c = n.pixelFromPointNoRotate(s, !1),
                h = n.deltaPixelsFromPointsNoRotate(a, !0),
                u = n.deltaPixelsFromPointsNoRotate(a, !1),
                d = c.plus(u.divide(2)),
                p = o.squaredDistanceTo(d)
              i || (h = h.plus(new e.Point(1, 1))),
                t.isRightMost && this.wrapHorizontal && (h.x += 0.75),
                t.isBottomMost && this.wrapVertical && (h.y += 0.75),
                (t.position = l),
                (t.size = h),
                (t.squaredDistance = p),
                (t.visibility = r)
            },
            _blendTile: function (e, t, i, n, o, r) {
              var s,
                a,
                l = 1e3 * this.blendTime
              if (
                (e.blendStart || (e.blendStart = r),
                (s = r - e.blendStart),
                (a = l ? Math.min(1, s / l) : 1),
                this.alwaysBlend && (a *= o),
                (e.opacity = a),
                this.lastDrawn.push(e),
                1 === a)
              )
                this._setCoverage(this.coverage, n, t, i, !0),
                  (this._hasOpaqueTile = !0)
              else if (s < l) return !0
              return !1
            },
            _compareTiles: function (e, t) {
              return e
                ? t.visibility > e.visibility ||
                  (t.visibility === e.visibility &&
                    t.squaredDistance < e.squaredDistance)
                  ? t
                  : e
                : t
            },
            _drawTiles: function (t) {
              if (
                0 !== this.opacity &&
                (0 !== t.length || this.placeholderFillStyle)
              ) {
                var r,
                  s,
                  a,
                  l = t[0]
                l &&
                  (r =
                    this.opacity < 1 ||
                    (this.compositeOperation &&
                      'source-over' !== this.compositeOperation) ||
                    (!this._isBottomItem() && l._hasTransparencyChannel()))
                var c,
                  h = this.viewport.getZoom(!0),
                  u = this.viewportToImageZoom(h)
                t.length > 1 &&
                  u > this.smoothTileEdgesMinZoom &&
                  !this.iOSDevice &&
                  this.getRotation(!0) % 360 == 0 &&
                  e.supportsCanvas &&
                  this.viewer.useCanvas &&
                  ((r = !0),
                  (s = l.getScaleForEdgeSmoothing()),
                  (a = l.getTranslationForEdgeSmoothing(
                    s,
                    this._drawer.getCanvasSize(!1),
                    this._drawer.getCanvasSize(!0)
                  ))),
                  r &&
                    (s ||
                      ((c = this.viewport
                        .viewportToViewerElementRectangle(
                          this.getClippedBounds(!0)
                        )
                        .getIntegerBoundingBox()),
                      this._drawer.viewer.viewport.getFlip() &&
                        ((0 === this.viewport.degrees &&
                          this.getRotation(!0) % 360 == 0) ||
                          (c.x =
                            this._drawer.viewer.container.clientWidth -
                            (c.x + c.width))),
                      (c = c.times(e.pixelDensityRatio))),
                    this._drawer._clear(!0, c)),
                  s ||
                    (0 !== this.viewport.degrees &&
                      this._drawer._offsetForRotation({
                        degrees: this.viewport.degrees,
                        useSketch: r,
                      }),
                    this.getRotation(!0) % 360 != 0 &&
                      this._drawer._offsetForRotation({
                        degrees: this.getRotation(!0),
                        point: this.viewport.pixelFromPointNoRotate(
                          this._getRotationPoint(!0),
                          !0
                        ),
                        useSketch: r,
                      }),
                    0 === this.viewport.degrees &&
                      this.getRotation(!0) % 360 == 0 &&
                      this._drawer.viewer.viewport.getFlip() &&
                      this._drawer._flip())
                var d = !1
                if (this._clip) {
                  this._drawer.saveContext(r)
                  var p = this.imageToViewportRectangle(this._clip, !0)
                  p = p.rotate(
                    -this.getRotation(!0),
                    this._getRotationPoint(!0)
                  )
                  var g = this._drawer.viewportToDrawerRectangle(p)
                  s && (g = g.times(s)),
                    a && (g = g.translate(a)),
                    this._drawer.setClip(g, r),
                    (d = !0)
                }
                if (this._croppingPolygons) {
                  this._drawer.saveContext(r)
                  try {
                    var m = this._croppingPolygons.map(function (e) {
                      return e.map(function (e) {
                        var t = this.imageToViewportCoordinates(
                            e.x,
                            e.y,
                            !0
                          ).rotate(
                            -this.getRotation(!0),
                            this._getRotationPoint(!0)
                          ),
                          i = this._drawer.viewportCoordToDrawerCoord(t)
                        return s && (i = i.times(s)), i
                      })
                    })
                    this._drawer.clipWithPolygons(m, r)
                  } catch (t) {
                    e.console.error(t)
                  }
                  d = !0
                }
                if (this.placeholderFillStyle && !1 === this._hasOpaqueTile) {
                  var v = this._drawer.viewportToDrawerRectangle(
                    this.getBounds(!0)
                  )
                  s && (v = v.times(s)), a && (v = v.translate(a))
                  var f = null
                  ;(f =
                    'function' == typeof this.placeholderFillStyle
                      ? this.placeholderFillStyle(this, this._drawer.context)
                      : this.placeholderFillStyle),
                    this._drawer.drawRectangle(v, f, r)
                }
                var y = (function (t) {
                    if ('number' == typeof t) return o(t)
                    if (!t || !e.Browser) return i
                    var r = t[e.Browser.vendor]
                    n(r) && (r = t['*'])
                    return o(r)
                  })(this.subPixelRoundingForTransparency),
                  w = !1
                if (y === e.SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS) w = !0
                else if (y === e.SUBPIXEL_ROUNDING_OCCURRENCES.ONLY_AT_REST) {
                  w = !(this.viewer && this.viewer.isAnimating())
                }
                for (var T = t.length - 1; T >= 0; T--)
                  (l = t[T]),
                    this._drawer.drawTile(l, this._drawingHandler, r, s, a, w),
                    (l.beingDrawn = !0),
                    this.viewer &&
                      this.viewer.raiseEvent('tile-drawn', {
                        tiledImage: this,
                        tile: l,
                      })
                d && this._drawer.restoreContext(r),
                  s ||
                    (this.getRotation(!0) % 360 != 0 &&
                      this._drawer._restoreRotationChanges(r),
                    0 !== this.viewport.degrees &&
                      this._drawer._restoreRotationChanges(r)),
                  r &&
                    (s &&
                      (0 !== this.viewport.degrees &&
                        this._drawer._offsetForRotation({
                          degrees: this.viewport.degrees,
                          useSketch: !1,
                        }),
                      this.getRotation(!0) % 360 != 0 &&
                        this._drawer._offsetForRotation({
                          degrees: this.getRotation(!0),
                          point: this.viewport.pixelFromPointNoRotate(
                            this._getRotationPoint(!0),
                            !0
                          ),
                          useSketch: !1,
                        })),
                    this._drawer.blendSketch({
                      opacity: this.opacity,
                      scale: s,
                      translate: a,
                      compositeOperation: this.compositeOperation,
                      bounds: c,
                    }),
                    s &&
                      (this.getRotation(!0) % 360 != 0 &&
                        this._drawer._restoreRotationChanges(!1),
                      0 !== this.viewport.degrees &&
                        this._drawer._restoreRotationChanges(!1))),
                  s ||
                    (0 === this.viewport.degrees &&
                      this.getRotation(!0) % 360 == 0 &&
                      this._drawer.viewer.viewport.getFlip() &&
                      this._drawer._flip()),
                  this._drawDebugInfo(t)
              }
            },
            _drawDebugInfo: function (t) {
              if (this.debugMode)
                for (var i = t.length - 1; i >= 0; i--) {
                  var n = t[i]
                  try {
                    this._drawer.drawDebugInfo(n, t.length, i, this)
                  } catch (t) {
                    e.console.error(t)
                  }
                }
            },
            _providesCoverage: function (e, t, i, n) {
              var o, r, s, a
              if (!e[t]) return !1
              if (void 0 === i || void 0 === n) {
                for (s in (o = e[t]))
                  if (Object.prototype.hasOwnProperty.call(o, s))
                    for (a in (r = o[s]))
                      if (Object.prototype.hasOwnProperty.call(r, a) && !r[a])
                        return !1
                return !0
              }
              return (
                void 0 === e[t][i] || void 0 === e[t][i][n] || !0 === e[t][i][n]
              )
            },
            _isCovered: function (e, t, i, n) {
              return void 0 === i || void 0 === n
                ? this._providesCoverage(e, t + 1)
                : this._providesCoverage(e, t + 1, 2 * i, 2 * n) &&
                    this._providesCoverage(e, t + 1, 2 * i, 2 * n + 1) &&
                    this._providesCoverage(e, t + 1, 2 * i + 1, 2 * n) &&
                    this._providesCoverage(e, t + 1, 2 * i + 1, 2 * n + 1)
            },
            _setCoverage: function (t, i, n, o, r) {
              t[i]
                ? (t[i][n] || (t[i][n] = {}), (t[i][n][o] = r))
                : e.console.warn(
                    "Setting coverage for a tile before its level's coverage has been reset: %s",
                    i
                  )
            },
            _resetCoverage: function (e, t) {
              e[t] = {}
            },
          })
        var i = e.SUBPIXEL_ROUNDING_OCCURRENCES.NEVER
        function n(t) {
          return (
            t !== e.SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS &&
            t !== e.SUBPIXEL_ROUNDING_OCCURRENCES.ONLY_AT_REST &&
            t !== e.SUBPIXEL_ROUNDING_OCCURRENCES.NEVER
          )
        }
        function o(e) {
          return n(e) ? i : e
        }
      })(t),
      (function (e) {
        var t = function (t) {
            e.console.assert(t, '[TileCache.cacheTile] options is required'),
              e.console.assert(
                t.tile,
                '[TileCache.cacheTile] options.tile is required'
              ),
              e.console.assert(
                t.tiledImage,
                '[TileCache.cacheTile] options.tiledImage is required'
              ),
              (this.tile = t.tile),
              (this.tiledImage = t.tiledImage)
          },
          i = function (t) {
            e.console.assert(t, '[ImageRecord] options is required'),
              e.console.assert(
                t.image,
                '[ImageRecord] options.image is required'
              ),
              (this._image = t.image),
              (this._tiles = [])
          }
        ;(i.prototype = {
          destroy: function () {
            ;(this._image = null),
              (this._renderedContext = null),
              (this._tiles = null)
          },
          getImage: function () {
            return this._image
          },
          getRenderedContext: function () {
            if (!this._renderedContext) {
              var e = document.createElement('canvas')
              ;(e.width = this._image.width),
                (e.height = this._image.height),
                (this._renderedContext = e.getContext('2d')),
                this._renderedContext.drawImage(this._image, 0, 0),
                (this._image = null)
            }
            return this._renderedContext
          },
          setRenderedContext: function (t) {
            e.console.error(
              'ImageRecord.setRenderedContext is deprecated. The rendered context should be created by the ImageRecord itself when calling ImageRecord.getRenderedContext.'
            ),
              (this._renderedContext = t)
          },
          addTile: function (t) {
            e.console.assert(t, '[ImageRecord.addTile] tile is required'),
              this._tiles.push(t)
          },
          removeTile: function (t) {
            for (var i = 0; i < this._tiles.length; i++)
              if (this._tiles[i] === t) return void this._tiles.splice(i, 1)
            e.console.warn(
              '[ImageRecord.removeTile] trying to remove unknown tile',
              t
            )
          },
          getTileCount: function () {
            return this._tiles.length
          },
        }),
          (e.TileCache = function (t) {
            ;(t = t || {}),
              (this._maxImageCacheCount =
                t.maxImageCacheCount || e.DEFAULT_SETTINGS.maxImageCacheCount),
              (this._tilesLoaded = []),
              (this._imagesLoaded = []),
              (this._imagesLoadedCount = 0)
          }),
          (e.TileCache.prototype = {
            numTilesLoaded: function () {
              return this._tilesLoaded.length
            },
            cacheTile: function (n) {
              e.console.assert(n, '[TileCache.cacheTile] options is required'),
                e.console.assert(
                  n.tile,
                  '[TileCache.cacheTile] options.tile is required'
                ),
                e.console.assert(
                  n.tile.cacheKey,
                  '[TileCache.cacheTile] options.tile.cacheKey is required'
                ),
                e.console.assert(
                  n.tiledImage,
                  '[TileCache.cacheTile] options.tiledImage is required'
                )
              var o = n.cutoff || 0,
                r = this._tilesLoaded.length,
                s = this._imagesLoaded[n.tile.cacheKey]
              if (
                (s ||
                  (e.console.assert(
                    n.image,
                    '[TileCache.cacheTile] options.image is required to create an ImageRecord'
                  ),
                  (s = this._imagesLoaded[n.tile.cacheKey] = new i({
                    image: n.image,
                  })),
                  this._imagesLoadedCount++),
                s.addTile(n.tile),
                (n.tile.cacheImageRecord = s),
                this._imagesLoadedCount > this._maxImageCacheCount)
              ) {
                for (
                  var a,
                    l,
                    c,
                    h,
                    u,
                    d,
                    p = null,
                    g = -1,
                    m = null,
                    v = this._tilesLoaded.length - 1;
                  v >= 0;
                  v--
                )
                  (a = (d = this._tilesLoaded[v]).tile).level <= o ||
                    a.beingDrawn ||
                    (p
                      ? ((h = a.lastTouchTime),
                        (l = p.lastTouchTime),
                        (u = a.level),
                        (c = p.level),
                        (h < l || (h === l && u > c)) &&
                          ((p = a), (g = v), (m = d)))
                      : ((p = a), (g = v), (m = d)))
                p && g >= 0 && (this._unloadTile(m), (r = g))
              }
              this._tilesLoaded[r] = new t({
                tile: n.tile,
                tiledImage: n.tiledImage,
              })
            },
            clearTilesFor: function (t) {
              var i
              e.console.assert(
                t,
                '[TileCache.clearTilesFor] tiledImage is required'
              )
              for (var n = 0; n < this._tilesLoaded.length; ++n)
                (i = this._tilesLoaded[n]).tiledImage === t &&
                  (this._unloadTile(i), this._tilesLoaded.splice(n, 1), n--)
            },
            getImageRecord: function (t) {
              return (
                e.console.assert(
                  t,
                  '[TileCache.getImageRecord] cacheKey is required'
                ),
                this._imagesLoaded[t]
              )
            },
            _unloadTile: function (t) {
              e.console.assert(
                t,
                '[TileCache._unloadTile] tileRecord is required'
              )
              var i = t.tile,
                n = t.tiledImage
              i.unload(), (i.cacheImageRecord = null)
              var o = this._imagesLoaded[i.cacheKey]
              o.removeTile(i),
                o.getTileCount() ||
                  (o.destroy(),
                  delete this._imagesLoaded[i.cacheKey],
                  this._imagesLoadedCount--),
                n.viewer.raiseEvent('tile-unloaded', { tile: i, tiledImage: n })
            },
          })
      })(t),
      (function (e) {
        ;(e.World = function (t) {
          var i = this
          e.console.assert(t.viewer, '[World] options.viewer is required'),
            e.EventSource.call(this),
            (this.viewer = t.viewer),
            (this._items = []),
            (this._needsDraw = !1),
            (this._autoRefigureSizes = !0),
            (this._needsSizesFigured = !1),
            (this._delegatedFigureSizes = function (e) {
              i._autoRefigureSizes
                ? i._figureSizes()
                : (i._needsSizesFigured = !0)
            }),
            this._figureSizes()
        }),
          e.extend(e.World.prototype, e.EventSource.prototype, {
            addItem: function (t, i) {
              if (
                (e.console.assert(t, '[World.addItem] item is required'),
                e.console.assert(
                  t instanceof e.TiledImage,
                  '[World.addItem] only TiledImages supported at this time'
                ),
                void 0 !== (i = i || {}).index)
              ) {
                var n = Math.max(0, Math.min(this._items.length, i.index))
                this._items.splice(n, 0, t)
              } else this._items.push(t)
              this._autoRefigureSizes
                ? this._figureSizes()
                : (this._needsSizesFigured = !0),
                (this._needsDraw = !0),
                t.addHandler('bounds-change', this._delegatedFigureSizes),
                t.addHandler('clip-change', this._delegatedFigureSizes),
                this.raiseEvent('add-item', { item: t })
            },
            getItemAt: function (t) {
              return (
                e.console.assert(
                  void 0 !== t,
                  '[World.getItemAt] index is required'
                ),
                this._items[t]
              )
            },
            getIndexOfItem: function (t) {
              return (
                e.console.assert(t, '[World.getIndexOfItem] item is required'),
                e.indexOf(this._items, t)
              )
            },
            getItemCount: function () {
              return this._items.length
            },
            setItemIndex: function (t, i) {
              e.console.assert(t, '[World.setItemIndex] item is required'),
                e.console.assert(
                  void 0 !== i,
                  '[World.setItemIndex] index is required'
                )
              var n = this.getIndexOfItem(t)
              if (i >= this._items.length)
                throw new Error('Index bigger than number of layers.')
              i !== n &&
                -1 !== n &&
                (this._items.splice(n, 1),
                this._items.splice(i, 0, t),
                (this._needsDraw = !0),
                this.raiseEvent('item-index-change', {
                  item: t,
                  previousIndex: n,
                  newIndex: i,
                }))
            },
            removeItem: function (t) {
              e.console.assert(t, '[World.removeItem] item is required')
              var i = e.indexOf(this._items, t)
              ;-1 !== i &&
                (t.removeHandler('bounds-change', this._delegatedFigureSizes),
                t.removeHandler('clip-change', this._delegatedFigureSizes),
                t.destroy(),
                this._items.splice(i, 1),
                this._figureSizes(),
                (this._needsDraw = !0),
                this._raiseRemoveItem(t))
            },
            removeAll: function () {
              var e, t
              for (
                this.viewer._cancelPendingImages(), t = 0;
                t < this._items.length;
                t++
              )
                (e = this._items[t]).removeHandler(
                  'bounds-change',
                  this._delegatedFigureSizes
                ),
                  e.removeHandler('clip-change', this._delegatedFigureSizes),
                  e.destroy()
              var i = this._items
              for (
                this._items = [],
                  this._figureSizes(),
                  this._needsDraw = !0,
                  t = 0;
                t < i.length;
                t++
              )
                (e = i[t]), this._raiseRemoveItem(e)
            },
            resetItems: function () {
              for (var e = 0; e < this._items.length; e++)
                this._items[e].reset()
            },
            update: function () {
              for (var e = !1, t = 0; t < this._items.length; t++)
                e = this._items[t].update() || e
              return e
            },
            draw: function () {
              for (var e = 0; e < this._items.length; e++) this._items[e].draw()
              this._needsDraw = !1
            },
            needsDraw: function () {
              for (var e = 0; e < this._items.length; e++)
                if (this._items[e].needsDraw()) return !0
              return this._needsDraw
            },
            getHomeBounds: function () {
              return this._homeBounds.clone()
            },
            getContentFactor: function () {
              return this._contentFactor
            },
            setAutoRefigureSizes: function (e) {
              ;(this._autoRefigureSizes = e),
                e & this._needsSizesFigured &&
                  (this._figureSizes(), (this._needsSizesFigured = !1))
            },
            arrange: function (t) {
              var i,
                n = (t = t || {}).immediately || !1,
                o = t.layout || e.DEFAULT_SETTINGS.collectionLayout,
                r = t.rows || e.DEFAULT_SETTINGS.collectionRows,
                s = t.columns || e.DEFAULT_SETTINGS.collectionColumns,
                a = t.tileSize || e.DEFAULT_SETTINGS.collectionTileSize,
                l =
                  a + (t.tileMargin || e.DEFAULT_SETTINGS.collectionTileMargin)
              i = !t.rows && s ? s : Math.ceil(this._items.length / r)
              var c,
                h,
                u,
                d,
                p,
                g = 0,
                m = 0
              this.setAutoRefigureSizes(!1)
              for (var v = 0; v < this._items.length; v++)
                v &&
                  v % i == 0 &&
                  ('horizontal' === o
                    ? ((m += l), (g = 0))
                    : ((g += l), (m = 0))),
                  (d =
                    (u =
                      (h = (c = this._items[v]).getBounds()).width > h.height
                        ? a
                        : a * (h.width / h.height)) *
                    (h.height / h.width)),
                  (p = new e.Point(g + (a - u) / 2, m + (a - d) / 2)),
                  c.setPosition(p, n),
                  c.setWidth(u, n),
                  'horizontal' === o ? (g += l) : (m += l)
              this.setAutoRefigureSizes(!0)
            },
            _figureSizes: function () {
              var t = this._homeBounds ? this._homeBounds.clone() : null,
                i = this._contentSize ? this._contentSize.clone() : null,
                n = this._contentFactor || 0
              if (this._items.length) {
                var o = this._items[0],
                  r = o.getBounds()
                this._contentFactor = o.getContentSize().x / r.width
                for (
                  var s = o.getClippedBounds().getBoundingBox(),
                    a = s.x,
                    l = s.y,
                    c = s.x + s.width,
                    h = s.y + s.height,
                    u = 1;
                  u < this._items.length;
                  u++
                )
                  (r = (o = this._items[u]).getBounds()),
                    (this._contentFactor = Math.max(
                      this._contentFactor,
                      o.getContentSize().x / r.width
                    )),
                    (s = o.getClippedBounds().getBoundingBox()),
                    (a = Math.min(a, s.x)),
                    (l = Math.min(l, s.y)),
                    (c = Math.max(c, s.x + s.width)),
                    (h = Math.max(h, s.y + s.height))
                ;(this._homeBounds = new e.Rect(a, l, c - a, h - l)),
                  (this._contentSize = new e.Point(
                    this._homeBounds.width * this._contentFactor,
                    this._homeBounds.height * this._contentFactor
                  ))
              } else
                (this._homeBounds = new e.Rect(0, 0, 1, 1)),
                  (this._contentSize = new e.Point(1, 1)),
                  (this._contentFactor = 1)
              ;(this._contentFactor === n &&
                this._homeBounds.equals(t) &&
                this._contentSize.equals(i)) ||
                this.raiseEvent('metrics-change', {})
            },
            _raiseRemoveItem: function (e) {
              this.raiseEvent('remove-item', { item: e })
            },
          })
      })(t)
  })
  function create_fragment$9(e) {
    let t, i, n, o
    return {
      c() {
        ;(t = space()),
          (i = element('div')),
          (i.innerHTML = '<div class="handle svelte-1v3u4uh"></div>'),
          attr(i, 'class', 'bar svelte-1v3u4uh'),
          toggle_class(i, 'active', e[1])
      },
      m(r, s) {
        insert(r, t, s),
          insert(r, i, s),
          e[4](i),
          n ||
            ((o = [
              listen(window, 'mouseup', e[3]),
              listen(i, 'mousedown', e[2]),
            ]),
            (n = !0))
      },
      p(e, [t]) {
        2 & t && toggle_class(i, 'active', e[1])
      },
      i: noop,
      o: noop,
      d(r) {
        r && detach(t), r && detach(i), e[4](null), (n = !1), run_all(o)
      },
    }
  }
  function instance$9(e, t, i) {
    const n = createEventDispatcher()
    let o,
      r = void 0,
      s = null
    function a(e) {
      n('resize', { y: e.y - s })
    }
    return (
      (e.$$.update = () => {
        32 & e.$$.dirty && i(1, (o = null !== s))
      }),
      [
        r,
        o,
        function (e) {
          i(5, (s = e.y - r.offsetTop)),
            document.addEventListener('mousemove', a, !1)
        },
        function () {
          i(5, (s = null)), document.removeEventListener('mousemove', a, !1)
        },
        function (e) {
          binding_callbacks[e ? 'unshift' : 'push'](() => {
            ;(r = e), i(0, r)
          })
        },
      ]
    )
  }
  class ResizeBar extends SvelteComponent {
    constructor(e) {
      super(), init(this, e, instance$9, create_fragment$9, safe_not_equal, {})
    }
  }
  function get_each_context$1(e, t, i) {
    const n = e.slice()
    return (n[25] = t[i]), n
  }
  function get_each_context_1(e, t, i) {
    const n = e.slice()
    return (n[28] = t[i]), n
  }
  function get_each_context_2(e, t, i) {
    const n = e.slice()
    return (n[28] = t[i]), n
  }
  function create_each_block_2(e) {
    let t,
      i,
      n,
      o = e[28] + ''
    return {
      c() {
        ;(t = element('option')),
          (i = text(o)),
          (t.__value = n = e[28]),
          (t.value = t.__value)
      },
      m(e, n) {
        insert(e, t, n), append(t, i)
      },
      p(e, r) {
        1 & r[0] && o !== (o = e[28] + '') && set_data(i, o),
          1 & r[0] &&
            n !== (n = e[28]) &&
            ((t.__value = n), (t.value = t.__value))
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_else_block_1$1(e) {
    let t
    return {
      c() {
        ;(t = element('option')),
          (t.textContent = 'No image references'),
          (t.disabled = !0),
          (t.__value = 'No image references'),
          (t.value = t.__value)
      },
      m(e, i) {
        insert(e, t, i)
      },
      p: noop,
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_if_block_2$1(e) {
    let t,
      i = e[0].imageRefs,
      n = []
    for (let t = 0; t < i.length; t += 1)
      n[t] = create_each_block_1(get_each_context_1(e, i, t))
    return {
      c() {
        for (let e = 0; e < n.length; e += 1) n[e].c()
        t = empty()
      },
      m(e, i) {
        for (let t = 0; t < n.length; t += 1) n[t].m(e, i)
        insert(e, t, i)
      },
      p(e, o) {
        if (1 & o[0]) {
          let r
          for (i = e[0].imageRefs, r = 0; r < i.length; r += 1) {
            const s = get_each_context_1(e, i, r)
            n[r]
              ? n[r].p(s, o)
              : ((n[r] = create_each_block_1(s)),
                n[r].c(),
                n[r].m(t.parentNode, t))
          }
          for (; r < n.length; r += 1) n[r].d(1)
          n.length = i.length
        }
      },
      d(e) {
        destroy_each(n, e), e && detach(t)
      },
    }
  }
  function create_each_block_1(e) {
    let t,
      i,
      n,
      o = e[28] + ''
    return {
      c() {
        ;(t = element('option')),
          (i = text(o)),
          (t.__value = n = e[28]),
          (t.value = t.__value)
      },
      m(e, n) {
        insert(e, t, n), append(t, i)
      },
      p(e, r) {
        1 & r[0] && o !== (o = e[28] + '') && set_data(i, o),
          1 & r[0] &&
            n !== (n = e[28]) &&
            ((t.__value = n), (t.value = t.__value))
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_default_slot$2(e) {
    let t
    return {
      c() {
        t = text('Edit References')
      },
      m(e, i) {
        insert(e, t, i)
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_else_block$3(e) {
    let t
    return {
      c() {
        t = text('Show')
      },
      m(e, i) {
        insert(e, t, i)
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_if_block_1$4(e) {
    let t
    return {
      c() {
        t = text('Hide')
      },
      m(e, i) {
        insert(e, t, i)
      },
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_each_block$1(e) {
    let t,
      i,
      n,
      o = e[25] + ''
    return {
      c() {
        ;(t = text(o)), (i = space()), (n = element('br'))
      },
      m(e, o) {
        insert(e, t, o), insert(e, i, o), insert(e, n, o)
      },
      p(e, i) {
        1 & i[0] && o !== (o = e[25] + '') && set_data(t, o)
      },
      d(e) {
        e && detach(t), e && detach(i), e && detach(n)
      },
    }
  }
  function create_if_block$5(e) {
    let t,
      i,
      n,
      o,
      r,
      s,
      a,
      l,
      c,
      h,
      u,
      d,
      p,
      g,
      m,
      v,
      f,
      y,
      w,
      T,
      x,
      _,
      S,
      E,
      P,
      b,
      R,
      C,
      k,
      O,
      I,
      D,
      B,
      L,
      H,
      z,
      M,
      F,
      N,
      A,
      $ = e[0].catalog.urn + '',
      j = e[0].catalog.citationScheme + '',
      U = e[0].catalog.groupName + '',
      W = e[0].catalog.workTitle + '',
      V = e[0].catalog.versionLabel + '',
      G = e[0].catalog.exemplarLabel + '',
      q = e[0].catalog.online + '',
      Z = e[0].catalog.language + ''
    return {
      c() {
        ;(t = element('div')),
          (i = element('ul')),
          (n = element('li')),
          (n.innerHTML =
            '<label for="passage.id" class="svelte-o8m30x">Metadata</label>'),
          (o = space()),
          (r = element('li')),
          (s = element('a')),
          (a = text('Edit')),
          (c = space()),
          (h = element('li')),
          (u = element('a')),
          (u.textContent = '×'),
          (d = space()),
          (p = element('div')),
          (g = element('dl')),
          (m = element('dt')),
          (m.textContent = 'Work URN'),
          (v = element('dd')),
          (f = text($)),
          (y = element('dt')),
          (y.textContent = 'Scheme'),
          (w = element('dd')),
          (T = text(j)),
          (x = element('dt')),
          (x.textContent = 'Workgroup'),
          (_ = element('dd')),
          (S = text(U)),
          (E = element('dt')),
          (E.textContent = 'Title'),
          (P = element('dd')),
          (b = text(W)),
          (R = element('dt')),
          (R.textContent = 'Version Label'),
          (C = element('dd')),
          (k = text(V)),
          (O = element('dt')),
          (O.textContent = 'Exemplar Label'),
          (I = element('dd')),
          (D = text(G)),
          (B = element('dt')),
          (B.textContent = 'Online'),
          (L = element('dd')),
          (H = text(q)),
          (z = element('dt')),
          (z.textContent = 'Language'),
          (M = element('dd')),
          (F = text(Z)),
          attr(n, 'class', 'svelte-o8m30x'),
          attr(s, 'href', (l = '/editcat/' + e[0].id)),
          attr(r, 'class', 'svelte-o8m30x'),
          attr(u, 'href', '#top'),
          attr(u, 'class', 'close-pane svelte-o8m30x'),
          attr(h, 'class', 'fl svelte-o8m30x'),
          attr(i, 'class', 'toolbar svelte-o8m30x'),
          attr(m, 'class', 'svelte-o8m30x'),
          attr(v, 'class', 'svelte-o8m30x'),
          attr(y, 'class', 'svelte-o8m30x'),
          attr(w, 'class', 'svelte-o8m30x'),
          attr(x, 'class', 'svelte-o8m30x'),
          attr(_, 'class', 'svelte-o8m30x'),
          attr(E, 'class', 'svelte-o8m30x'),
          attr(P, 'class', 'svelte-o8m30x'),
          attr(R, 'class', 'svelte-o8m30x'),
          attr(C, 'class', 'svelte-o8m30x'),
          attr(O, 'class', 'svelte-o8m30x'),
          attr(I, 'class', 'svelte-o8m30x'),
          attr(B, 'class', 'svelte-o8m30x'),
          attr(L, 'class', 'svelte-o8m30x'),
          attr(z, 'class', 'svelte-o8m30x'),
          attr(M, 'class', 'svelte-o8m30x'),
          attr(p, 'class', 'metadata svelte-o8m30x'),
          attr(t, 'class', 'pane svelte-o8m30x')
      },
      m(l, $) {
        insert(l, t, $),
          append(t, i),
          append(i, n),
          append(i, o),
          append(i, r),
          append(r, s),
          append(s, a),
          append(i, c),
          append(i, h),
          append(h, u),
          append(t, d),
          append(t, p),
          append(p, g),
          append(g, m),
          append(g, v),
          append(v, f),
          append(g, y),
          append(g, w),
          append(w, T),
          append(g, x),
          append(g, _),
          append(_, S),
          append(g, E),
          append(g, P),
          append(P, b),
          append(g, R),
          append(g, C),
          append(C, k),
          append(g, O),
          append(g, I),
          append(I, D),
          append(g, B),
          append(g, L),
          append(L, H),
          append(g, z),
          append(g, M),
          append(M, F),
          N || ((A = listen(u, 'click', prevent_default(e[9]))), (N = !0))
      },
      p(e, t) {
        1 & t[0] && l !== (l = '/editcat/' + e[0].id) && attr(s, 'href', l),
          1 & t[0] && $ !== ($ = e[0].catalog.urn + '') && set_data(f, $),
          1 & t[0] &&
            j !== (j = e[0].catalog.citationScheme + '') &&
            set_data(T, j),
          1 & t[0] && U !== (U = e[0].catalog.groupName + '') && set_data(S, U),
          1 & t[0] && W !== (W = e[0].catalog.workTitle + '') && set_data(b, W),
          1 & t[0] &&
            V !== (V = e[0].catalog.versionLabel + '') &&
            set_data(k, V),
          1 & t[0] &&
            G !== (G = e[0].catalog.exemplarLabel + '') &&
            set_data(D, G),
          1 & t[0] && q !== (q = e[0].catalog.online + '') && set_data(H, q),
          1 & t[0] && Z !== (Z = e[0].catalog.language + '') && set_data(F, Z)
      },
      d(e) {
        e && detach(t), (N = !1), A()
      },
    }
  }
  function create_fragment$a(e) {
    let t,
      i,
      n,
      o,
      r,
      s,
      a,
      l,
      c,
      h,
      u,
      d,
      p,
      g,
      m,
      v,
      f,
      y,
      w,
      T,
      x,
      _,
      S,
      E,
      P,
      b,
      R,
      C,
      k,
      O,
      I,
      D,
      B,
      L,
      H,
      z,
      M,
      F,
      N,
      A,
      $,
      j,
      U,
      W,
      V,
      G,
      q,
      Z,
      X,
      K,
      Y,
      Q,
      J,
      ee,
      te = e[0].textRefs,
      ie = []
    for (let t = 0; t < te.length; t += 1)
      ie[t] = create_each_block_2(get_each_context_2(e, te, t))
    function ne(e, t) {
      return e[0].imageRefs ? create_if_block_2$1 : create_else_block_1$1
    }
    let oe = ne(e),
      re = oe(e)
    function se(e, t) {
      return e[3] ? create_if_block_1$4 : create_else_block$3
    }
    b = new Link({
      props: {
        to: '/edit2/' + e[0].id,
        $$slots: { default: [create_default_slot$2] },
        $$scope: { ctx: e },
      },
    })
    let ae = se(e),
      le = ae(e)
    ;(z = new ResizeBar({})), z.$on('resize', e[10])
    let ce = e[0].transcriptionLines,
      he = []
    for (let t = 0; t < ce.length; t += 1)
      he[t] = create_each_block$1(get_each_context$1(e, ce, t))
    let ue = e[3] && create_if_block$5(e)
    return {
      c() {
        ;(t = element('nav')),
          (i = element('ul')),
          (n = element('li')),
          (n.innerHTML =
            '<label for="passage.id" class="svelte-o8m30x">Passage</label>'),
          (o = space()),
          (r = element('li')),
          (s = element('div')),
          (a = element('select'))
        for (let e = 0; e < ie.length; e += 1) ie[e].c()
        ;(l = space()),
          (c = element('li')),
          (h = element('code')),
          (u = text(e[6])),
          (d = space()),
          (p = element('li')),
          (g = element('a')),
          (g.textContent = '← Previous Passage'),
          (m = space()),
          (v = element('li')),
          (f = element('a')),
          (f.textContent = 'Next Passage →'),
          (y = space()),
          (w = element('li')),
          (w.innerHTML =
            '<label for="passage.id" class="svelte-o8m30x">Folio</label>'),
          (T = space()),
          (x = element('li')),
          (_ = element('div')),
          (S = element('select')),
          re.c(),
          (E = space()),
          (P = element('li')),
          create_component(b.$$.fragment),
          (R = space()),
          (C = element('li')),
          (k = element('a')),
          le.c(),
          (O = text('\n        Metadata')),
          (I = space()),
          (D = element('div')),
          (B = element('section')),
          (L = element('div')),
          (H = space()),
          create_component(z.$$.fragment),
          (M = space()),
          (F = element('section')),
          (N = element('div')),
          (A = element('div')),
          ($ = element('ul')),
          (j = element('li')),
          (j.innerHTML =
            '<label for="passage.id" class="svelte-o8m30x">Transcription</label>'),
          (U = space()),
          (W = element('li')),
          (V = element('a')),
          (G = text('Edit')),
          (Z = space()),
          (X = element('div')),
          (K = element('p'))
        for (let e = 0; e < he.length; e += 1) he[e].c()
        ;(Y = space()),
          ue && ue.c(),
          attr(n, 'class', 'svelte-o8m30x'),
          attr(a, 'class', 'svelte-o8m30x'),
          void 0 === e[2] && add_render_callback(() => e[13].call(a)),
          attr(s, 'class', 'select'),
          attr(r, 'class', 'pl svelte-o8m30x'),
          attr(h, 'class', 'svelte-o8m30x'),
          attr(c, 'class', 'jl svelte-o8m30x'),
          attr(g, 'href', '#top'),
          attr(p, 'class', 'pl svelte-o8m30x'),
          attr(f, 'href', '#top'),
          attr(v, 'class', 'pl svelte-o8m30x'),
          attr(w, 'class', 'svelte-o8m30x'),
          attr(S, 'class', 'svelte-o8m30x'),
          void 0 === e[1] && add_render_callback(() => e[14].call(S)),
          attr(_, 'class', 'select'),
          attr(x, 'class', 'svelte-o8m30x'),
          attr(P, 'class', 'pl svelte-o8m30x'),
          attr(k, 'href', '#top'),
          attr(C, 'class', 'pl svelte-o8m30x'),
          attr(i, 'class', 'toolbar svelte-o8m30x'),
          attr(t, 'role', 'navigation'),
          attr(L, 'id', 'preview'),
          attr(L, 'class', 'preview svelte-o8m30x'),
          set_style(L, '--height', e[5] + 'px'),
          attr(B, 'class', 'pane grow static svelte-o8m30x'),
          attr(j, 'class', 'svelte-o8m30x'),
          attr(V, 'href', (q = '/edit/' + e[0].id)),
          attr(W, 'class', 'svelte-o8m30x'),
          attr($, 'class', 'toolbar svelte-o8m30x'),
          attr(X, 'class', 'transcription svelte-o8m30x'),
          attr(A, 'class', 'pane svelte-o8m30x'),
          attr(N, 'class', 'vertical-split svelte-o8m30x'),
          attr(F, 'class', 'pane svelte-o8m30x'),
          attr(D, 'class', 'desk svelte-o8m30x')
      },
      m(q, te) {
        insert(q, t, te),
          append(t, i),
          append(i, n),
          append(i, o),
          append(i, r),
          append(r, s),
          append(s, a)
        for (let e = 0; e < ie.length; e += 1) ie[e].m(a, null)
        select_option(a, e[2]),
          append(i, l),
          append(i, c),
          append(c, h),
          append(h, u),
          append(i, d),
          append(i, p),
          append(p, g),
          append(i, m),
          append(i, v),
          append(v, f),
          append(i, y),
          append(i, w),
          append(i, T),
          append(i, x),
          append(x, _),
          append(_, S),
          re.m(S, null),
          select_option(S, e[1]),
          append(i, E),
          append(i, P),
          mount_component(b, P, null),
          append(i, R),
          append(i, C),
          append(C, k),
          le.m(k, null),
          append(k, O),
          insert(q, I, te),
          insert(q, D, te),
          append(D, B),
          append(B, L),
          e[15](L),
          append(D, H),
          mount_component(z, D, null),
          append(D, M),
          append(D, F),
          append(F, N),
          append(N, A),
          append(A, $),
          append($, j),
          append($, U),
          append($, W),
          append(W, V),
          append(V, G),
          append(A, Z),
          append(A, X),
          append(X, K)
        for (let e = 0; e < he.length; e += 1) he[e].m(K, null)
        append(N, Y),
          ue && ue.m(N, null),
          (Q = !0),
          J ||
            ((ee = [
              listen(a, 'change', e[13]),
              listen(a, 'click', e[7]),
              listen(g, 'click', prevent_default(e[12])),
              listen(f, 'click', prevent_default(e[11])),
              listen(S, 'change', e[14]),
              listen(k, 'click', prevent_default(e[8])),
            ]),
            (J = !0))
      },
      p(e, t) {
        if (1 & t[0]) {
          let i
          for (te = e[0].textRefs, i = 0; i < te.length; i += 1) {
            const n = get_each_context_2(e, te, i)
            ie[i]
              ? ie[i].p(n, t)
              : ((ie[i] = create_each_block_2(n)), ie[i].c(), ie[i].m(a, null))
          }
          for (; i < ie.length; i += 1) ie[i].d(1)
          ie.length = te.length
        }
        5 & t[0] && select_option(a, e[2]),
          (!Q || 64 & t[0]) && set_data(u, e[6]),
          oe === (oe = ne(e)) && re
            ? re.p(e, t)
            : (re.d(1), (re = oe(e)), re && (re.c(), re.m(S, null))),
          3 & t[0] && select_option(S, e[1])
        const i = {}
        if (
          (1 & t[0] && (i.to = '/edit2/' + e[0].id),
          4 & t[1] && (i.$$scope = { dirty: t, ctx: e }),
          b.$set(i),
          ae !== (ae = se(e)) &&
            (le.d(1), (le = ae(e)), le && (le.c(), le.m(k, O))),
          (!Q || 32 & t[0]) && set_style(L, '--height', e[5] + 'px'),
          (!Q || (1 & t[0] && q !== (q = '/edit/' + e[0].id))) &&
            attr(V, 'href', q),
          1 & t[0])
        ) {
          let i
          for (ce = e[0].transcriptionLines, i = 0; i < ce.length; i += 1) {
            const n = get_each_context$1(e, ce, i)
            he[i]
              ? he[i].p(n, t)
              : ((he[i] = create_each_block$1(n)), he[i].c(), he[i].m(K, null))
          }
          for (; i < he.length; i += 1) he[i].d(1)
          he.length = ce.length
        }
        e[3]
          ? ue
            ? ue.p(e, t)
            : ((ue = create_if_block$5(e)), ue.c(), ue.m(N, null))
          : ue && (ue.d(1), (ue = null))
      },
      i(e) {
        Q ||
          (transition_in(b.$$.fragment, e),
          transition_in(z.$$.fragment, e),
          (Q = !0))
      },
      o(e) {
        transition_out(b.$$.fragment, e),
          transition_out(z.$$.fragment, e),
          (Q = !1)
      },
      d(i) {
        i && detach(t),
          destroy_each(ie, i),
          re.d(),
          destroy_component(b),
          le.d(),
          i && detach(I),
          i && detach(D),
          e[15](null),
          destroy_component(z),
          destroy_each(he, i),
          ue && ue.d(),
          (J = !1),
          run_all(ee)
      },
    }
  }
  async function getPassage(e) {
    const t = await fetch('/api/v1/passage/' + e)
    return (await t.json()).data
  }
  function instance$a(e, t, i) {
    let n,
      o,
      r,
      { passage: s } = t,
      a = void 0,
      l = void 0,
      c = void 0,
      h = !1,
      u = s.catalog.urn,
      d = !1,
      p = void 0,
      g = 350
    function m(e) {
      a && a.destroy(),
        Array.isArray(e) &&
          e.length > 0 &&
          ((c && e.includes(c)) || i(1, (c = e[0])),
          (l = getInternalOpts('preview', c)),
          (function (e) {
            const { tileSources: t, ...i } = e
            ;(a = openseadragon$1(i)),
              a.addHandler('open-failed', () => {
                a.destroy()
              }),
              a.addHandler('open', () => {}),
              a.open(t)
          })(l))
    }
    return (
      onMount(() => {
        i(20, (h = !0))
      }),
      (e.$$set = (e) => {
        'passage' in e && i(0, (s = e.passage))
      }),
      (e.$$.update = () => {
        2097152 & e.$$.dirty[0] &&
          Promise.all([getPassage(n)])
            .then(([e]) => {
              i(0, (s = e))
            })
            .catch((e) => (o = e)),
          1 & e.$$.dirty[0] && i(6, (r = s.id.split(':').pop())),
          1048577 & e.$$.dirty[0] && h && m(s.imageRefs)
      }),
      [
        s,
        c,
        u,
        d,
        p,
        g,
        r,
        function () {
          i(21, (n = u))
        },
        function () {
          i(3, (d = !d))
        },
        function () {
          i(3, (d = !1))
        },
        function (e) {
          i(5, (g = e.detail.y - p.offsetTop))
        },
        function () {
          i(21, (n = s.nextPassage))
        },
        function () {
          i(21, (n = s.previousPassage))
        },
        function () {
          ;(u = select_value(this)), i(2, u), i(0, s), i(21, n)
        },
        function () {
          ;(c = select_value(this)), i(1, c), i(0, s), i(21, n)
        },
        function (e) {
          binding_callbacks[e ? 'unshift' : 'push'](() => {
            ;(p = e), i(4, p)
          })
        },
      ]
    )
  }
  class PassageDesk extends SvelteComponent {
    constructor(e) {
      super(),
        init(
          this,
          e,
          instance$a,
          create_fragment$a,
          safe_not_equal,
          { passage: 0 },
          [-1, -1]
        )
    }
  }
  function create_if_block_1$5(e) {
    let t, i, n
    return {
      c() {
        ;(t = element('p')), (i = text('An error occurred: ')), (n = text(e[1]))
      },
      m(e, o) {
        insert(e, t, o), append(t, i), append(t, n)
      },
      p(e, t) {
        2 & t && set_data(n, e[1])
      },
      i: noop,
      o: noop,
      d(e) {
        e && detach(t)
      },
    }
  }
  function create_if_block$6(e) {
    let t, i
    return (
      (t = new PassageDesk({ props: { passage: e[0] } })),
      {
        c() {
          create_component(t.$$.fragment)
        },
        m(e, n) {
          mount_component(t, e, n), (i = !0)
        },
        p(e, i) {
          const n = {}
          1 & i && (n.passage = e[0]), t.$set(n)
        },
        i(e) {
          i || (transition_in(t.$$.fragment, e), (i = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e), (i = !1)
        },
        d(e) {
          destroy_component(t, e)
        },
      }
    )
  }
  function create_fragment$b(e) {
    let t, i, n, o
    const r = [create_if_block$6, create_if_block_1$5],
      s = []
    function a(e, t) {
      return e[0] && !e[1] ? 0 : e[1] ? 1 : -1
    }
    return (
      ~(t = a(e)) && (i = s[t] = r[t](e)),
      {
        c() {
          i && i.c(), (n = empty())
        },
        m(e, i) {
          ~t && s[t].m(e, i), insert(e, n, i), (o = !0)
        },
        p(e, [o]) {
          let l = t
          ;(t = a(e)),
            t === l
              ? ~t && s[t].p(e, o)
              : (i &&
                  (group_outros(),
                  transition_out(s[l], 1, 1, () => {
                    s[l] = null
                  }),
                  check_outros()),
                ~t
                  ? ((i = s[t]),
                    i || ((i = s[t] = r[t](e)), i.c()),
                    transition_in(i, 1),
                    i.m(n.parentNode, n))
                  : (i = null))
        },
        i(e) {
          o || (transition_in(i), (o = !0))
        },
        o(e) {
          transition_out(i), (o = !1)
        },
        d(e) {
          ~t && s[t].d(e), e && detach(n)
        },
      }
    )
  }
  async function getPassage$1(e) {
    const t = await fetch('/api/v1/passage/' + e)
    return (await t.json()).data
  }
  async function getUser() {
    const e = await fetch('/api/v1/user')
    return (await e.json()).data
  }
  function instance$b(e, t, i) {
    let n,
      o,
      { urn: r } = t
    return (
      (e.$$set = (e) => {
        'urn' in e && i(2, (r = e.urn))
      }),
      (e.$$.update = () => {
        4 & e.$$.dirty &&
          (ctsUrn_1(r, { nid: 'cts' }) || i(2, (r = 'undefined'))),
          4 & e.$$.dirty &&
            Promise.all([getPassage$1(r), getUser()])
              .then(([e, t]) => {
                i(0, (n = e))
              })
              .catch((e) => i(1, (o = e)))
      }),
      [n, o, r]
    )
  }
  class PassageOverview extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$b, create_fragment$b, safe_not_equal, { urn: 2 })
    }
  }
  function instance$c(e) {
    return location.reload(), []
  }
  class NotFound extends SvelteComponent {
    constructor(e) {
      super(), init(this, e, instance$c, null, safe_not_equal, {})
    }
  }
  function create_default_slot$3(e) {
    let t, i, n, o, r, s, a, l
    return (
      (t = new Route({
        props: {
          path: '/tools/section/PassageOverview',
          component: PassageOverview,
        },
      })),
      (n = new Route({
        props: { path: '/tools/section/IngestCEX', component: IngestCex },
      })),
      (r = new Route({
        props: { path: '/ingest/image', component: IngestImage },
      })),
      (a = new Route({ props: { path: '*', component: NotFound } })),
      {
        c() {
          create_component(t.$$.fragment),
            (i = space()),
            create_component(n.$$.fragment),
            (o = space()),
            create_component(r.$$.fragment),
            (s = space()),
            create_component(a.$$.fragment)
        },
        m(e, c) {
          mount_component(t, e, c),
            insert(e, i, c),
            mount_component(n, e, c),
            insert(e, o, c),
            mount_component(r, e, c),
            insert(e, s, c),
            mount_component(a, e, c),
            (l = !0)
        },
        p: noop,
        i(e) {
          l ||
            (transition_in(t.$$.fragment, e),
            transition_in(n.$$.fragment, e),
            transition_in(r.$$.fragment, e),
            transition_in(a.$$.fragment, e),
            (l = !0))
        },
        o(e) {
          transition_out(t.$$.fragment, e),
            transition_out(n.$$.fragment, e),
            transition_out(r.$$.fragment, e),
            transition_out(a.$$.fragment, e),
            (l = !1)
        },
        d(e) {
          destroy_component(t, e),
            e && detach(i),
            destroy_component(n, e),
            e && detach(o),
            destroy_component(r, e),
            e && detach(s),
            destroy_component(a, e)
        },
      }
    )
  }
  function create_fragment$c(e) {
    let t, i, n, o
    return (
      (n = new Router({
        props: {
          url: e[0],
          $$slots: { default: [create_default_slot$3] },
          $$scope: { ctx: e },
        },
      })),
      {
        c() {
          ;(t = element('style')),
            (t.textContent =
              ':root {\r\n      --toolbar-bg-color: rgb(240, 240, 240);\r\n      --toolbar-text-color: rgb(50, 50, 50);\r\n      --toolbar-border-color: rgb(200, 200, 200);\r\n      --pane-bg-color: rgba(248, 248, 248);\r\n    }'),
            (i = space()),
            create_component(n.$$.fragment)
        },
        m(e, r) {
          append(document.head, t),
            insert(e, i, r),
            mount_component(n, e, r),
            (o = !0)
        },
        p(e, [t]) {
          const i = {}
          1 & t && (i.url = e[0]),
            2 & t && (i.$$scope = { dirty: t, ctx: e }),
            n.$set(i)
        },
        i(e) {
          o || (transition_in(n.$$.fragment, e), (o = !0))
        },
        o(e) {
          transition_out(n.$$.fragment, e), (o = !1)
        },
        d(e) {
          detach(t), e && detach(i), destroy_component(n, e)
        },
      }
    )
  }
  function instance$d(e, t, i) {
    let { url: n = location.pathname } = t
    return (
      (e.$$set = (e) => {
        'url' in e && i(0, (n = e.url))
      }),
      [n]
    )
  }
  class App extends SvelteComponent {
    constructor(e) {
      super(),
        init(this, e, instance$d, create_fragment$c, safe_not_equal, { url: 0 })
    }
  }
  const app = new App({ target: document.getElementById('app') })
  return app
})()
//# sourceMappingURL=bundle.js.map
